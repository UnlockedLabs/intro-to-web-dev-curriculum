<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: Introduction to Web Dev</title>
    <link>http://localhost:1313/functions/reading/index.html</link>
    <description>Reading Content Introduction Using Functions Creating Functions Function Input and Output A Good Function-Writing Process Parameters and Variables Naming Functions Composing Functions Why Create Functions? </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 May 2023 12:55:09 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/functions/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/functions/reading/introduction/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/introduction/index.html</guid>
      <description>You have been using functions throughout your learning so far, without receiving a full explanation of how functions work. This chapter focuses explicitly on the details of how functions work, how they can be used, and how you can create functions of your own.&#xA;A function is a reusable, callable piece of code. Like variables, functions often have names (though the next chapter shows us that we can create functions without names).</description>
    </item>
    <item>
      <title>Using Functions</title>
      <link>http://localhost:1313/functions/reading/using-functions/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/using-functions/index.html</guid>
      <description>Having informally used and discussed functions, it is time to formalize a few concepts.&#xA;A function call is the act of using a function by referring to its name, followed by parentheses. A synonymous term is function invocation, and we will sometimes say that we are “invoking a function.”&#xA;Within parentheses, a comma-separated list of arguments may be provided when calling a function. These are sometimes called inputs, and we say that the inputs are “passed to” the function.</description>
    </item>
    <item>
      <title>Creating Functions</title>
      <link>http://localhost:1313/functions/reading/creating-functions/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/creating-functions/index.html</guid>
      <description>While using the functions built into JavaScript is useful, the most powerful aspect of functions is the ability of programmers to create their own.&#xA;There are several ways to define functions in JavaScript. We will introduce one technique in this chapter and a second technique in the next.&#xA;Function Syntax To create a function, use the following syntax:&#xA;function myFunction(parameter1, parameter2,..., parameterN) { // function body }</description>
    </item>
    <item>
      <title>Function Input and Output</title>
      <link>http://localhost:1313/functions/reading/input-output/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/input-output/index.html</guid>
      <description>In the introduction to this chapter, we used the metaphor of the function machine , noting that the machine takes input and provides output. This section focuses on the details of these two aspects of function behavior.&#xA;Return Statements Some functions return values that are useful. In particular, the type conversion functions convert input to the specified data type and return the result—calling Number(&#34;3.14&#34;) returns the value 3.14.</description>
    </item>
    <item>
      <title>A Good Function-Writing Process</title>
      <link>http://localhost:1313/functions/reading/function-writing/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/function-writing/index.html</guid>
      <description>The function is the most complex JavaScript construct that we have seen. Functions have more components to their syntax than conditionals or loops, and can be used in more intricate ways than those constructs.&#xA;To avoid frustration and bugs, it’s important to approach writing functions in an intentional, structured way. This is essential as you start to write more complex functions.&#xA;In this section, we outline what we think is the best approach. To provide concrete examples, we will consider a fictional function that is able to make a sandwich.</description>
    </item>
    <item>
      <title>Parameters and Variables</title>
      <link>http://localhost:1313/functions/reading/parameter-variables/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/parameter-variables/index.html</guid>
      <description>Earlier, we said that a parameter “behaves like a variable that exists only within the function.” While this is true, the relationship between variables and parameters is a bit more complicated.&#xA;Function Scope The scope of a variable is the extent to which a variable is visible within a program. Scope consists of all locations within a program where a variable can be used or modified. Introducing functions gives us one of our first examples of limited variable scope—a situation in which a variable is not visible throughout an entire program.</description>
    </item>
    <item>
      <title>Naming Functions</title>
      <link>http://localhost:1313/functions/reading/naming-functions/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/naming-functions/index.html</guid>
      <description>As with variables, choosing good, descriptive names for the functions you write is important. It makes your code more readable, and therefore more maintainable and more bug-resistent.&#xA;Use Camel Case As with variables, use camel case. All functions in JavaScript should begin with a lowercase letter, with the first letter of subsequent words capitalized.&#xA;Example Good</description>
    </item>
    <item>
      <title>Composing Functions</title>
      <link>http://localhost:1313/functions/reading/composing-functions/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/composing-functions/index.html</guid>
      <description>The practice of using functions to build other functions is known as function composition, or simply composition. To demonstrate, we consider a specific example.&#xA;Palindrome Checker A palindrome can be defined as a word that is spelled the same backwards and forwards. Some examples are “tacocat”, “kayak”, and “racecar”.&#xA;Note There are other factors that are sometimes included in the definition of a palindrome. For example, an alternative definition is that a palindrome is a sentence or phrase that contains letters in the same order, whether considered from beginning-to-end, or end-to beginning, ignoring punctuation, case, and spaces.</description>
    </item>
    <item>
      <title>Why Create Functions?</title>
      <link>http://localhost:1313/functions/reading/why-create-functions/index.html</link>
      <pubDate>Thu, 25 May 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/functions/reading/why-create-functions/index.html</guid>
      <description>After wading through all of the new syntax necessary to create a function, you might be asking yourself, Why would I ever want to do this? Good question! We have a few answers.&#xA;Functions Reduce Repetition Like loops, functions help us keep our code DRY. When we need to repeat the same basic task in multiple parts of a program, a function will allow us to package up that task into a neat, reusable form. Loops enable the same task to be repeated many times in succession, while functions enable the same task to be repeated in different portions of a program.</description>
    </item>
  </channel>
</rss>