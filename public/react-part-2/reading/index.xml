<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading on Introduction to Web Dev</title>
    <link>http://localhost:1313/react-part-2/reading/index.html</link>
    <description>Recent content in Reading on Introduction to Web Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 May 2023 11:39:25 -0500</lastBuildDate><atom:link href="http://localhost:1313/react-part-2/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript in React</title>
      <link>http://localhost:1313/react-part-2/reading/js-in-react/index.html</link>
      <pubDate>Wed, 03 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/react-part-2/reading/js-in-react/index.html</guid>
      <description>Using JavaScript in React React is a JavaScript library. You can create the following JavaScript expressions in your React projects:
Variables Loops Functions Conditionals Objects Strings DOM and Window events. The syntax is a little different in React, but the functionality is the same.
A Note on Naming Conventions. In React part 1, we used className to apply CSS stylings instead of class. This is because class is a JavaScript keyword.</description>
    </item>
    <item>
      <title>Conditional Rendering</title>
      <link>http://localhost:1313/react-part-2/reading/conditional-rendering/index.html</link>
      <pubDate>Wed, 03 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/react-part-2/reading/conditional-rendering/index.html</guid>
      <description>React components may need to display different things depending on certain conditions. This is called Conditional Rendering. Conditional rendering allows you to change the output with logical operators. This includes if, if/else, logical AND (&amp;amp;&amp;amp;) operator, and the ternary operator.
if statements We can use if statements to create conditions. Those conditions then determine the output of our application.
In the example below, we have two functions, Rainy and Sunny. Each one returns a simple &amp;lt;h1&amp;gt; message.</description>
    </item>
    <item>
      <title>The map( ) Function</title>
      <link>http://localhost:1313/react-part-2/reading/mapping/index.html</link>
      <pubDate>Wed, 03 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/react-part-2/reading/mapping/index.html</guid>
      <description>map() map() is used for iterating through or displaying lists of similar objects of a component in React. The map() function creates a new array, which it renders to the DOM. This allows you to manipulate data from an array without changing the original array. It is similar to any of the loops you learned in the JavaScript portion of this book.
To use the map() function, you chain it to the array you want to iterate over.</description>
    </item>
  </channel>
</rss>