[
  {
    "content": "Traits of Good Programmers\nCurious. Good communicator. Creative. Detail-oriented. Persistent. Problem solver.\nThese are some traits that successful computer programmers share. People come to computer programming from all different walks of life and previous job experiences. But the things they have in common are that they like to solve problems. They can both imagine (or invent) the “big picture” as well as pay attention to the “little details”. They can express their ideas and listen attentively to the ideas of others. Finally, they are persistent–they don’t give up!\nAs you’ll soon discover, coding is not easy. It is interesting and often fun (especially as you get more experienced in it), but it is rarely easy. You’ll often run into difficulties that you need to work through and solve more or less on your own. So while we’d like to say that “anyone can learn to code”, it is more accurate to say that “anyone who is willing to work hard and persist through difficulties can code.”\nYes, there is homework, which consists of prep work, exercises, studios, and assignments. Only the assignments count toward your final grade. You do not have to do the ungraded homework, but you absolutely SHOULD. Practice Makes Perfect I hear, and I forget. I see, and I remember. I do, and I understand. – Chinese Proverb\nExperience is definitely the best teacher. You could read pages and pages about for loops, which will give you a handle on the vocabulary. However, until you actually construct your first working loop, your understanding will be incomplete.\nEffort = Outcome\nLet’s take a look at a sample coding task: “Prompt the user to enter a number, then print ‘Even’ if it is divisible by 2, otherwise print ‘Odd’.”\nNow let’s take a look at an imaginary student’s attempt at solving this problem:\n1. 2. 3. 4. 5. Hmmm. A blank answer space. What might be the reason?\nThe student did not understand how to solve the problem. The student knew how to solve the problem and decided to skip the task. The student tried to solve the problem, could not get the program to work, so deleted the code. The student ran out of time when trying to complete the prep work before class. From a teacher’s perspective, ANY of these reasons could be valid, and we have no way of determining which is true. This prevents us from knowing how to best help the student. Where would we begin?\nFor the student, a blank response provides no benefit because the necessary practice was either ignored or incomplete. Students gain only as much as they put in. SO:\nEven if you have no clue how to approach a task, MAKE AN ATTEMPT ANYWAY, then ask questions. If you know how to solve the problem, COMPLETE THE TASK ANYWAY, because practice makes better. Also, you could use your code to help answer a classmate’s question. If you tried to solve the problem, but your code did not work, DO NOT DELETE YOUR ATTEMPT. Ask a question. Showing your work to your teacher, TA or classmates will give them a clear idea about your thought process. If you ran out of time, GO BACK AND FILL IN THE BLANKS LATER. Practice makes better. If you neglect one set of skills, then the tasks that come later and depend on those skills will be more difficult. Job Success Imagine you land a sweet tech job, and on your first day your boss says to you, “Implement a recursive algorithm to flatten our data structure.” If your entire prep for this job was reading with very little coding, you might understand each individual word, but actually accomplishing the task would be a disaster.\nNow imagine your prep involved using recursion and constructing algorithms over and over again. You would not only understand the words, but also have a strong idea of how to convert those words into working code.\nBest Practices Here are some bits of advice:\nDO try every exercise, studio and practice problem. Repeated practice helps master the basic syntax quirks for a given programming language. DO experiment. Once your code correctly solves the given task, feel free to tweak it. Great fun can be had if you ask, “What if I try ____,” and then go and do just that. For example, if a problem asks you to sort a list alphabetically, can you order it from z to a instead? ASK FOR HELP when you get stuck. We’ve all been there, and there is no shame in seeking advice. Use your instructors, TAs, classmates, Stack Overflow, and Google as the brilliant resources they are. The only “dumb questions” are the ones that are not asked. The rubber duck method works. Sometimes just describing a coding problem out loud (to your screen, a co-worker, the wall, or a rubber duck) sparks an idea about how to solve it. DO NOT copy/paste answers. There are plenty of websites where you can find complete code posted. A simple copy/paste into the assignment box will give you a correct result, but you have completely skipped your learning opportunity. DO make a running list of things you’ve learned and watch it grow each class. And don’t forget:\nLearning takes work, and you need the practice. Do your homework.\n",
    "description": "",
    "tags": null,
    "title": "Best Practices: Learning to Code",
    "uri": "/booster-rockets/bestpractices/index.html"
  },
  {
    "content": "One of the main benefits of programming is we don’t work in isolation. We can import modules that contain code that we can use to help us write our own programs. We use online documentation like MDN and W3Schools to help us learn how to utilize aspects of a programming language. We use online forums like Stack Overflow and Google to find answers to specific problems. We even use other people like our classmates, TAs, and instructors to help figure out how to solve problems.\nWe can also use other people’s data in our applications. There are multiple ways of using other people’s data, or external data, in our applications. Over the course of the next two chapters, we will focus on using fetch() and JSON to request and use data.\nAPI When using a website, we mainly work with GUIs (Graphical User Interface) which contain buttons, forms, text boxes, etc. However, our program does not know how to use a GUI. Programs use APIs (Application Programming Interface) to communicate with other programs.\nConsider the software you use on a daily basis, like Microsoft Word, Google Chrome, or a music streaming device like Spotify. When you open the software, a window pops up on your screen and is filled with text, buttons, search bars, scroll bars, etc. Usually, with a little trial and error, you can learn how to use the interface easily. This interface we use is called a Graphical User Interface, or GUI for short.\nWe interact with computers using various interfaces, either with a GUI or a CLI. However, an application does not know how to use a GUI, or a CLI, and needs its own interface to communicate with another application. An API is the interface that allows one application to communicate with another application.\nAn API is how one application communicates with another application. We will be making a request to an API in order to retrieve information we need for our application.\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/json/reading/introduction/index.html"
  },
  {
    "content": " Introduction Data Formats and JSON ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/json/reading/index.html"
  },
  {
    "content": "Most people use the Internet without fully understanding how it works. Without much trouble, they can open a browser, navigate to a site, and interact with it. They do not need to know precisely how the Internet works in order to use it.\nFor web developers, however, fundamental understanding of the flow of information across the Internet is essential.\nServers and Clients The Internet uses the client-server model. A server is an application that provides resources—such as raw data, web pages, or images. A client is an application that requests resources from a server.\nWhen navigating the web, the client is the web browser on your computer or smartphone. When you click on a link or type in an address and hit Enter, the client/browser makes a request to a server that sits in a building somewhere out in the world. The server receives the request, and sends a response back to the client. The client then displays the content of the response.\nSeveral clients communicating with a server.\nNote In the client-server model, the server may sometimes be on the same computer as the client. This is often the case when a programmer is building a web application. The in-progress, development version of the application is on their laptop, as is their browser that they use to test the app.\nProtocols A protocol is a standard for communication between computers. Most web communication uses three protocols, in fact.\nProtocol Full Name Role HTTP Hypertext Transfer Protocol High-level web communication for transferring files and information, including: HTML, CSS, JavaScript files, images, and other media form submissions TCP/IP Transmission Control Protocol / Internet Protocol Low-level web communication for transferring small chunks of raw data known as packets DNS Domain Name Service Translates human-friendly names into server addresses A thorough understanding of each of these protocols is well beyond the scope of this class. However, as a web developer it is important you have a general understanding of their roles. Each protocol has a different and critical job in enabling web communication.\nHTTP HTTP is the most important protocol for web developers to understand, which you may have guessed from the title of this chapter. It specifies how requests for common web data—such as HTML files or images—should be structured, as well as responses to such requests. The details of request and response message structure are the topic of the rest of this chapter.\nHTTPS refers to the HTTP protocol used with a secure connection. A secure connection encrypts so that it can’t be read while in-transit. The data is encrypted by the server/client before being transmitted, and decrypted once it is received by the client/server. The precise details of how such encryption works is beyond the scope of this course.\nTCP/IP TCP/IP is a low-level protocol that is quite complicated. For our purposes, it is important only to know that TCP/IP is the standard that allows raw data to get from one place to another on the Internet.\nWhen a server sends a file back to a client, that file must physically be sent across a series of network components, including cables, routers, and switches. Files are broken down into packets—small chunks of a standard size—that are individually sent from one location to the next, until arriving at their final destination and being reassembled.\nNote You can think of the Internet as a “ series of tubes. ” This phrase was used by a U.S. Senator in 2006 and widely mocked. However, we think it’s actually a reasonable analogy. TCP/IP allows data to be passed from one tube to another until reaching the final destination.\nDNS DNS is the address book of the Internet. It enables us to use readable and memorable names for servers, such as www.launchcode.org or mail.google.com. Such names are called domain names, and they function as aliases for the actual server addresses.\nEvery server on the internet has a numerical address known as an IP address. When a message is addressed using a domain name, the corresponding IP address must be determined before it can be sent.\nExample The IP addresses of www.launchcode.org and mail.google.com are 104.25.127.113 and 172.217.5.229, respectively.\nThe sending computer will attempt to resolve the domain name by looking it up on a nameserver. A nameserver is a directory of domains and IP addresses, and there are thousands of them on the Internet. Most internet service providers (such as Charter or AT\u0026T) provide DNS servers for their customers to use. Once the sending computer knows the IP address, it can send the request to the correct server.\nExample It’s easy to look up the IP address of any domain name using freely-available tools.\nUse the popular site MX Toolbox to look up the IP address of launchcode.org.\nNote Every computer uses the special IP address 127.0.0.1 to refer to itself. This is known as the loopback address, and it often has the alias localhost. If you use the loopback address when making a request, the request will be sent to a service on the same machine as the client.\nWeb Addresses When a client requests a resource from a server, it does so using a uniform resource locator (URL). URLs are also called web addresses.\nExample As a regular user of the Internet, you are already familiar with URLs like these:\nhttps://www.launchcode.org https://en.wikipedia.org/wiki/Client–server_model https://duckduckgo.com/?q=javascript A URL encodes a lot of information about the request, including what is being requested and where the request should be sent. URLs are made up of several components, each of which plays a role in enabling both client and server to understand what is being requested.\nWe will generally work with URLs with this structure:\nscheme://host:port/path?query_string The five components of this URL are:\nScheme Host Port (optional) Path (optional) Query String (optional) A properly-formed URL must have these components in the exact order shown here. Only scheme and host are required.\nLet’s look at each of these in detail.\nScheme The first portion of every URL specifies the scheme. Common schemes are http, https, ftp, mailto, and file. Most often, the scheme specifies the protocol to be used in making a request. For us, this will always be http or https. If left off, a web browser will insert the scheme http/s for you.\nThe scheme is always followed by ://.\nHost The host portion of a URL specifies where the request should be sent. The host can be either an IP address, like 104.25.128.113, or a domain name, like www.launchcode.org.\nPort Following the host is an optional port number. While the host determines the server that the request should be sent to, the port determines the specific application on the server that should handle the request. This is important because a single server may run several applications capable of handling requests.\nConventionally, a given type of application will always use the same port, though this is not a hard rule. For example, web servers typically use port 80 or 443, for regular and encrypted messages, respectively. On the other hand, MySQL databases typically use port 3306.\nExample Suppose a server at mydomain.com is running both a web server and MySQL database server on the standard ports. Requests to mydomain.com:80 will be given to the web server, while requests to mydomain:3306 will be given to the database server.\nIf a port number is not specified, then a default value based on the scheme is used. When using http:// the default port is 80. When using https:// the default port is 443.\nPath Following the domain and optional port is the path, which consists of a series of names separated by /. The path provides information that tells the server what is being requested. It can consist of a series of names, such as /blog/entries/2018/, or it can end with an explicit file name, such as /blog/index.html.\nExample A request to https://www.launchcode.org/blog/ asks for the resource that lives at the path /blog/ on the server www.launchcode.org. This resource happens to be the homepage of the LaunchCode blog.\nA request to the (very long) URL below asks for the LaunchCode logo, which lives at the path /assets/dabomb-2080d6e...57f.svg (truncated here for space).\nhttps://www.launchcode.org/assets/dabomb-2080d6e23ef41463553f203daaa15991fd4c812676d0b098243b4941fcf4b57f.svg If a path is not specified, then the root path / is used. The root path typically refers to the home page for a given site.\nQuery String Following the path is an optional query string, which begins with ? and contains a set of key-value pairs. Each pair is joined by = and is separated from the other pairs by \u0026. For example, the query string of a search on duckduckgo.com looks like this:\n?q=launchcode\u0026atb=v167-5__\u0026ia=web This query string has three key-value pairs:\nq : launchcode atb : v167-5__ ia : web Notice that these pairs are separated by \u0026 in the query string.\nWhile the path specifies what the request is asking for, the query string provides additional data that may be needed to fulfill the request. As an analogy, you can think of the path like a function name, and the query string as the function arguments.\nPutting It All Together We just covered a lot of information! While these nuts-and-bolts details are important, they aren’t nearly as important as the high-level picture of how we access resources on the internet.\nTo tie these ideas together, watch these two videos on URLs and the Internet as a whole:\nHow Do URLs Work? How the Internet Works Check Your Understanding Question Which protocol is responsible for turning a name like launchcode.org into a server address?\nQuestion Why is this URL malformed?\nhttps://launchcode.org?city=miami/lc101 It uses HTTPS when it should use HTTP. It doesn’t contain a fragment. It doesn’t contain a port. The query string comes before the path. ",
    "description": "",
    "tags": null,
    "title": "How the Internet Works",
    "uri": "/http/reading/how-the-internet-works/index.html"
  },
  {
    "content": " How the Internet Works HTTP at a Glance Requests Responses HTTP in the Browser ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/http/reading/index.html"
  },
  {
    "content": " What is Git? Repositories and Commits Remote Repositories Branches Merging in Git ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/git/reading/index.html"
  },
  {
    "content": "Code Together Coding together allows you to work as a team so you can build bigger projects faster.\nIn this studio, we will practice the common Git commands used when multiple people work on the same code base.\nYou and a partner will code in tag-team shifts. By the end of the studio, you should have a good idea about how two people can work on the same code at the same time. You will learn how to:\nQuickly add code in pull + push cycles (Important! This is the fundamental process!) Add a collaborator to a GitHub Project Share repositories on GitHub Create a branch in Git Create a pull request in GitHub Resolve merge conflicts (which are not as scary as they sound) This lesson reinforces:\nCreating repositories Cloning repositories Working with Git concepts: Staging, Commits, and Status. Overview The instructor will discuss why GitHub is worth learning. You already know how to use a local Git repository with one branch, giving you the ability to move your code forward and backward in time. Working with branches on GitHub extends this ability by allowing multiple people to build different features at the same time, then combine their work. Pull requests act as checkpoints when code flows from branch to branch.\nStudents must pair off for this exercise. If you have trouble finding a partner, ask your TA for help.\nGitting Ready You are going to simulate a radio conversation between a shuttle pilot and mission control. You and your partner will alternate tasks, so decide who will be the Pilot and who will be the Control.\nBefore you and your partner can begin your collaboration, some preparation is required first. You will both start by creating a new repository on your separate GitHub accounts.\nStep 1: Create a New Local Repository Control and Pilot: Both of you need to complete steps 1 - 6 on your own machines.\nIn the terminal, navigate to your development folder. Enter the following 3 commands to create a new project. Replace -ROLE with your part in this studio, either -pilot or -control.\n$ mkdir communication-log-ROLE $ cd communication-log-ROLE $ git init Note IMPORTANT: To avoid confusion later, it’s critical that you and your partner give different names to your repositories.\nFor the remainder of this studio, we will refer to the repo as communication-log.\nLaunch Visual Studio Code. Use the File menu to open the communication-log folder.\nCreate a new file called index.html and open it in the workspace.\nPaste this code into index.html:\n1 2 3 4 5 6 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003cp\u003eRadio check. Pilot, please confirm.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Save your work, then stage and commit it.\na. First, check the status.\n$ git status On branch main Initial commit Untracked files: (use \"Git add \u003cfile\u003e...\" to include in what will be committed) index.html nothing added to commit but untracked files present (use \"git add\" to track) b. The output shows is that index.html is not staged. Let’s add everything in this directory, then check the status again.\n$ git add . $ git status On branch main Initial commit Changes to be committed: (use \"git rm --cached \u003cfile\u003e...\" to unstage) new file: index.html c. The output tells us that the file is staged. Now let’s commit. After that, we can see a record of our progress by using git log.\n$ git commit -m \"Started communication log.\" [main (root-commit) e1c1719] Started communication log. 1 file changed, 5 insertions(+) create mode 100644 index.html $ git log commit 679de772612099c77891d2a3fab12af8db08b651 Author: Chris \u003cchrisbay@gmail.com\u003e Date: Wed Apr 5 10:55:56 2021 -0500 Started communication log. Use the command git branch to check the name for the default branch. If necessary, change the name to main.\n$ git branch * default_name $ git branch -m default_name main. GitHub uses main for its default branch. To make things easier, you should always try to match your local and remote branch names.\nGreat! You’ve got your project going locally. The next step is to push it up to GitHub.\nStep 2: Push Your Repository To GitHub Control and Pilot: Complete steps 1 - 5 on your separate devices and GitHub accounts.\nGo to your GitHub profile in a web browser. Click on the “+” button to add a new repository (called a repo for short).\nThe New Repository link is in the dropdown menu at top right on GitHub.\nOn the next page, fill in the Name and Description fields. Also, uncheck the Initialize this repository with a README option, then click Create Repository.\nNote If you initialize with a README, Git will refuse to merge the remote repo with your local one. There are ways around this, but it’s faster and easier to just create an empty repo on GitHub.\nAfter clicking, you should see something similar to:\nNow go back to your terminal and copy/paste the commands shown in the GitHub instructions. These should be very similar to:\n$ git remote add origin https://github.com/your-username/communication-log.git $ git branch -M main $ git push -u origin main Confirm that GitHub has the same version as your local project. Click around and make sure that everything is as you expect it to be.\nGit the Teamwork Started! You’ve successfully created a new GitHub repository and pushed content to it. Now it’s time for you and your partner to start collaborating on the same repo.\nFor the remaining sections of this studio, keep an eye on the Control and Pilot role tags. Make sure that you both perform your tasks in the recommended order. Mixing things up won’t destroy the universe, but it will make finishing the studio more complicated.\nEven when it is not your turn to complete a task, read and observe what your partner is doing. The steps here mimic a real-world collaborative Git workflow.\nStep 3: Add A Collaborator Control, the first step is yours. In order for Pilot to make changes to your GitHub repository, you must invite them to collaborate.\nControl: In your web browser, go to your communication-log repo. Click the Settings button then select the Manage Access option.\nControl: Click on the green Invite a collaborator button. Enter your partner’s GitHub username and click Add to repository.\nPilot: You should receive an email invitation to join this repository. View and accept the invitation.\nNote Pilot: If you don’t see the email, check your Spam folder. If you still don’t have the email, login to your GitHub account. Visit the URL for Control’s copy of the repo. You should see an invite notification at the top of the page.\nStep 4: Clone Project from GitHub Warning Pilot, did you and your partner give different names to your communication-log repositories?\nIf not, take a moment to find your local communication-log folder on your machine and rename it!\nPilot: Go to Control’s GitHub profile and find their communication-log repo. Click on the green Code button. Select the HTTPS option and copy the URL to your clipboard.\nPilot: In your terminal, navigate back to your development folder and clone Control’s repo. You should be OUTSIDE of any other Git repositories.\nThe clone command looks something like this:\n$ git clone https://github.com/username/communication-log.git Replace the URL with the address you copied from GitHub.\nPilot: You should now have a copy of Control’s project on your machine.\nGit Talking Whew! That was quite the setup experience. Now you’re ready to dive into the main part of the studio.\nOn to Part 2!\n",
    "description": "",
    "tags": null,
    "title": "Task 1: Getting Started",
    "uri": "/git/studio/studio-part1/index.html"
  },
  {
    "content": "Version Control Systems A version control system (VCS) is a system for tracking changes to a code base and storing each version. Version control systems assist programmers with keeping backups and a history of the revisions made to the code base over time. With that history, programmers can roll back to a version without a particular bug. A VCS also enables collaboration between programmers as they can work on different versions of a code base and share their work.\nGit is one VCS and is prevalent amongst programmers and corporations.\nA VCS uses a repository or storage container for the code base. We have seen repositories before in Git. Repositories include the files within the code base, the versions over time and a log of the changes made. When we make updates to the repository, we are making commits.\nCheck Your Understanding Question What is a benefit of using a VCS?\n",
    "description": "",
    "tags": null,
    "title": "What is Git?",
    "uri": "/git/reading/background/index.html"
  },
  {
    "content": "When programmers make web pages, they want their pages to be beautiful, interactive, and fun. Programmers may use JavaScript to make their pages interactive, but JavaScript does not do much to define the structure and appearance of a web page. The next two chapters cover HTML and CSS, which are the two most common languages for structuring content and making it beautiful.\nBefore jumping in to learn HTML and CSS, we need to understand how web pages appear on screens. The process involves the browser and the server that hosts the code. You are probably very familiar with browsers as the tool that gives us access to the internet. However, programmers think of browsers a little differently. For them, the browser is what translates the code into a web page.\nWhen you visit a web page in a browser, three main steps happen:\nThe browser sends a request to the server for the web page. The server responds with the code that makes up the web page. The browser takes the code and renders it to present the web page that the code creates. When the browser renders the page, HTML outlines the structure of the page’s content.\nNote Not all browsers handle code the same way. You might notice discrepancies between browsers, such as font or spacing of elements. If you are confident that your code is correct, the discrepancy is likely browser-related.\nIn later chapters, request and response between browsers and servers will be covered in greater detail.\nWhat is HTML? Indicators of how HTML works are in its name. HTML is short for Hypertext Markup Language.\nHypertext is text that includes references to other text known as hyperlinks.\nWith coding languages, there is a family of languages called markup languages. Markup languages annotate the text of a document and define the structure. HTML is the markup language that defines the structure of hypertext.\nHTML’s two main components, elements and tags, are key to defining the structure of content.\nHTML Elements When a programmer creates a web page, they break the content down by type. They may outline a structure for the page on paper first, highlighting what each item is. With HTML, a programmer can add a lot of different types of content to a page. In this chapter, the focus is on headings, paragraphs, images, and more.\nAn element is a segment of an HTML page. Elements are oftentimes broken down by content type.\nHTML tags An HTML tag is the syntax that the computer processes to determine the type and content of an HTML element.\nTags surround the content within the element, so in all cases, programmers need to have opening and closing tags.\nEach tag has the following structural elements:\n\u003c to start a tag and \u003e to close it. The type of element it is. Optional additional specification about the element’s appearance. Closing tags include the same information as the opening tag with a / after the \u003c bracket. Here is an example of a line of HTML:\n\u003celement type\u003econtent\u003c/element type\u003e HTML Writing Style Programmers write HTML different ways with different style guides and philosophies. Semantic HTML is not about the appearance of the web page, but about the specific meaning of the elements. Semantic HTML helps programmers communicate through code and may be easier to pick up at first. Programmers can make a paragraph larger than a heading. But by looking at the HTML, another programmer can understand which is the paragraph and which is the heading. Another benefit to semantic HTML is that it is easier for beginning programmers to visualize the end results. Some examples of semantic HTML tags are: \u003cp\u003e, \u003ch1\u003e, \u003ch2\u003e, and \u003cdiv\u003e.\nNote Making code work is important and so is making it easier for other programmers to read. Not every piece of code a programmer reads is something they wrote.\nCheck Your Understanding Question What does HTML stand for?\nHappy Tickles Make Laughter Hypertext Markup Language Hypertext Mockup Language Hyperlink Markup Layout ",
    "description": "",
    "tags": null,
    "title": "Background",
    "uri": "/html/reading/background/index.html"
  },
  {
    "content": " Background HTML Structure HTML Tags ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/html/reading/index.html"
  },
  {
    "content": " What are Classes? Declaring and Calling a Class Assigning Class Methods Inheritance ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/classes/reading/index.html"
  },
  {
    "content": "Recall that objects are data structures that hold many values, which consist of properties and methods.\nWe often need to create many objects of the same type. To do this in an efficient way, we define a class, which allows us to set up the general structure for an object. We can then reuse that structure to build multiple objects. These objects all have the same set of keys, but the values assigned to each key will vary.\nLet’s revisit the animal astronauts from earlier exercises to see how this works.\nAn Astronaut Object When we create an object to hold an astronaut’s data, it might look something like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let fox = { name: 'Fox', age: 7, mass: 12, catchPhrase: function(repeats) { let phrase = 'LaunchCode'; for (let i = 0; i \u003c repeats; i++) { phrase += ' Rocks'; } return phrase; } } console.log(`${fox.name} is ${fox.age} years old and has a mass of ${fox.mass} kg.`); console.log(`${fox.name} says, \"${fox.catchPhrase(3)}.\"`); Console Output\nFox is 7 years old and has a mass of 12 kg. Fox says, \"LaunchCode Rocks Rocks Rocks.\" The fox object contains all the data and functions for the astronaut named 'Fox'.\nOf course, we have multiple astronauts on our team. To store data for each one, we would need to copy the structure for fox multiple times and then change the values to suit each crew member. This is inefficient and repetitive.\nBy letting us define our own classes, JavaScript provides a better way to create multiple, similar objects.\n",
    "description": "",
    "tags": null,
    "title": "What are Classes?",
    "uri": "/classes/reading/introduction/index.html"
  },
  {
    "content": "In JavaScript, data types can fall into one of two categories: primitive or object types. A primitive data type specifies the size and type of variable values, and it has no additional methods. Using primitive data types, we can build more complex data structures or object data types.\nWhile object types such as objects and arrays are mutable, primitive data types are immutable. Immutable data types are data types that cannot be changed once the value has been created.\nPrimitive data types include:\nStrings Numbers Booleans undefined null undefined undefined is a primitive data type in JavaScript that is assigned to declared variables which have not been initialized.\nlet x; console.log(x) Console Output\nundefined null null is similar to undefined in that it represents an unknown value, however, it is assigned to values that the programmer wishes to keep empty.\nlet x = null; console.log(x); Console Output\nnull Example Let’s say that we are still working for the zoo. We have objects created for animals like so:\n1 2 3 4 5 6 7 let giraffe = { species: \"Reticulated Giraffe\", name: \"Cynthia\", weight: 1500, age: 15, diet: \"leaves\" }; Now, a new giraffe is coming to the zoo. We may want to initialize an object for the giraffe, but hold off on storing information in the weight property until the giraffe arrives. In this case, we could initialize the weight property like so:\n1 2 3 4 5 6 7 let giraffeTwo = { species: \"Reticulated Giraffe\", name: \"Alicia\", weight: null, age: 10, diet: \"leaves\" }; This way, our object is properly initialized with all of the information we would need and we can update the weight property later when we have accurate information.\nCheck Your Understanding Question Which of the following are primitive data types? Mark ALL that apply.\narrays Strings objects null Question Consider the following code block:\nlet x; console.log(x); x is of what data type?\nnull undefined NaN number ",
    "description": "",
    "tags": null,
    "title": "Primitive Data Types",
    "uri": "/more-on-types/reading/specialty-types/index.html"
  },
  {
    "content": " Primitive Data Types ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/more-on-types/reading/index.html"
  },
  {
    "content": " Why Test Your Code? Hello, Jest! Unit Testing in Action Test-Driven Development TDD in Action ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/unit-testing/reading/index.html"
  },
  {
    "content": "Checking your code is part of the development process. Developers rarely write code without verifying it. You are used to debugging programs as you write them. In fact, we devoted an entire chapter to debugging early in the course.\nYour development process probably looks something like this:\nWrite code Run program Notice error and investigate Repeat these steps until there are no more errors But there’s a better way to test your code, using automated tests. Automated tests actively test your code and help to remove the burden of manual testing. There are many types of automated tests. This chapter focuses on unit testing, which tests the smallest components (or units) of code. These are typically individual functions.\nBefore we dive into the how of unit testing, let’s discuss the why.\nKnow Your Code Really Works Manual testing can eventually lead you to a complete, error-free program. Unit testing provides a better alternative.\nThis might sound familiar:\nYou write a program and manually test it. Thinking it is complete, you turn it in only to find that it has a bug or use case that you didn’t consider.\nThe unit testing process helps avoid this by starting with a list of specific, clearly stated behaviors that the program should satisfy. The behaviors are then converted into automated tests that demonstrate program behavior and provide a framework for writing code that really works.\nFind Regressions What about this situation?\nYou write feature #1 for a program. You then move on to feature #2. After finishing feature #2, you realize that your changes broke feature #1.\nThis is frustrating, right? Especially with larger programs, adding new features often causes unexpected problems in other parts of the code, potentially breaking the entire program. The introduction of such a bug is known as a regression.\nIf you have a collection of tests that can run quickly and consistently, you will know right away when a regression appears in your program. This allows you to identify and fix it more quickly.\nTests as Documentation One of the most powerful aspects of unit testing is that it allows us to clearly define program expectations. A good collection of unit tests can function as a set of statements about how the program should behave. You and others can read the tests and quickly get an idea of the specifics of program behavior.\nExample Your coworker gives you a function that validates phone numbers, but doesn’t provide much detail. Does it handle country codes? Does it require an area code? Does it allow parentheses around area codes? These details would be easily understood if the function had a collection of unit tests that described its behavior.\nCode with a good, descriptive set of unit tests is sometimes called self-documenting code.\nRemembering what your code does and why you structured it a certain way is easy for small programs. However, as the number of your projects increase and their size grows, the need for documentation becomes critical.\nDocumentation can be in the form of code comments or external text documents. These can be helpful, but have one major drawback which is that they can get out of date very quickly. Out dated, incorrect documentation is very frustrating for a user.\nProperly designed unit tests are runnable documentation for your project. Because unit tests are runnable code that declares and verifies features, they can NEVER get out of sync with the updated code. If a feature is added or removed, the tests must be updated in order to make them pass.\nLet’s go ahead and write our first unit test!\n",
    "description": "",
    "tags": null,
    "title": "Why Test Your Code?",
    "uri": "/unit-testing/reading/why-test/index.html"
  },
  {
    "content": "So far we have learned a lot about arrays, which are data structures that can hold many values. Objects are also data structures that can hold many values.\nUnlike arrays, each value in an object has a name or key for reference purposes. The pairing between a key and its value is called a key/value pair.\nObjects store as many key/value pairs as needed, and each value needs a key. Without a key, the value cannot be accessed or modified by the programmer.\nInitializing Objects When defining an object, we call the initialization an object literal. Objects require three things for the definition: a name, a set of keys, and their corresponding values.\nNote Object literals use curly braces, {}, to enclose the key/value pairs.\nOnce we have these three things, we write an object literal like so:\nlet objectName = {key1:value1, key2:value2, key3:value3, ... }; If we have a lot of key/value pairs in our object, we can also put each one on a separate line!\nlet objectName = { key1: value1, key2: value2, key3: value3, . . . }; Warning When putting the key/value pairs on separate lines, it is important to pay attention to spaces and tabs! Incorrect spacing or tab usage can result in a bug.\nWhen defining an object, keep in mind that the keys can only be valid JavaScript strings. The values can be any of the data types that we have previously discussed.\nExample Let’s say that we want to create a small program for a zoo. We could create an object for storing the different data points about the animals in a zoo. We start with our first tortoise. His name is Pete! He is an 85 year old, 919 lb Galapagos Tortoise, who prefers a diet of veggies. Our object literal for all of this important data about Pete would be:\n1 2 3 4 5 6 7 let tortoiseOne = { species: \"Galapagos Tortoise\", name: \"Pete\", weight: 919, age: 85, diet: [\"pumpkins\", \"lettuce\", \"cabbage\"] }; Methods and Properties A property of an object is a key/value pair of an object. The property’s name is the key and the property’s value is the data assigned to that key.\nA method performs an action on the object, because it is a property that stores a function.\nExample In the case of Pete, our zoo’s friendly Galapagos Tortoise, the object tortoiseOne has several properties for his species, name, weight, age, and diet. If we wanted to add a method to our object, we might add a function that returns a helpful statement for the general public.\n1 2 3 4 5 6 7 8 9 10 let tortoiseOne = { species: \"Galapagos Tortoise\", name: \"Pete\", weight: 919, age: 85, diet: [\"pumpkins\", \"lettuce\", \"cabbage\"], sign: function() { return this.name + \" is a \" + this.species; } }; In the example above, on line 8, we see a keyword which is new to us. Programmers use the this keyword when they call an object’s property from within the object itself. We could use the object’s name instead of this, but this is shorter and easier to read. For example, the method, sign, could have a return statement of tortoiseOne.name + \" is a \" + tortoiseOne.species\". However, that return statement is bulky and will get more difficult to read with more references to the tortoiseOne object.\nCheck Your Understanding Question Which of the following is NOT a true statement about objects?\nObjects can store many values Objects have properties Objects have methods Keys are stored as numbers Question Which keyword can be used to refer to an object within an object?\nObject let this ",
    "description": "",
    "tags": null,
    "title": "Objects and Why They Matter",
    "uri": "/objects-and-math/reading/background/index.html"
  },
  {
    "content": " Objects and Why They Matter Working with Objects Coding with Objects The Math Object Math Methods Combining Math Methods ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/objects-and-math/reading/index.html"
  },
  {
    "content": "When repeating the same action over and over again, a human is likely to make a mistake. Computers, however, possess the incredible ability to carry out repetitive tasks without making mistakes.\nTo see this, let’s consider an appropriate, if somewhat contrived, example. Suppose you want to print out the integers 0 through 50. With the tools you currently have at your disposal, your program would look like this:\n1 2 3 4 5 6 console.log(0); console.log(1); console.log(2); console.log(3); console.log(4); // and so on... Not only is this highly repetitive, but it is also error-prone. Even if utilizing copy-paste functionality, the sheer volume of code makes it somewhat likely that we will make a simple mistake, such as skipping an integer or misspelling console.\nThis code is also hard to modify. If we want to make a conceptually simple change—such as printing all the way to 100, or only printing even numbers—then we are forced to update an immense amount of code. Programming languages provide tools that allow us to repeat a sequence of statements in a much simpler way.\nRepeated execution of a sequence of statements is called iteration. This chapter explores two mechanisms that JavaScript provides to make iteration simple and flexible—the for and while loops.\nTo give you a taste of what’s to come, here is how we could write the program above using a for loop.\n1 2 3 for (let i = 0; i \u003c 51; i++) { console.log(i); } We will explore the details of this syntax shortly, but it’s worth taking a moment to marvel at the simplicity of this program compared to the one above.\nNote It may seem odd to you that this loop uses the integer 51, but only prints up to 50. Why this is the case will become clear in the next section.\nLearning about iteration using loops is also an opportunity to introduce one of the most widely-known mnemonic devices in programming: Don’t Repeat Yourself, or DRY. A common piece of advice from instructors and experienced programmers is that you should “keep your code DRY.” Let’s learn how.\n",
    "description": "",
    "tags": null,
    "title": "Iteration",
    "uri": "/loops/reading/iteration/index.html"
  },
  {
    "content": "Reading Content Links Iteration for Loops Iterating Over Collections Breaking Down the for Statement The Accumulator Pattern while Loops Terminating a Loop with break Choosing Which Loop to Use ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/loops/reading/index.html"
  },
  {
    "content": "Reading Content What is Debugging? Categories of Errors Diagnosing Error Messages Error Types Debugging Logic Errors How to Avoid Debugging Asking Good Questions ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/errors-and-debugging/reading/index.html"
  },
  {
    "content": "Programming is a complex process. Since it is done by human beings, errors often occur. Programming errors are called bugs and the process of tracking them down and correcting them is called debugging.\nSome claim that in 1947, a dead moth caused a problem in one of the first computers. The term “bug” has remained in use since, to refer to any issue that prevents a program from working as intended. National Geographic even has an image of the supposed first bug .\nThree kinds of errors can occur in a program: syntax errors, runtime errors, and logic errors. We will first learn about each type of error, and then we will discuss strategies for debugging code and reducing errors.\nBeginning Tips for Debugging Debugging a program requires a different approach compared to writing the original code. As you debug, think of yourself as a detective. Something has gone wrong, and you must use clues, experience, intuition, trial and error, and an inquisitive spirit to solve the problem.\nOftentimes, you will find it tempting to blame errors on JavaScript itself. However, it is far, far more likely that the error is due to an issue with your code. We encourage you to think critically about the code you have written, and whether you may have made an error in writing your code. Even senior developers make basic errors on occasion!\nIn this chapter, we will discuss in detail common types of bugs, along with some effective strategies for debugging. You will learn to rely on error messages and console.log for clues and insight, and over time you will sharpen your debugging skills. We will also discuss how to approach writing code so as to prevent bugs from occurring in the first place.\n",
    "description": "",
    "tags": null,
    "title": "What is Debugging?",
    "uri": "/errors-and-debugging/reading/what-is-debugging/index.html"
  },
  {
    "content": "Reading Content What is Code? Syntax Rules JavaScript Projects Repository Comments Output with console.log Fixing Errors in Your Code ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/how-to-write-code/reading/index.html"
  },
  {
    "content": "Computers are dumb, understanding not an ounce of context or intended meaning. They react mechanically to the instructions we give them, and they cannot deviate from the steps we tell them to follow.\nIf our instructions are even the slightest bit off, computers cannot consider the error and adjust accordingly. Instead, they come to a grinding halt.\nSo how do we give computers instructions in the first place? The answer is to create code, which is a set of instructions for a computer to follow.\nWhat Code Can Do Here is a short list of SOME of the tasks we can carry out with code:\nInteract with users. Through code, we can ask a user questions, store the answers, and respond by changing what is on the screen. Interact with other systems. Through code, we can interact with resources that are outside of our program. For example, we can read data in from a file on our computer, or we can ask a server on the other side of the planet for information. Repeat tedious tasks. Have a few thousand emails to send? Need to spellcheck several thousand words? You can do these things with just a handful of code. Reuse useful code snippets. Rather than copy/paste the same lines of code in multiple places, we can assign a name to that code. This allows us to use it wherever we like by simply referring to its name. Decide what to do based on the current situation. When we write code, we often need to carry out one task under a specific set of circumstances, but another task if the circumstances differ. We can write code to decide which action to take. Of course, in order to work, code needs to follow a specific set of rules.\n",
    "description": "",
    "tags": null,
    "title": "What is Code?",
    "uri": "/how-to-write-code/reading/introduction/index.html"
  },
  {
    "content": " “It’ll take a few moments to get the coordinates from the navicomputer.” - Han Solo\nPrograms Given a set of inputs, Han’s computer analyzes the data and returns information about safely navigating a hyperspace jump. The computer does this by running a program.\nAt the most basic level, a program is a set of instructions that tell a computer or other machine what to do. These instructions consist of a set of commands, calculations, and manipulations that achieve a specific result. However, the computer cannot solve the problem on its own. Someone—a programmer—had to figure out a series of steps for the computer to follow. Also, the programmer had to write these steps in a way the computer can understand.\nAlgorithms Imagine following a recipe for baking a batch of cookies. After the list of ingredients comes a series of step-by-step instructions for producing the treats. If you want to make something else, like a cake or a roast, you follow a different set of steps using a different set of ingredients.\nAn algorithm is like a recipe. It is a systematic series of steps that, when followed, produce a specific result to help solve a problem. Programmers design algorithms to solve these small steps in a carefully planned way. The results then get combined to produce a final answer or action.\nLet’s take a look at an example of an algorithm—alphabetizing a list of words: apple, pear, zebra, box, rutabaga, fox, banana, socks, foot\nOne possible set of steps for solving the task could be:\nArrange the words from ‘A-Z’ based only on the first letter: apple, box, banana, fox, foot, pear, rutabaga, socks, zebra\nIf more than one word starts with ‘a’, rearrange those words based on the second letter. Repeat for the words that start with ‘b’, then ‘c’, etc.: apple, banana, box, fox, foot, pear, rutabaga, socks, zebra\nIf multiple words start with ‘a’ and have the same second letter, rearrange those words based on the third letter. Repeat for the ‘b’ words, then the ‘c’ words, etc.: apple, banana, box, foot, fox, pear, rutabaga, socks, zebra\nIf other repeats exist, continue sorting the list by comparing the 4th, 5th, 6th letters (etc.) until all the words are properly arranged.\nThis is not the ONLY way to solve the task, but it provides a series of steps that can be used in many different situations to organize different lists of words.\nAlphabetizing is a process we can teach a computer to do, and the algorithm will complete the process much more rapidly than a human. However, unlike the alphabet song that many of us still sing in our heads when arranging a list of words, programmers must use a different method to train the computer.\nChecking Your Understanding Question Select ALL of the following that can be solved by using an algorithm:\nAnswering a math problem. Sorting numbers in decreasing order. Making a peanut butter and jelly sandwich. Assigning guests to tables at a wedding reception. Creating a grocery list. Suggesting new music for a playlist. Making cars self-driving. ",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/how-programs-work/reading/introduction/index.html"
  },
  {
    "content": "Reading Content Introduction Programming Languages The JavaScript Language Setting Up Your Coding Tools Your First Program Workflow Recap ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/how-programs-work/reading/index.html"
  },
  {
    "content": "Fork and clone the starter code repository .\nTo get started, navigate to the directory with your copy of the starter code.\nRun npm install. Open index.html with Firefox to verify that your starter code is working. When you open index.html in the browser, you should see the Launch Checklist form with a rectangle above it for the mission destination and a rectangle below it that simply says “Awaiting Information Before Launch”.\nBefore starting work, go ahead and check out the various files in your starter code. You may notice a file called bundle.js. This file contains no code except for a comment. Do NOT delete or edit this file. The only files you should be editing when working on this project are script.js and scriptHelper.js. To modify styles or update HTML, do NOT modify styles.css or index.html.\nNote If you open up your browser’s dev tools, you may see a warning stating that the require statement in scriptHelper.js is not working. This is okay! That require statement is necessary for the autograder to function and this warning will not impact your site’s ability to function.\n",
    "description": "",
    "tags": null,
    "title": "Task 1: Setting Up the Starter Code",
    "uri": "/assignments/launch-checklist/starter-code/index.html"
  },
  {
    "content": "You’ve learned a bit of HTML and some CSS, but you have likely only used it in bits and pieces so far, adding or modifying content in exercises or pre-existing files. Here, you are going to take another step forward by building an entire page from scratch. You will also get some practice using Git.\nThere are two parts to this exercise, one focused on HTML and another focused on CSS. HTML makes up the structure and content of web pages, while CSS dictates the visual style.\nBest practices dictate that content and style should be kept as separate as possible. To that end, we will build the HTML portion of our page first, and afterwards we will add a few styles with CSS. We do this to avoid using HTML tags to change the general appearance of our page. For example, what if we want all of our main headings to be red? We can either add this style one time in the CSS file, or we must include style=\"color:red\" in EVERY h1 tag. Especially for large websites, CSS provides the best place to control the overall appearance of a page.\nGetting Started Fork and clone the Graded Assignment #4: HTML Me Something repository .\nAs always, if you need to refer back to a guide, check out Assignment 0 .\nSetup the Project Open your file tree. You should see a __tests__ directory and some JavaScript in addition to index.html and styles.css.\nYou should only edit index.html and styles.css The __tests__ directory contains the autograding tests. The remaining files are configured for the autograder. You do not need to edit these. Before you start your project make sure you run npm install to pull in the necessary packages and dependencies.\nThe instructions for this project will have you run the tests as the final step of this project.\nGetting to Work It’s time to build out your page! Dive into each of the two parts below:\nTask 1: Creating Your Content Task 2: Styling Task 3: Testing and Submitting Your Project ",
    "description": "",
    "tags": null,
    "title": "Project Introduction",
    "uri": "/assignments/html-me-something/project-intro/index.html"
  },
  {
    "content": "Getting Started Welcome to your first graded assignment. We would like you to create a short quiz console application.\nFork and clone the starter code repo .\nOpen a terminal and cd into the project file. You will see candidate-testing.js and other files if you run ls Run npm install to bring in all of the packages you need to run the application You should be ready to code your application. Good luck!\nRequirements The requirements below are what your END assignment will look like.\nAsk the candidate (user) to enter their name Use a loop to ask five questions, one at a time, to the candidate Collect the candidate’s answers Check those answers for accuracy (case insensitive equality check) Calculate the candidate’s overall percentage Determine if the candidate did well enough to enter our program (need \u003e= 80% to pass) Display the results. This assignment is broken down so you can complete small pieces as you go. You need to move sequentially starting at Task 1. Please read the WHOLE assignment page before starting.\nTake It Step by Step When starting any project, it’s best to approach it as a series of smaller, testable tasks. The goal is to get simple tasks working first and then expand the code in a systematic way. The following is NOT the only way to complete this assignment, but it provides a framework for thinking through the project.\nTo help you with this large assignment, we have broken it into 3 tasks.\nTask 1: Minimum Viable Quiz\nYou will create a single question quiz. This will let you see the overall project in a smaller scale.\nYou will create 1 question with 1 correct answer. You will collect 1 answer from the user. You will compare the correct answer with the user’s answer and let the user know if they got the question right. You will run the autograding tests before moving onto Task 2. You need to pass Tests 1-6.\nTask 2: Multiple Questions\nYou will increase the number of questions and answers to 5.\nYou will need to update your single question quiz to a 5 question quiz. This will also mean, you will also have 5 correct answers and you will collect 5 user answers.\nYou will run the autograding tests before moving onto Task 3. You need to pass Tests 7-10.\nTask 3: Grade the Quiz\nIn this section, you will score the candidate’s quiz results and let them know if they passed or failed.\nYou will run the autograding tests before moving onto Task 3. You need to pass Tests 11-17 for this section. You should pass all 17 tests to complete the assignment.\nExample Output Once all three tasks have been completed, the results output should include the candidate’s name, the candidate’s responses, the correct answers, the final percentage, and if the candidate passed the quiz.\nCandidate Name: Can Twin 1) Who was the first American woman in space? Your Answer: sally ride Correct Answer: Sally Ride 2) True or false: 5000 meters = 5 kilometers. Your Answer: false Correct Answer: true 3) (5 + 3)/2 * 10 = ? Your Answer: 45 Correct Answer: 40 4) Given the array [8, \"Orbit\", \"Trajectory\", 45], what entry is at index 2? Your Answer: trajectory Correct Answer: Trajectory 5) What is the minimum crew size for the ISS? Your Answer: 10 Correct Answer: 3 \u003e\u003e\u003e Overall Grade: 40% (2 of 5 responses correct) \u003c\u003c\u003c \u003e\u003e\u003e Status: FAILED \u003c\u003c\u003c Note The output will vary slightly based on the candidate’s answers to each question.\nLet’s get started on Task 1 ",
    "description": "",
    "tags": null,
    "title": "Project Introduction",
    "uri": "/assignments/candidate-testing/intro/index.html"
  },
  {
    "content": "We use unit tests in your graded assignments to provide feedback on your progress. We will refer to them as auto-graded or auto-grading tests in these projects. Use the tests to check your work as you complete the assignment. The goal is to pass all tests.\nThere are 2 ways to work with auto-grading tests:\nUsing GitHub Actions in GitHub Inside your terminal Using GitHub Actions Your Graded Assignment is not complete until you receive a green check mark from GitHub Actions.\nUsing GitHub Actions Fork and clone the repository.\nSelect the Actions Button. Enable workflows by clicking on the green button. You will not have any workflows at this time. They will trigger when you push up from any branch locally.\nWork on your assignment.\nWhen you receive a green check mark, inform your TA and review your code together.\nWorking with GitHub Actions As you work on your assignment, you may push up your branch at any time. This will trigger the actions to run. You do not have to wait for a complete solution before you push up. GitHub Actions will run regardless of how far through the project you are.\nWorkflows The auto-grading tests are contained in a workflow. This runs when the action is triggered. If you are on the Actions page, you’ll see the following:\nThe commit message for the last commit pushed up. The number of workflows running. The status of the workflow, in this case, it’s yellow for pending. The selection of workflows. You can select All or the one named autograding. In this repo, all unit tests were combined in a single workflow, autograding. The branch that is being tested. For these tests, we have set the actions to run whenever any branch pushes up to the repo. You can check any of your branches before you merge them into the main branch. A progress check. In forms you when the last test was run and how long it took to either pass or fail. (Failures are usually faster than passes) Passing Workflows If you pass your workflows, you will see a green circle with a checkmark inside. You can pass on any branch you push. Make sure your main branch passes once your project is complete.\nYou will also see a checkmark on the main repo page if you passed all of the tests in the workflows.\nFailing Workflows If you failed the workflow, you will see a red circle with an x inside.\nClick on the commit message, “added Banner - completed task 1” in this example, to explore the cause of failure.\nClick on the build button to see the more detailed report. This can identify exactly which test(s) failed. You may have to scroll through this file to find out what is not passing. You will also see a red x on the repo page if you have not passed any part of the workflow: Keep coding until you pass all of the tests.\nUsing the Terminal Testing in the terminal will vary by project. Instructions are included in each Graded Assignments for running tests in the terminal.\nMost Graded Assignments will use the command npm test to run the tests locally. If any other instructions are needed, they will be found in the actual assignment section.\n",
    "description": "",
    "tags": null,
    "title": "Autograding Your Tests",
    "uri": "/assignments/github-actions/index.html"
  },
  {
    "content": "Arrays are similar to strings, but are a more general collection type. Like strings, arrays are a sequence of values that can be accessed via an ordered index. Unlike strings, arrays can store data of any type.\nThe figure below demonstrates an array of named languages. The array contains four strings, each of those values has an index position.\nDeclaring an Array Programmers use multiple ways to declare a new array. The simplest way is to use array literal notation []. Anything enclosed in the square brackets will be items in the array. Each item should be followed by a comma ,. If there are no items inside the brackets, then the array is considered empty.\nlet emptyArray = []; let programmingLanguages = [\"JavaScript\", \"Python\", \"Java\", \"C#\"]; Array items can also be declared on multiple lines.\nlet javaScriptFrameworks = [ \"React\", \"Angular\", \"Ember\", \"Vue\" ]; Array Length To check the length of an array, use the length property, just like with strings. JavaScript array length is NOT fixed, meaning you can add or remove items dynamically.\nNote In other languages, such as Java and C#, arrays are of a static length requiring the length of the array to be declared upon creation.\nExample Print out the length of two arrays.\nlet emptyArray = []; console.log(emptyArray.length); let programmingLanguages = [\"JavaScript\", \"Python\", \"Java\", \"C#\"]; console.log(programmingLanguages.length); Console Output\n0 4 Varying Data Types JavaScript arrays can hold a mixture of values of any type. For example, you can have an array that contains strings, numbers, and booleans.\nlet grabBag = [\"A string value\", true, 99, 105.5]; Note It’s rare that you would store data of multiple types in the same array, because grouped data is usually the same type. In other languages, such as Java and C#, all items in an array have to be of the same type.\nCheck Your Understanding Question What is the length of the two arrays?\nHint: look closely at the quotes in the classes array.\nlet classes = [\"science, computer, art\"]; let teachers = [\"Jones\", \"Willoughby\", \"Rhodes\"]; How can you change the classes array declaration to have the same number of items as the teachers array?\n",
    "description": "",
    "tags": null,
    "title": "Arrays Are Like Strings",
    "uri": "/arrays/reading/arrays-like-strings/index.html"
  },
  {
    "content": "Assignment Overview Task 1: Project Introduction Task 2: Hello, World! Task 3: Test and Commit ",
    "description": "",
    "tags": null,
    "title": "Assignment 0: Hello, World!",
    "uri": "/assignments/hello-world/index.html"
  },
  {
    "content": "One of the core features of any programming language is the ability to conditionally execute a segment of code. This means that a program will run a segment of code only if a given condition is met.\nExample Consider a banking application that can remind you when a bill is due. The application will notify you that a bill is due soon, but only if the bill has not already been paid.\nThe condition for the above example is: Send a notification of an upcoming bill only if the statement “the bill is unpaid” is true. In order to state something like this in JavaScript, we need to understand how programming languages represent true and false.\nBoolean Values The JavaScript data type for storing true and false values is boolean, named after the British mathematician George Boole.\nNote George Boole created Boolean Algebra , which is the basis of all modern computer arithmetic.\nThere are only two boolean values—true and false. JavaScript is case-sensitive, so True and False are not valid boolean values.\nExample console.log(true); console.log(typeof true); console.log(typeof false); Console Output\ntrue boolean boolean The values true and false are not strings. If you use quotes to surround booleans (\"true\" and \"false\"), those values become strings.\nExample console.log(typeof true); console.log(typeof \"true\"); Console Output\nboolean string Boolean Conversion As with the number and string data types, the boolean type also has a conversion function, Boolean. It works similarly to the Number and String functions, attempting to convert a non-boolean value to a boolean.\nTry it Explore how Boolean converts various non-boolean values.\nconsole.log(Boolean(\"true\")); console.log(Boolean(\"TRUE\")); console.log(Boolean(0)); console.log(Boolean(1)); console.log(Boolean('')); console.log(Boolean('LaunchCode')); Boolean Expressions A boolean expression is an expression that evaluates to either true or false. The equality operator, ==, compares two values and returns true or false depending on whether the values are equal.\nExample console.log(5 == 5); console.log(5 == 6); Console Output\ntrue false In the first statement, the two operands are equal, so the expression evaluates to true. In the second statement, 5 is not equal to 6, so we get false.\nWe can also use == to see that true and \"true\" are not equal.\nExample console.log(true == \"true\"); Console Output\nfalse Comparison Operators The == operator is one of six common comparison operators.\nComparison Operators Examples Operator Description Examples Returning true Examples Returning false Equal (==) Returns true if the two operands are equal, and false otherwise. 7 == 7 \"dog\" == \"dog\" 7 == 5 \"dog\" == \"cat\" Not equal (!=) Returns true if the two operands are not equal, and false otherwise. 7 != 5 \"dog\" != \"cat\" 7 != 7 \"dog\" != \"dog\" Greater than (\u003e) Returns true if the left-hand operand is greater than the right-hand operand, and false otherwise. 7 \u003e 5 and 'b' \u003e 'a' 5 \u003e 7 and 'a' \u003e 'b' Less than (\u003c) Returns true if the left-hand operand is less than the right-hand operand, and false otherwise. 5 \u003c 7 and 'a' \u003c 'b' 7 \u003c 5 and 'b' \u003c 'a' Greater than or equal (\u003e=) Returns true if the left-hand operand is greater than or equal to the right-hand operand, and false otherwise. 7 \u003e= 5, 7 \u003e= 7, 'b' \u003e= 'a', and 'b' \u003e= 'b' 5 \u003e= 7 'a' \u003e= 'b' Less than or equal (\u003c=) Returns true if the left-hand operand is less than or equal to the right-hand operand, and false otherwise. 5 \u003c= 7, 5 \u003c= 5, 'a' \u003c= 'b', and 'a' \u003c= 'a' 7 \u003c= 5 and 'b' \u003c= 'a' Although these operations are probably familiar, the JavaScript symbols are different from the mathematical symbols. A common error is to use a single equal sign (=) instead of a double equal sign (==). Remember that = is an assignment operator and == is a comparison operator. Also note that =\u003c and =\u003e are not recognized operators.\nAn equality test is symmetric, meaning that we can swap the places of the operands and the result is the same. For a variable a, if a == 7 is true then 7 == a is also true. However, an assignment statement is not symmetric: a = 7 is legal while 7 = a is not.\nWarning If you explore the equality operator in more depth, you will find some surprises. For example, the following comparisons return true:\n7 == \"7\" 0 == false 0 == '' We will explore the nuances of == in the upcoming section equality , and introduce two new operators, === and !==, that will align more closely with our intuitive notion of equality.\nCheck Your Understanding Question Under which conditions does Boolean convert a string to true?\nOnly when the string is \"true\". Whenever the string contains any non-whitespace character. Whenever the string is non-empty. Never. It converts all strings to false. Question Which of the following is a Boolean expression? Select all that apply.\na. 3 == 4 b. 3 + 4 c. 3 + 4 === 7 d. \"false\"\n",
    "description": "",
    "tags": null,
    "title": "Booleans",
    "uri": "/decisions-with-conditionals/reading/booleans/index.html"
  },
  {
    "content": "Now that we know what an API is, let’s use one to update a web page. Let’s use a weather API to add weather data to a web page. The URL for this special LaunchCode weather API is https://handlers.education.launchcode.org/static/weather.json .\nExample JSON returned from our weather API.\n{ \"temp\": 67, \"windSpeed\": 5, \"tempMin\": 50, \"tempMax\": 71, \"status\": \"Sunny\", \"chanceOfPrecipitation\": 20, \"zipcode\": 63108 } We can see that this API returns useful information like temp and windSpeed. Our goal is to add that data to a Launch Status web page. Note, this API is for instruction purposes and does not contain real time data.\nExample Launch Status web page, which we will add weather data to.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eLaunch Status\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eLaunch Status\u003c/h1\u003e \u003ch3\u003eWeather Conditions\u003c/h3\u003e \u003cdiv id=\"weather-conditions\"\u003e \u003c!-- TODO: dynamically add html about weather using data from API --\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e fetch Function To request the weather data, we will use the fetch function. fetch is a global function that requests, or fetches, resources such as data from an API.\nTake note of two necessary aspects of the fetch function:\nThe URL of where the data is located. For this example, it will be \"https://handlers.education.launchcode.org/static/weather.json\" A response handler function to utilize the data that is being fetched. For this example, it will be function(response){...}; Example Notice a string URL is passed to fetch. Also notice the anonymous request handler function that has a response parameter. The .then method will be explained soon.\nfetch(\"https://handlers.education.launchcode.org/static/weather.json\").then(function(response) { console.log(response); } ); In this example, we are requesting data from https://handlers.education.launchcode.org/static/weather.json and our response handler (the anonymous function) simply logs the response to the console.\nfetch Example Now let’s add fetch in the Launch Status web page. the following code can be located within the javascript-projects/fetch/chapter-examples directory. The file is called fetch-weather-part-1.html\nExample A \u003cscript\u003e tag has been added that includes:\nA load event handler on line 6. A fetch and response handler function on line 7. A console.log(response); on line 8 that prints out the response object. \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eLaunch Status\u003c/title\u003e \u003cscript\u003e window.addEventListener(\"load\", function() { fetch(\"https://handlers.education.launchcode.org/static/weather.json\").then(function(response) { console.log(response); } ); }); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eLaunch Status\u003c/h1\u003e \u003ch3\u003eWeather Conditions\u003c/h3\u003e \u003cdiv id=\"weather-conditions\"\u003e \u003c!-- TODO: dynamically add html about weather using data from API --\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e Let’s break down how fetch works:\nA URL is passed to fetch as a parameter. This causes an HTTP GET request to be sent from the browser to the API. The API processes the request and sends back a response, which contains data. Once the browser receives the response, the .then() statement executes. The anonymous response handler function called by .then(function(response) runs, and this function deals with the data sent back from the API. Based on the code in the handler function, the web page gets updated using DOM methods. Note In this section, fetch is used to make GET requests. fetch can also be used to make other types of HTTP requests such as POST and PUT.\nView the GET Request We can see evidence of the GET request by following these steps:\nOpen the javascript-projects/fetch/chapter-examples/fetching-data/fetch-weather-part-1 in a browser window. Open developer tools. Open the Network tab in developer tools. In the image above, you can see the web page has been rendered on the left. In the developer tools, the GET request to the Weather API has been highlighted along with the response from that request. The response shows the JSON data that was received. In the console output, you can see the Response object has been logged. We will use that object next.\nResponse Object The response to the GET request is contained in a Response object, which is an instance of the Response class . The class contains methods that allow us to access the status of an API request and the data returned in the response.\nExample On line 8, the json() method is used to gain access to the JSON data contained in the response object.\nLine 9 logs the JSON to the console. We’ll discuss .then() later.\n\u003chtml\u003e \u003chead\u003e \u003ctitle\u003eLaunch Status\u003c/title\u003e \u003cscript\u003e window.addEventListener(\"load\", function() { fetch(\"https://handlers.education.launchcode.org/static/weather.json\").then( function(response) { // Access the JSON in the response response.json().then( function(json) { console.log(json); }); }); }); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eLaunch Status\u003c/h1\u003e \u003ch3\u003eWeather Conditions\u003c/h3\u003e \u003cdiv id=\"weather-conditions\"\u003e \u003c!-- TODO: dynamically add html about weather using data from API --\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e Console Output\nObject { temp: 67, windSpeed: 5, tempMin: 50, tempMax: 71, status: \"Sunny\", chanceOfPrecipitation: 20, zipcode: 63108 } Use the DOM and JSON Data to Update the Page Now that we have JSON weather data, we can add HTML elements to the page to display that data.\nThe following example uses the javascript-projects/fetch/chapter-examples/fetching-data/fetch-weather-part-3.html file.\nExample On line 8, the div object is defined and linked to the HTML element with the id weather-conditions. On line 10, the innerHTML property of the div object is set to be the HTML elements in lines 11 - 16. \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eLaunch Status\u003c/title\u003e \u003cscript\u003e window.addEventListener(\"load\", function() { fetch(\"https://handlers.education.launchcode.org/static/weather.json\").then( function(response) { response.json().then( function(json) { const div = document.getElementById(\"weather-conditions\"); // Add HTML that includes the JSON data div.innerHTML = ` \u003cul\u003e \u003cli\u003eTemp ${json.temp}\u003c/li\u003e \u003cli\u003eWind Speed ${json.windSpeed}\u003c/li\u003e \u003cli\u003eStatus ${json.status}\u003c/li\u003e \u003cli\u003eChance of Precip ${json.chanceOfPrecipitation}\u003c/li\u003e \u003c/ul\u003e `; }); }); }); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eLaunch Status\u003c/h1\u003e \u003ch3\u003eWeather Conditions\u003c/h3\u003e \u003cdiv id=\"weather-conditions\"\u003e \u003c!-- Weather data is added here dynamically. --\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e Let’s take a look at the expected sequence of events:\nIn line 6, the fetch command sends a request to the URL. When the API returns a response, the then method calls the anonymous handler function and passes in the response object (also line 6). On line 7, the handler function tries to retrieve the JSON data from the response object. When this is successful, the anonymous function(json) gets called. On line 8, the div object is defined and linked to the HTML element with the id weather-conditions. On line 10, the innerHTML property of the div object is set to be the HTML elements in lines 11 - 16. The HTML in lines 11 - 16 gets filled in using weather data stored in the json object. The two anonymous functions end, and the HTML defined in lines 11 - 16 gets added to the div element on line 26. Opening the developer tools on the web page shows the added HTML:\nNote fetch was chosen as the tool to request data because it’s supported in modern browsers by default and is simple to use. When viewing resources other than this book, you will see various other ways to request data in a web page with JavaScript. Other ways include, but are not limited to, jQuery.get, jQuery.ajax, and XMLHttpRequest.\nCheck Your Understanding Question What is the correct syntax for fetch?\nfetch(\"GET\", \"https://api.url\").then(...); fetch(\"https://api.url\").doStuff(...); fetch(\"https://api.url\").then(...); ",
    "description": "",
    "tags": null,
    "title": "Fetching Data",
    "uri": "/fetch/reading/fetching-data/index.html"
  },
  {
    "content": "As a user of the web, you know that web pages both display and accept data. In this chapter we are going to learn more about how web pages handle data input using HTML forms. An HTML form is used to accept input from the user and send that data to the server.\nCreate a Form To declare a form in HTML use the \u003cform\u003e tag with open and closing tags. This form element will serve as container for various types of other elements that are designed to capture input from the user.\n\u003chtml\u003e \u003chead\u003e \u003ctitle\u003eForm Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- empty form --\u003e \u003cform\u003e\u003c/form\u003e \u003c/body\u003e \u003c/html\u003e An empty \u003cform\u003e\u003c/form\u003e will not appear on a web page until inputs have been added inside of it. Below we have added one basic \u003cinput\u003e tag.\n\u003chtml\u003e \u003chead\u003e \u003ctitle\u003eForm Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform\u003e \u003cinput type=\"text\"/\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e Input Element The input element is used to add interactive fields, which allow the user to enter data. input elements have two very important attributes: name and type.\nThe name attribute is used to identify the input’s value when the data is submitted The type attribute defines which type of value of the input represents \u003cinput type=\"text\" name=\"username\"/\u003e Note Notice that \u003cinput type=\"text\"/\u003e tags are self closing. Self-closing tags are single tags with /\u003e at the end.\nWarning Values are NOT submitted for an \u003cinput\u003e unless it has a name attribute.\nLabels Forms normally contain more than one input. \u003clabel\u003e tags are used to provide a textual label, which informs the user of the purpose of the field. The simplest usage of \u003clabel\u003e tags is to wrap them around \u003cinput\u003e tags.\n\u003chtml\u003e \u003chead\u003e \u003ctitle\u003eForm Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"/\u003e\u003c/label\u003e \u003clabel\u003eTeam Name \u003cinput type=\"text\" name=\"team\"/\u003e\u003c/label\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e A second way to relate a \u003clabel\u003e tag to an \u003cinput\u003e is to use the id attribute of input and the for attribute of label. The two are related by setting for in \u003clabel for=\"username\"\u003e equal to the id of \u003cinput id=\"username\"\u003e, these two attributes must be EQUAL. When for is used, the \u003cinput\u003e does NOT have to be inside of the \u003clabel\u003e.\n\u003clabel for=\"username\"\u003eUsername\u003c/label\u003e \u003cinput id=\"username\" name=\"username\" type=\"text\"/\u003e What happens when a \u003clabel\u003e is clicked? The answer depends on what the \u003clabel\u003e is associated to.\nFor text inputs, when the label is clicked, then the input gains focus. An element with focus is currently selected by the browser and ready to receive input.\nExample Try clicking on the Username and Team Name labels below. What happens?\n\u003cform\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"/\u003e\u003c/label\u003e \u003clabel\u003eTeam Name \u003cinput type=\"text\" name=\"team\"/\u003e\u003c/label\u003e \u003c/form\u003e Username Team Name For non-text inputs, when the label is clicked, a value is selected. This behavior can be seen with radio and checkbox elements which we will learn more about soon.\nExample Click on the label text to the associated checkbox input element to gain focus.\n\u003cform\u003e \u003clabel\u003eSubscribe to Newsletter \u003cinput type=\"checkbox\" name=\"newsletter\"/\u003e \u003c/label\u003e \u003c/form\u003e Subscribe to Newsletter Value Attribute The value attribute of an \u003cinput\u003e tag can be used to set the default value. If the value attribute is declared, then the browser will show that value in the input. The user can choose to update the value by typing in the input box.\nExample Input with default value of JavaScript.\n\u003cform\u003e \u003clabel\u003eLanguage \u003cinput name=\"language\" type=\"text\" value=\"JavaScript\"/\u003e\u003c/label\u003e \u003c/form\u003e Language Check Your Understanding Question What is the purpose of the name attribute for input elements?\nQuestion Which input attribute sets the default value?\n",
    "description": "",
    "tags": null,
    "title": "Forms",
    "uri": "/user-input-with-forms/reading/forms/index.html"
  },
  {
    "content": "Functions are powerful tools in any programming language, and JavaScript uses these tools in some flexible and creative ways. This chapter introduces a bit more of the power of functions.\nFunctions Are Objects We defined a value as “a specific piece of data.” Some examples are the number 42, the string \"LC101\", and the array [\"MO\", \"FL\", \"DC\"]. *Functions appear to be very different from other keywords we have worked with, they share many core characteristics.\nIn particular, functions have a data type, similar to other javascript objects. Recall that a data type is a group of values that share characteristics, such as strings and numbers. Strings share the characteristics of having a length, while numbers don’t. Numbers can be manipulated in ways that strings cannot, via operations like division and subtraction.\nExample The data type of the type conversion function Number is function. In fact, all functions are of type function.\nconsole.log(typeof 42); console.log(typeof \"LC101\"); console.log(typeof Number); Console Output\nnumber string function Like other data types, functions may be assigned to variables. If we create a function named hello, we can assign it to a variable with this syntax:\nfunction hello() { // function body } let helloFunc = hello; When a variable refers to a function, we can use the variable name to call the function:\nhelloFunc(); The variable helloFunc can be thought of as an alias for the function hello. When we call the function helloFunc, JavaScript sees that it refers to the function hello and calls that specific function.\nWhen we use a variable name, we are really using its value. If the variable course is assigned the value \"LC101\", then console.log(course) prints \"LC101\". When a variable holds a function, it behaves the same way as when it holds a number or a string. The variable refers to the function.\nAgain, functions can be used in different ways. For example:\nFunctions may be assigned to variables. Functions may be used in expressions, such as comparisons. Functions may be printed using console.log. Functions may be passed as arguments to other functions. Functions may be returned from other functions. Some of these function behaviors do not prove to be useful. However, other behaviors, like passing functions as arguments and assigning them to variables, turn out to be extremely useful.\n",
    "description": "",
    "tags": null,
    "title": "Functions as Objects",
    "uri": "/more-on-functions/reading/functions-as-values/index.html"
  },
  {
    "content": "Errors are a part of coding. Occasionally, we make mistakes as programmers. However, we are always trying to fix those mistakes by reading different resources, examining a list of error messages (also called the stacktrace), or asking for help.\nEarlier in this course, we learned about two different types of errors: runtime and logic. A logic error is when your program executes without breaking, but doesn’t behave the way you thought it would. These logic errors usually require you to consider how you are going about solving the issue to resolve. Runtime errors are when your program does not run correctly, and an exception is raised.\nAn exception is a runtime error in which a name and message are displayed to provide more information about the error.\nExceptions and Errors In JavaScript a runtime error and an exception are the same thing and can be used interchangeably. This can cause confusion because a logic error is not an exception!\nError Object When a runtime error, also known as an exception, is raised JavaScript returns an Error object. An Error Object has two properties: a name and a message. The name refers to the type of error that occurred, while the message gives the user information on why that exception occurred.\nJavaScript has built-in exceptions with pre-defined names and messages, however, JavaScript also gives you the ability to create your own error messages.\nYou have undoubtedly experienced various Exceptions already throughout this class. Let’s look at a few common Exceptions.\nCommon Exceptions JavaScript has some built-in Exceptions you may have already encountered in this class.\nOne of the most common errors in JavaScript is a SyntaxError which is thrown when we include a symbol JavaScript is not expecting.\nExample console.log(\"This is\" an example); Console Output\nSyntaxError: missing ) after argument list We put our second quotation mark in the incorrect place. JavaScript does not know what to do with the second half of our phrase and throws a SyntaxError with the message: missing ) after argument list.\nA ReferenceError is thrown when we try to use a variable that has not yet been defined.\nExample console.log(x[0]); Console Output\nReferenceError: x is not defined We attempt to print out the first element in the variable x, but we never declared x. JavaScript throws a ReferenceError with the message: x is not defined.\nA TypeError is thrown when JavaScript expects something to be one type, but the provided value is a different type.\nExample const a = \"Launch\"; a = \"Code\"; Console Output\nTypeError: invalid assignment to const 'a' In this case, we declare a constant as the string “Launch”, and then try to change the immutable variable to “Code”. JavaScript throws a TypeError with the message: invalid assignment to const 'a'.\nExceptions give us a way to provide more information on how something went wrong. JavaScript’s built-in Exceptions are regularly used in the debugging process.\nThere are more built-in Exceptions in JavaScript, you can read more by referencing the MDN Errors Documentation or W3Schools JavaScript Error (scroll down to the Error Object section).\nIn the next section we will learn how to raise our own exceptions using the throw statement.\nCheck Your Understanding Question What is the difference between a runtime error, and a logic error?\nQuestion What are some of the common errors included in JavaScript?\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/exceptions/reading/introduction/index.html"
  },
  {
    "content": "You have been using functions throughout your learning so far, without receiving a full explanation of how functions work. This chapter focuses explicitly on the details of how functions work, how they can be used, and how you can create functions of your own.\nA function is a reusable, callable piece of code. Like variables, functions often have names (though the next chapter shows us that we can create functions without names).\nYou have already become familiar with several functions:\nconsole.log The type conversion functions: Number, String, and Boolean String and array methods, such as indexOf Note When learning about strings and arrays, we noted that a method is a function that “belongs to” an object. This distinction is important to keep in mind, and will be explored in depth in a later chapter. For now, think of a method as a special type of function.\nEach of the functions we have used works in the same way. By typing the function’s name, followed by parentheses, we can call the function, resulting in an action being carried out. Sometimes, as with console.log, we can provide input data between the parentheses, which the function will use to carry out its action.\nExample The function console.log prints the provided value or values (the input data).\nconsole.log(\"Hello, World!\"); Console Output\nHello, World! This is an example of a function receiving input. Functions may also provide output. For example, the type conversion functions give back the result of converting a value.\nExample Type conversion functions return a value, that can be used by the calling code. Often, we store the return value of a function in a variable.\nlet num = Number(\"42\"); console.log(\"The variable num is of type\", typeof num, \"and has value\", num); Console Output\nThe variable num is of type number and has value 42 Example Many array and string methods also return values. This program uses the string method split to break a string into separate components.\nlet commaSeparatedValues = \"Smith,Jane,100 Cherry Blossom Lane\"; let values = commaSeparatedValues.split(','); console.log(values); Console Output\n[ 'Smith', 'Jane', '100 Cherry Blossom Lane' ] Functions are extremely powerful. They allow us to repeat actions without repeating each individual step of code that the actions are built from. By grouping actions together, functions allow us to be removed from the details of what they are actually doing.\nWhen we want to print a message to the console using console.log, we don’t have to know what the console is, or how a string can be displayed on it. The behavior is wrapped up within the function itself. This is an example of a broader programming concept known as encapsulation. Encapsulation is the process of packaging up code in a reusable way, without the programmer needing to be concerned with how it works.\nA commonly-used analogy for describing the concept of a function is that of a machine that takes input, carries out an action, and gives back a result. This is known as the function machine analogy.\nfunction machine If we want to use a function, we must provide it with some input. It carries out an action on that input and returns a result. The action occurs within the function, or “inside the machine”. If we know the purpose of a function, we simply provide it with input and receive the output. The rest is up to the machine itself.\nNote You may notice that a function like console.log doesn’t seem to return anything. We will soon learn that every function returns a value, regardless of whether or not that value is used, or is even useful.\nThe programming concept of a function is very similar to the concept of a mathematical function. For example, in high school algebra you learned about functions like y = 4x + 7. These functions used a mathematical input (x) and carried out a procedure to return a numerical result (y).\nExample Consider the following mathematical function:\nf(x) = x² + 4x - 2 We can call the function by giving it a specific input:\nf(3) = 3² + 4*3 - 2 = 9 + 12 - 2 = 19 The number 19 is the output.\nFunctions also allow us to keep our code DRY, a concept that you learned about when we introduced loops . If we want to do the same basic task 17 times across a program, we can reduce code repetition by writing one function and calling it 17 times.\nCheck Your Understanding Question In your own words, explain what a function is.\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/functions/reading/introduction/index.html"
  },
  {
    "content": "In the functions chapter , we saw that where variables are declared and initialized in the code affects when they can be used. This idea is called scope, and it describes the ability of a program to access or modify a variable.\nExample let a = 0; function coolFunction() { let b = 2; return a + b; } a is accessible inside and outside of coolFunction().\nb is only accessible inside of coolFunction().\nLet’s add some console.log statements to explore this code snippet.\nExample let a = 0; console.log(a); function coolFunction() { let b = 2; console.log(`a = ${a}, b = ${b}.`); return a + b; } a += 1; console.log(a); coolFunction(); console.log(b); Console Output\n0 1 a = 1, b = 2. ReferenceError: b is not defined Lines 2 and 11 print the initial and incremented values of a. Line 13 calls coolFunction(), and line 6 prints the values of a and b. This shows that both variables are accessible within the function. Line 14 throws a ReferenceError, showing that b is not accessible outside of coolFunction. Block/Local Scope Local scope refers to variables declared and initialized inside a function or block. A locally scoped variable can only be referenced inside of the block or function where it is defined. In the example above, b has a local scope limited to coolFunction(). Referencing or attempting to update b outside of the function leads to a scoping error.\nTry it! The following code block has an error related to scope. Try to fix it!\nfunction myFunction() { let i = 10; return 10 + i; } console.log(i); Global Scope Global scope refers to variables declared and initialized outside of a function and in the main body of the file. These variables are accessible to any function within a file. In the first example above, a has global scope.\nGlobal scope is the default in JavaScript. If you assign a value to a variable WITHOUT first declaring it with let or const, then the variable automatically becomes global.\nExample // Code here CAN use newVariable. function coolFunction() { newVariable = 5; return newVariable; } // Code here CAN use newVariable. Warning In the loop for (i = 0; i \u003c string.length; i++), leaving off the let from i = 0 means that i is treated as a global variable. ANY other portion of the program can access or modify i, which could disrupt how well the loop operates.\nExecution Context Execution context refers to the conditions under which a variable is executed—its scope. Scoping affects the variable’s behavior at runtime. When the code is run in the browser, everything is first run at a global context. As the compiler processes the code and finds a function, it shifts into the function context before returning to global execution context.\nLet’s consider this code:\nlet a = 0; function coolFunction() { let b = 2; return a + b; } function coolerFunction() { let c = 5; c += coolFunction(); return c; } console.log(coolFunction()); console.log(coolerFunction()); Now, let’s consider the execution context for each step.\nFirst, the global execution context is entered as the compiler executes the code. Once coolFunction() is hit, the compiler creates and executes coolFunction() under the coolFunction() execution context. Upon completion, the compiler returns to the global execution context. The compiler stays at the global execution context until the creation and execution of coolerFunction(). Inside of coolerFunction() is a call to coolFunction(). The compiler will go up in execution context to coolFunction() before returning down to coolerFunction()’s execution context. Upon completion of that function, the compiler returns to the global execution context. Check Your Understanding Both of the concept checks refer to the following code block:\nfunction myFunction(n) { let a = 100; return a + n; } let x = 0; x = myFunction(x); Question What scope is variable x?\nGlobal Local Question In what order will the compiler execute the code?\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/scope/reading/introduction/index.html"
  },
  {
    "content": "Taking JavaScript on the Web So far, we have created web pages with HTML and CSS. These pages have been static, meaning that the page appears the same each time it loads. However, you may find that you want to create a web page that changes after it’s been loaded. In order to create such a page, you would use JavaScript. Web pages that can change after loading in the browser are called dynamic. This is useful to programmers and users alike because they can interact with an application without refreshing the page. Having to constantly refresh the page would be a poor experience for the user and JavaScript helps programmers alleviate this burden.\nExample When you are on a social media page, you may like someone’s post. When you do like their post, you may notice that several things happen. The counter of how many likes the post has received increases by one and the like button may change color to indicate to you that you liked the post. This is an example of how JavaScript could be used to create an application that dynamically updates without the page having to be refreshed.\nWe have been running all of our JavaScript code in Node.js, but now it is time to use JavaScript in the browser to make dynamic web pages. Node.js, or just Node, is a JavaScript interpreter with access to lots of different JavaScript libraries. Each browser has its own engine for running JavaScript. JavaScript run in the browser is called client-side JavaScript. Firefox uses an engine called Spider Monkey to run client-side JavaScript. Since each browser uses its engine, each browser may handle HTML, CSS, or JavaScript differently. This can lead to discrepancies between browsers.\nWarning The website Can I Use is a great resource to check browser usability of any JavaScript, HTML or CSS.\nThe \u003cscript\u003e Tag In the HTML chapter, we learned that an HTML page is made up of elements that are written as tags. Those elements have different purposes. The script element’s purpose is to include JavaScript into the web page. A \u003cscript\u003e tag can contain JavaScript code inside of it or reference an external JavaScript file.\nJavaScript Console Using the Developer Tools, you can access a JavaScript console. There, you can mess around with fun JavaScript statements or you can use it to see the outputs of the client-side JavaScript you have written.\nInline JavaScript Example Notice the \u003cscript\u003e tag below contains JavaScript code that will be executed by the browser.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eEmbedded JavaScript Example\u003c/title\u003e \u003cscript\u003e // JavaScript code goes here! console.log(\"Hello from inside the web page!\"); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e contents \u003c/body\u003e \u003c/html\u003e Console Output\nHello from inside the web page! External JavaScript Some programmers have large amounts of JavaScript to add to an HTML document. Using an external JavaScript file can help in these cases. You can still use the \u003cscript\u003e tag to include the JavaScript file within the HTML document. In this case, you’ll need to use the src attribute for the path to the JavaScript file.\nExample This is how the HTML file for the web page might look if we wanted to link an external JavaScript file.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eExternal JavaScript Example\u003c/title\u003e \u003cscript src = \"myjs.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- content --\u003e \u003c/body\u003e \u003c/html\u003e Then the JavaScript file, myjs.js might look something like this.\n// JavaScript code goes here! console.log(\"Hello from inside the web page\"); Note You can use the \u003cscript\u003e tag to reference JavaScript files hosted on external servers. Some of these JavaScript files will be files that you have not written yourself but you will want to include in your application.\nCheck Your Understanding Question What is the difference between dynamic and static web pages?\nQuestion Does Node.js run in the browser environment?\n",
    "description": "",
    "tags": null,
    "title": "JavaScript and the Browser",
    "uri": "/dom-and-events/reading/javascript-and-browser/index.html"
  },
  {
    "content": "Reading Content Links Arrays Are Like Strings Working With Arrays Array Methods Multi-Dimensional Arrays ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/arrays/reading/index.html"
  },
  {
    "content": "Reading Content Values and Data Types Type Conversion Variables More on Variables Expressions and Evaluation Operations Other Operators Input with readline-sync ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/data-and-variables/reading/index.html"
  },
  {
    "content": "Reading Content Links Booleans Equality Logical Operators Conditionals Nested Conditionals ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/decisions-with-conditionals/reading/index.html"
  },
  {
    "content": "Reading Content JavaScript and the Browser The Dom More DOM Methods and Properties Events Event Listeners Event Types ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/dom-and-events/reading/index.html"
  },
  {
    "content": "Reading Content Introduction Throw Exceptions as Control Flow ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/exceptions/reading/index.html"
  },
  {
    "content": "Reading Content Fetching Data Asynchronous and Promises ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/fetch/reading/index.html"
  },
  {
    "content": "Reading Content Introduction Using Functions Creating Functions Function Input and Output A Good Function-Writing Process Parameters and Variables Naming Functions Composing Functions Why Create Functions? ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/functions/reading/index.html"
  },
  {
    "content": "Reading Content What are Modules Require Modules NPM Exporting Modules ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/modules/reading/index.html"
  },
  {
    "content": "Reading Content Links Functions as Objects Anonymous Functions Passing Functions as Arguments Receiving Functions as Arguments Why Use Anonymous Functions? Recursion Recursion Walkthrough: The Base Case Making a Function Call Itself Recursion Wrap-Up ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/more-on-functions/reading/index.html"
  },
  {
    "content": "Reading Content Introduction Using Scope ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/scope/reading/index.html"
  },
  {
    "content": "Reading Content Strings as Collections Bracket Notation Strings as Objects String Immutability String Methods Encoding Characters Special Characters Template Literals ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/stringing-characters-together/reading/index.html"
  },
  {
    "content": "Reading Content What is CSS? CSS Structure CSS Rules ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/styling-css/reading/index.html"
  },
  {
    "content": "Reading Content What is a terminal anyways? Filesystem and Paths How to Do Stuff in the Terminal Running Programs in the Terminal ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/terminal/reading/index.html"
  },
  {
    "content": "Reading Content Forms Form Submission POST Form Submission Text Inputs Specialized Text Inputs Checkbox Input Radio Input Select Input Validation with JavaScript ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/user-input-with-forms/reading/index.html"
  },
  {
    "content": "Throughout the first chapters of this book we have used strings to represent words or phrases we wanted to print out. Our definition of a string was simple: a string is a sequence of characters inside quotes.\nIn this chapter we explore strings in much more detail. Strings come with a special group of operations that can be carried out on them, known as methods. Strings are also what is called a collection data type. Let’s look at what this means.\nCollection Data Types Data types that are comprised of smaller pieces are called collection data types, or simply collection types. Depending on what we are doing, we may want to treat a value of a collection data type as a single entity (the whole collection), or we may want to access its parts.\nA character is a string that contains exactly one element, such as 'a', \"?\", or even \" \" (a single space character).\nNote Some programming languages, such as Java and C, represent characters using their own data type. For example, Java has the data type char. JavaScript, however, does not consider strings and characters to be different types.\nWe can think of strings as being built out of characters. In this way, strings can be broken down into smaller pieces.\nStrings are made up of smaller pieces, characters. Other data types, like number and boolean, are not composed of any smaller parts.\nOrdered Collections We defined strings as sequential collections of characters. This means that the individual characters that make up the string are assumed to be in a particular order from left to right. The string \"LaunchCode\" is different from the string \"CodeLaunch\", even though they contain the exact same characters.\nCollection types that allow their elements to be ordered are known as ordered collections, for reasons that will become clear to you very soon.\n",
    "description": "",
    "tags": null,
    "title": "Strings as Collections",
    "uri": "/stringing-characters-together/reading/strings-as-collections/index.html"
  },
  {
    "content": " Modify the provided initialPrompt() function to prompt the user to enter a word to score. Use the oldScrabbleScorer() function provided to score the word provided by the user. Print the result to the console. Before you move on, be sure you’re on the right track. At this point, your program should have an output like this:\n$ node index Let's play some Scrabble! Enter a word to score: pineapple Points for 'P': 3 Points for 'I': 1 Points for 'N': 1 Points for 'E': 1 Points for 'A': 1 Points for 'P': 3 Points for 'P': 3 Points for 'L': 1 Points for 'E': 1 ",
    "description": "",
    "tags": null,
    "title": "Task 1: Initial Prompt",
    "uri": "/assignments/scrabble-scorer/initial-prompt/index.html"
  },
  {
    "content": "This task puts your unit testing, modules making, and exception handling knowledge to use by writing tests and classes for the Mars rover named Curiosity.\nYou will create a simulation for issuing commands to Curiosity. The idea is to create a command at mission control, convert that command into a message, send it to the rover, then have the rover respond to that message.\nWe will provide descriptions of the required features you need to implement in three separate classes:\nCommand: A type of object containing a commandType property. commandType is one of the given strings in the table below. Some commandTypes are coupled with a value property, but not all. Every Command object is a single instruction to be delivered to the rover. Message: A Message object has a name and contains several Command objects. Message is responsible for bundling the commands from mission control and delivering them to the rover. Rover: An object representing the mars rover. This class contains information on the rover’s position, operating mode, and generatorWatts. It also contains a function, receiveMessage that handles the various types of commands it receives and updates the rover’s properties. In true TDD form, you will be asked to first write the appropriate unit tests for these features, then write the code in the given class to pass those tests.\nSections: Starter Code Command Class Message Class Rover Class Submitting Your Work Get the Starter Code Fork and Clone the following repository: Assignment #3: Mars Rover How-To TDD Recall that in TDD, you write the test for a given behavior before you code the actual function. Feel free to review the Test/Code cycle while you work on this project.\nFocus on one test at a time. Write the test and then create the code to make it pass. Only write the minimum amount of code needed to make the test pass. There are some constraints on how you can implement these features. A description of each class is below. Each numbered item describes a test. You should use the given phrases as the test descriptions when creating your it statements. You must create 13 tests for this assignment.\nWarning Do NOT try to write all of the tests at once. Doing so will be inefficient and will cause excessive frustration.\nOnce you are ready, move on to the next section: Command Class ",
    "description": "",
    "tags": null,
    "title": "Task 1: Intro and Starter Code",
    "uri": "/assignments/mars-rover/starter-code/index.html"
  },
  {
    "content": "Your first assignment is mostly an exercise in following instructions. We’ll ask you to modify an existing program so that, when run, the program prints “Hello world!”.\nWarning In order to complete this assignment there are a few things that you will need to have already completed! You can find these items below:\nInstalled Git Installed Visual Studio Code Installed Node Programming jobs often require you to get familiar with, or at least make use of, additional technologies. Here, you’ll be Github to write your code, run it, save it, and submit your assignment.\nSo while the coding task may appear straightforward, you’ll be introduced to a set of instructions, or workflow, that is important for the rest of your success in this class.\nRequirements Sign up for a GitHub account. Change the code in Visual Studio Code. Commit the code. Push the code to your assignment repository. Make sure your assignment passes the test. GitHub If you haven’t done so already, create a GitHub account .\nNote You can also learn more about Git and GitHub by viewing the following resource page Assignment Invitation Tip Before starting on any assignment, make sure you are signed into your GitHub account!\nFirst, find Assignment #0 in Canvas and click on the starter code repo link. Fork the repository to your personal profile, copy the repo’s URL for cloning, and clone the project to a directory on your machine.\nAfter you have cloned the directory to your machine, open up the project within Visual Studio Code and move on to the next section!\n",
    "description": "",
    "tags": null,
    "title": "Task 1: Project Introduction",
    "uri": "/assignments/hello-world/project-intro/index.html"
  },
  {
    "content": "Programs may be thought of as being made up of two things:\nData Operations that manipulate data This chapter focuses primarily on the first of these two fundamental components, data.\nData can be stored in a program in a variety of ways. The most basic unit of data is a value.\nA value is a specific piece of data, such as a word or a number. Some examples are 5, 5.2, and \"Hello, World!\".\nEach value belongs to a category called a data type. We will see many different data types throughout the course, the first two of which are the number and string types. Numeric values such as 4 and 3.3 are numbers. Sequences of characters enclosed in quotes, such as \"Hello, World!\", are strings, so-called because they contain a string of letters. Strings must be enclosed in either single or double quotes.\nIf you are not sure what data type a value falls into, precede the value with typeof.\nExample console.log(typeof \"Hello, World!\"); console.log(typeof 17); console.log(typeof 3.14); Console Output\nstring number number Not surprisingly, JavaScript reports that the data type of \"Hello, World!\" is string, while the data type of both 17 and 3.14 is number. Note that some JavaScript environments may print type names and strings with single quotes around them, as in 'string' 'number', and 'hello'.\nNote Notice that console.log(typeof \"Hello, World!\"); prints out string to the console. The typeof keyword is not printed to the console because the statement typeof \"Hello, World!\" is an expression. Briefly, expressions are code segments that are reduced to a value. We will learn more about expressions soon.\nWe say that an expression returns a value. That is, typeof \"Hello, World!\" returns the value string.\nNote typeof is a JavaScript entity known as an operator. It is similar to a function in that it carries out some kind of action, though the syntax is different from that of functions (notice using typeof does not require parentheses).\nWe will more about operators in upcoming sections.\nThere are data types other than string and number, including object and function, which we will learn about in future chapters.\nMore On Strings What about values like \"17\" and \"3.2\"? They look like numbers, but they are in quotation marks like strings.\nRun the following code to find out.\nTry it! console.log(typeof \"17\"); console.log(typeof \"3.2\"); Question What is the data type of the values \"17\" and \"3.2\"?\nStrings in JavaScript can be enclosed in either single quotes (') or double quotes (\").\nExample console.log(typeof 'This is a string'); console.log(typeof \"And so is this\"); Console Output\nstring string Double-quoted strings can contain single quotes inside them, as in \"Bruce's beard\", and single quoted strings can have double quotes inside them, as in 'The knights who say \"Ni!\"'.\nJavaScript doesn’t care whether you use single or double quotes to surround your strings. Once it has parsed the text of your program or command, the way it stores the value is identical in all cases, and the surrounding quotes are not part of the value.\nWarning If a string contains a single quote (such as \"Bruce's beard\") then surrounding it with single quotes gives unexpected results.\nWhat happens if you run the following piece of code?\nconsole.log(\"Bruce's beard\"); More On Numbers When you type a large integer value, you might be tempted to use commas between groups of three digits, as in 42,000. This is not a legal integer in JavaScript, but it does mean something else, which is legal:\nExample console.log(42000); console.log(42,000); Console Output\n42000 42 0 Well, that’s not what we expected at all! Because of the comma, JavaScript chose to treat 42,000 as a pair of values. In fact, the console.log function can print any number of values as long as you separate them by commas. Notice that the values are separated by spaces when they are displayed.\nExample console.log(42, 17, 56, 34, 11, 4.35, 32); console.log(3.4, \"hello\", 45); Console Output\n42 17 56 34 11 4.35 32 3.4 hello 45 Remember not to put commas or spaces in your integers, no matter how big they are. Also revisit what we said in the chapter How Programs Work formal languages are strict, the notation is concise, and even the smallest change might mean something quite different from what you intend.\nType Systems Every programming language has a type system, which is the set of rules that determine how the languages deals with data of different types. In particular, how values are divided up into different data types is one characteristic of a type system.\nIn many programming languages, integers and floats are considered to be different data types. For example, in Python 42 is of the int data type, while 42.0 is of the float data type.\nNote While JavaScript does not distinguish between floats and integers, at times we may wish to do so in our programs. For example, an inventory-tracking program stores items and the number of each number in stock. Since a store cannot have 3.5 shirts in stock, the programmer makes the quantity of each item integer values as opposed to floats.\nWhen discussing the differences between programming languages, the details of type systems are one of the main factors that programmers consider. There are other aspects of type systems beyond just how values are categorized. We will explore these in future lessons.\nCheck Your Understanding Question Which of these is not a data type in JavaScript?\nnumber string letter object ",
    "description": "",
    "tags": null,
    "title": "Values and Data Types",
    "uri": "/data-and-variables/reading/values-and-data-types/index.html"
  },
  {
    "content": "Just like functions should be kept small and accomplish only one thing, we want to apply the same idea for the different parts of our program. Modules allow us to keep the features of our program in separate, smaller pieces. We code these smaller chunks and then connect the modules together to create the big project.\nModules are like Legos. Each piece has its own distinct shape and function, and the same set of pieces can be combined in lots of different ways to create unique results.\nOne Possible Scenario Imagine we want to create a program that quizzes students on their JavaScript skills.\nWhat would go into this app? Features could include:\nSelecting questions from a stored array or object. Presenting the questions to the students and collecting their answers. Scoring the quizzes. Storing the results. This would be a useful app, but we could make it better by adding some other features. Instead of just quizzing students, maybe we could add some tutorial pages. Our app now provides some teaching and assessment content.\nNext, how about adding some non-graded practice to make sure the students are ready for their final quiz? Once we accomplish that, we could continue adding to our app to make it better and better.\nLet’s pause a moment to consider what happened to the size of our project. As the program evolved from the straightforward quiz app to one that included tutorials and practice tasks, the number of lines of code increased. Now imagine we replicate all of these features for two or three other programming languages.\nWe can picture our app as follows:\nImagine if the project included two or three additional programming languages!\nThe result is a mammoth program that contains thousands of lines of code. How would this impact debugging? How about keeping the code DRY? Do any of the features overlap? How easy is it to add new features?\nWhy Use Modules Modules help us keep our project organized. If we find a bug in the quiz part of our program, then we can focus our attention on the quiz module rather than the entire codebase.\nModules also save us effort in other projects - another example of the DRY concept. We have already practiced condensing repetitive tasks into loops or functions. Similarly, if we design our quiz module in a generic way, then we can use that same module in other programs.\nEven better, we can SHARE our modules with other programmers and use someone else’s work (with permission) to enhance our own. Writing the imaginary quiz/tutorial/practice app from scratch would take us many, many weeks. However, someone in the coding community might already have modules that we can immediately incorporate into our own project—saving us time and effort.\nModules keep us from reinventing the wheel.\nSome modules also provide us with useful shortcuts. readline-sync allowed us to collect input from a user, and this module contains lots of other methods besides the .question() we used in our examples. Rather than making every developer write their own code for interacting with the user through the console, readline-sync makes the process easier for all by providing a set of ready-to-use functions. We do not need to worry about HOW the module works. We just need to be able to pull it into our projects and use its functions.\n",
    "description": "",
    "tags": null,
    "title": "What are Modules",
    "uri": "/modules/reading/what-are-modules/index.html"
  },
  {
    "content": "GUIs and CLIs Most of the time when we use our computers, we do so through a graphical user interface, or GUI for short. A GUI is a system designed with icons and visual representations of the machine’s file systems.\nProgrammers often use another kind of interface, called the command line. A CLI, or command line interface, uses textual commands, rather than dragging and dropping icons, to give the computer instructions.\nThe application responsible for running a CLI is called a terminal and the program interpreting the commands is called the shell.\nNote The terms “command line”, “terminal”, and “shell” are often used interchangeably.\nWhy use the terminal? Both of the images above represent the same file structure. While the GUI may now appear more user-friendly, as you grow more familiar with the commands available, you’ll find there can be advantages to using the terminal.\nIn the terminal, you will be able to:\nquickly move throughout your computer’s file structure make new files and directories remove items from folders install software open programs run programs directly ",
    "description": "",
    "tags": null,
    "title": "What is a terminal anyways?",
    "uri": "/terminal/reading/what-is-a-terminal/index.html"
  },
  {
    "content": "Background As discussed in the previous chapter, HTML lays out the structure of a document. With HTML attributes, programmers can add some specification to tags. Yet, when programmers make pages with only HTML, the web pages look rather bland. When making a web site, the structure of the page elements is important, as is how those elements appear.\nWhile HTML creates the structure and content of the page, CSS adds the styling to make it beautiful! Cascading Styling Sheets (CSS) is a style sheet language that allows programmers to add styling to web documents. With CSS, programmers can change background and font colors, the size of different elements, and many more things.\nCSS works by applying style rules to different elements. A style rule could be: “Make this lettering purple” or “Make this font Helvetica”. CSS is a cascading style sheet language because the style rules apply based on a specific precedence, so the rules “cascade”.\nNote This book covers style rules and the order of precedence in greater detail in the third section of this chapter.\nCheck Your Understanding Question What kind of language is CSS? Check ALL that apply.\nMarkup Language Programming Language Style Sheet Language Coding Language ",
    "description": "",
    "tags": null,
    "title": "What is CSS?",
    "uri": "/styling-css/reading/what-is-css/index.html"
  },
  {
    "content": "Introduction and Background There are thousands of satellites orbiting the earth. You are tasked with updating a searchable, sortable table of satellites. For the purposes of this assignment, a satellite will be defined as any object purposefully placed into orbit.\nFor this assignment, you will create a table that shows satellites based on their orbit paths. There are three types of orbit paths for satellites: Low, Medium, High.\nYour completed assignment will have the following features:\nA banner that introduces the project and provides instructions on how to use the application. A table that renders satellite information based on the orbit path. Multiple buttons that show satellites in an orbit path. When a user clicks a button the table will render the satellites with that designated orbit path. Getting Started Fork and clone the Graded Assignment’s starter code . Open the project in Visual Studio Code.\nStarter Code Check When you first pull down the starter code, your running application will look something like this:\nNote Throughout this assignment, you may notice that the screenshots show localhost:3000 as the location of the project when your port number is something different. This is totally fine and will not interfere with how the project functions.\nCompleted Code Check When you completed you have the option to apply CSS styling or not. The end result of the assignment will look like one of the following:\nWith Styling Applied Without Styling Applied Start The Assignment ",
    "description": "",
    "tags": null,
    "title": "Project Introduction",
    "uri": "/assignments/orbit-report/project-intro/index.html"
  },
  {
    "content": "Using JavaScript in React React is a JavaScript library. You can create the following JavaScript expressions in your React projects:\nVariables Loops Functions Conditionals Objects Strings DOM and Window events. The syntax is a little different in React, but the functionality is the same.\nA Note on Naming Conventions. In React part 1, we used className to apply CSS stylings instead of class. This is because class is a JavaScript keyword. React adapted by using className. Note the use of camelCase.\nWe can use the onclick method in React, but we need to apply camel casing to the name: onClick.\nW3 Schools created some nice examples of React Events if you would like to learn more.\nJavaScript Variables We can render variables inside our components by encasing them in curly braces { }. The curly braces act as escape characters for JSX. They inform the JSX to render the element inside of the brackets.\nExample: Variables 1 2 3 4 5 6 7 8 9 const name = \"Willow\" function Hello(){ return( \u003cp\u003eHello! My name is {name}!\u003c/p\u003e ); }; export default Hello; Check the output Hello! My name is Willow!\nname was declared in line 1, as a JavaScript string. We can render it inside the Hello function by using curly braces. The curly braces let the JSX and HTML know that we want to use the variable name and its value. If we left off the curly braces, the word name would appear in the browser. The message would read “Hello! My name is name”.\nTemplate literals You can use template literals to work with strings. This can be easier than concatenation and more flexible than hard coding. These can be very useful with loops, conditionals, and lists.\nTemplate Literal syntax:\nEncase the entire template literal within { } since it is a JavaScript string Enclose the entire string in backticks `` Variables need to be inside curly braces {variableNameHere} $ are escape tokens and introduce each variable within the template literal ${variableNameHere} Should look something like this when you put it all together: {'Hello, ${variableNameHere}'}\nExample: Template Literals 1 2 3 4 5 6 7 8 9 10 11 12 13 let num1 = 4; let num2 = 7; num2 = 8 function TemplateLiteral(){ return( \u003cdiv\u003e {`(${num1} * ${num2}) is ${num1 * num2} and (${num1} + ${num2}) is ${num1 + num2}`} \u003c/div\u003e ); }; export default TemplateLiteral; Check the output (4 * 8) is 32 and (4 + 8) is 12\nArrow Functions Arrow functions are simplified functions. You can use an arrow function as an argument for other functions. They do not affect the global scope of the project. Due to their scope, they can be very useful for defining props, loops, and conditionals. These functions will return values without using the return keyword.\nWhy not only use arrow functions? For long functions. They are great for short expressions but longer functions can be hard to read.\nExample: Comparison of Functions 1 2 3 4 5 6 7 8 9 10 11 //comparing functions function Greeting(){ return( \u003ch1\u003eHello! I am a standard function.\u003c/h1\u003e ); } const ArrowGreeting = () =\u003e ( \u003ch1\u003eHello! I am an arrow function.\u003c/h1\u003e ); Check the output Hello! I am a standard function. Hello! I am an arrow function. Example: Combining Functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //function with an arrow function function ShinyButton(){ const handleClick = () =\u003e { alert(\"You clicked me!\"); } return( \u003cbutton onClick={handleClick}\u003e Click This Button! \u003c/button\u003e ); } export default ShinyButton; Check the output Working with Props and JS Recall from the previous chapter , props are arguments passed to and between functions. We can use anything as a props, since props are placeholders.\nWe can use props to pass data between components.\nExample: Props 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function GreetFriend(props) { return( \u003ch1\u003eHello, {props.name}!\u003c/h1\u003e ); } function Greeting(){ return( \u003c\u003e \u003cGreetFriend name=\"Willow\" /\u003e \u003c/\u003e ); } export default Greeting; Check the output Hello, Willow! We can declare our props. This can make the code more meaningful and easier for humans to understand.\nExample: Defined Props 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function GreetFriend(name) { return( \u003ch1\u003eHello, {name}!\u003c/h1\u003e ); } function Greeting(){ return( \u003c\u003e \u003cGreetFriend name=\"Willow\" /\u003e \u003c/\u003e ); } export default Greeting; Check the output Hello, Willow! We can also set default variables for props.\nExample: Default values 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function GreetFriend(name =\"Tacocat\") { return( \u003ch1\u003eHello, {name}!\u003c/h1\u003e ); } function Greeting(){ return( \u003c\u003e \u003cGreetFriend name=\"Willow\" /\u003e \u003cGreetFriend /\u003e \u003c/\u003e ); } export default Greeting; Check the output Hello, Willow! Hello, Tacocat! Note Lines 9 and 14 in the example above are empty tags. These are Fragments. Fragments allow you to group many elements and treat them as a single element. You will often find fragments in return statements.\nImporting and Exporting Exporting Components\nThere are multiple ways to export. We recommend you pick one way and remain consistent with it throughout your codebase. It will help with readability.\nExample: Exporting Option 1: After the function\n1 2 3 4 5 6 7 function GreetFriend(name =\"Tacocat\") { return( \u003ch1\u003eHello, {name}!\u003c/h1\u003e ); } export default GreetingFriend; Option 2: As part of the declaration\n1 2 3 4 5 export default function GreetFriend(name =\"Tacocat\") { return( \u003ch1\u003eHello, {name}!\u003c/h1\u003e ); } Importing Components\nYou can import components to other components, not just App.js.\nIn the example above, GreetFriend and Greeting are in the same file. We could create separate files for them and import GreetFriend into Greeting.\nImporting Other Things\nYou can import non-component portions of your codebase. JSON files are a commonly imported item.\nData is stored in a JSON file. We import to the component. The component is able to find the data. In this example, it is a name. GreetFriend imports the JSON file and then uses it to complete the greeting message.\nExample: Working with JSON 1 2 3 4 // File is nameData.json { \"name\": \"Hermes\" } When you import something that you plan to use in a function, be sure to give it a name if none exists. In this example, there is only a file name. We assigned it the name data. This data is an object, so we can use dot notation to access the object’s values with the keys.\n1 2 3 4 5 6 7 import data from './nameData.json' function GreetFriend() { return( \u003ch1\u003eHello, {data.name}!\u003c/h1\u003e ); } Check the output Hello, Hermes! Check Your Understanding Question What structure is used to contain JavaScript variables?\nBrackets [ ] Parentheses ( ) Double Quotes \" \" Curly Braces { } Question 1 2 3 4 5 6 7 8 9 10 11 12 13 const bookInfo = { title: \"Dracula\", author: \"Bram Stoker\", published: 1897 } function Book(){ return( \u003cp\u003eMy favorite book is {title}\u003c/p\u003e ); }; export default Book; Is returning the following error:\n'title' is not defined no-undef Which syntax will correctly assign a value to title?\n\u003cp\u003eMy favorite book is Dracula\u003c/p\u003e \u003cp\u003eMy favorite book is {bookInfo.title}\u003c/p\u003e const BookInfo = () =\u003e { return( \u003cp\u003eMy favorite book is {title}\u003c/p\u003e ); } function Book(props){ return( \u003cp\u003eMy favorite book is {props.title}\u003c/p\u003e ); }; Question How would you rewrite the following arrow function as a regular function?\nconst SayHello = () =\u003e { return( \u003ch1\u003eHello!\u003c/h1\u003e ); } export default SayHello; function SayHello(){ return( \u003ch1\u003eHello!\u003c/h1\u003e ); } function SayHello(\"Hello\"){ return(); } const SayHello(){ return( \u003ch1\u003eHello!\u003c/h1\u003e ); } function SayHello(){ return( \u003ch1\u003e{Hello!}\u003c/h1\u003e ); } ",
    "description": "",
    "tags": null,
    "title": "JavaScript in React",
    "uri": "/react-part-2/reading/js-in-react/index.html"
  },
  {
    "content": "Reading Content JavaScript in React Conditional Rendering The map( ) Function ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/react-part-2/reading/index.html"
  },
  {
    "content": "One of the benefits of using React is that as users interact with the application, the application updates the user interface without reloading the entire page. This is due to a concept called state. State is oftentimes referred to as a component’s memory.\nLet’s think back to the last time you filled out your tax return. If you e-file your taxes, you might have used a React-based web application to do so. An example component would be the tax estimate for your federal and state taxes. For some tax applications, if it looks like you are getting a refund, the number is green and if it looks like you owe some money, the number is red. At the beginning of the process, both federal and state would have shown $0 or “N/A” to indicate that you haven’t started the process yet. Now when you enter the information on a form, like your W2, you see the numbers in that component changing. In fact, every time you edit some aspect of your taxes, the numbers may change and the colors of that number may change. This is where state comes into play in this React-based tax application. Reloading the page every time you edit one thing would be annoying and make the application inefficient. Even just re-rendering one component on the page can be a costly process. With state, the component is only re-rendered when there is new data. If you enter some information that doesn’t change the fact that the federal government owes you a refund of $200, the component will not re-render. Selectively re-rendering components makes React an efficient library to use for web development. While not always noticeable, re-rendering components can lead to lagging or delays as the users interact with your application. By only re-rendering components in select cases, React helps us minimize the possibility of this happening.\nWhile state is a built-in concept in React, you as the programmer have to call upon it. Local variables won’t keep their values during re-renders and changing the value of a local variable doesn’t trigger re-rendering. We have to use a state variable to hold data that we want to keep as part of the component’s memory. To set the value of a state variable, we will use a state setter function. Both a state variable and state setter function are provided by a React hook called useState(). Hooks are features of React that allow you to access different aspects of React and use them with your components. Without hooks, components would just be ordinary classes and functions.\nIn the example of a tax application, we might have a state variable for federal taxes called federalTax. We can then declare that state variable like so:\nconst [federalTax, setFederalTax] = useState(0); Here we are using the useState hook to set the initial value of federalTax to 0. We also have declared that the state setter function for federalTax is setFederalTax. To update the value of federalTax to 100, we just have to use setFederalTax like so, setFederalTax(100).\nYou can also set up the state variable to be an object. Here is how we might do it with our tax application.\nconst [taxes, setTaxes] = useState({ federal: 0, state: 0 }); With useState, the value of taxes.federal is set to 0 and the value of taxes.state is also set to 0. To update the value of the state taxes to -10, but not update the value of the federal taxes, then we would pass those values to setTaxes like so:\nsetTaxes({ federal: taxes.federal, state: -10 }); State variables are considered read-only, so in order for us to update the state, we have to pass a new object to the state variable.\nWarning It is worth noting that if the user reloads the page, the state of the component is returned to the original state. If we wanted to make sure that we didn’t lose track of what the user owes in federal taxes, we may have to do some backend work, but that is a task for Unit 2 of this course.\nCheck Your Understanding Question What is useState?\nA class An object A hook A function Question True or False: State variables are considered to be read-only.\n",
    "description": "",
    "tags": null,
    "title": "An Introduction to State in React",
    "uri": "/react-lsn3/reading/state-intro/index.html"
  },
  {
    "content": "Reading Content An Introduction to State in React Changes in State React and the DOM Introduction to React Forms ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/react-lsn3/reading/index.html"
  },
  {
    "content": "What is a Library and Why Would We Use One? Many programming languages, such as JavaScript, have libraries. A library in programming is a collection of reusable code, such as methods and classes, that developers can use to write more complex applications more efficiently.\nWhen it comes to web-based applications, there are two very different places code can exist: in the user’s browser (front-end) and on the host’s server (back-end).\nFor web development, consider the front end as what the user interacts with and sees, while the back end contains the logic and manipulations that the user doesn’t need to worry about. Similar to how an old mechanical clock works. The front end would be the face with the 12 numbers and the two moving hands. The user only needs the clock face to determine the time. The back end for the clock would be the various cogs, wheels, and power source.\nIn this chapter, we will start to use React for a front-end JavaScript library. When we create a new React application, we are given some guidelines on what structures and rules to follow, but we also have lots of freedom in determining how the application will flow.\nNote While some developers use the terms interchangeably, frameworks are different from libraries. Frameworks control the flow of the application and provide structure for it. When working with frameworks, developers do not have to make any decisions related to flow and structure and are more focused on plugging in the appropriate code at the appropriate time. An example of a front-end JavaScript framework would be Angular.\nReact React is a front-end library maintained by Meta, also known as Facebook, and an open-source community of developers/JavaScript fans. While there are many front-end frameworks and libraries that will aid you in making a beautiful website, there are a few key reasons why one may choose React over the others.\nReact is flexible enough that it can be used for cross-platform work. This means that React can be used to develop applications for mobile platforms in addition to web applications. Thanks to JSX, writting HTML and JavaScript for your React application is a more straight-forward process compared to working with Angular where the code is separated into multiple files. React is built on components, which are blocks of reusable code that we as developers write. The way React uses components makes it easy for us to call our components and reuse them in the application as we need to. These are some of the reasons why companies, such as Netflix and Instacart, choose React. Let’s dive into the final reason and learn more about components in React.\n",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/react-lsn1/reading/introduction/index.html"
  },
  {
    "content": "Reading Content Introduction React Components Create a React Application More on Vite Make a New Component ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/react-lsn1/reading/index.html"
  },
  {
    "content": "Learning Objectives After completing the reading in this chapter, you should have a good understanding of the following:\nWhy someone would want to learn how to code Why learn how to code using JavaScript The structure of LaunchCode programs The concept of blended learning What platforms this class utilizes How to use this book Key Terminology Here is a list of key terms that appear throughout this chapter organized by the page the term first appears on. Make note of each one and their definition! You may notice that the key terms in this book are bolded. So as you are reading, keep an eye out for those bolded words!\nWhy Learn JavaScript? JavaScript Blended Learning blended learning model Class Platforms Canvas dashboard Chapter Content Reading ",
    "description": "",
    "tags": null,
    "title": "Chapter 1: Introduction",
    "uri": "/introduction/index.html"
  },
  {
    "content": "Reading Content Why Learn to Code? Why Learn JavaScript? About LaunchCode Programs Blended Learning Class Platforms Using This Book Technologies in This Course ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/introduction/reading/index.html"
  },
  {
    "content": "Reading Content The JavaScript-y Way JavaScript Syntax Extensions Supersets Transpilation ",
    "description": "",
    "tags": null,
    "title": "Reading",
    "uri": "/modern-js/reading/index.html"
  },
  {
    "content": "So far, we have been learning Vanilla JavaScript or VanillaJS. VanillaJS is a term used to describe plain JavaScript that doesn’t employ any additional libraries or frameworks. Learning about programming and web development using VanillaJS is extremely useful in understanding the underlying behaviors of those frameworks and why programmers use them.\nVanillaJS is more formally referred to ECMAScript. When ECMAScript2015 or ES6 was released, several key features were introduced that allow React developers to write more efficient code. We encountered these terms earlier when learning about template literals. We have introduced coding concepts to you using JavaScript syntax that is close to other languages, but ES6 has some specialized syntax that you are likely to see in more complex JavaScript applications.\nNote There are many different versions of ECMAScript. At the time of writing in March 2023, we are focusing on ES6, because the ES6 release featured many groundbreaking changes and had widespread browser support across different browsers and browser versions.\nArrow Functions So far we have seen functions and we also learned about anonymous functions. Another way to write a function with ES6 is to write an arrow function. Using arrow functions will make your code more compact. In general, an arrow function looks like so:\nfunctionName = (parameters) =\u003e { // function body } Note Due to the syntactical structure of arrow functions, arrow functions are also anonymous functions.\nFor example, let’s write a function for a hiking application. If a hiker wants to log a hike they just went on, we should add the number of miles they hiked to a lifetime total. Being expert JavaScript developers, we are going to write a function that will add the two numbers together. Before trying out arrow functions, let’s write a function that accomplishes this task.\naddLatestHike = function(miles, lifetimeTotal) { return lifetimeTotal + miles; } Now we want to rewrite addLatestHike() and turn it into an arrow function.\naddLatestHike = (miles, lifetimeTotal) =\u003e { return lifetimeTotal + miles; } Now, one of the advantages of using arrow functions is that we can make our code more compact. We can simplify the above function even further because it only has one statement in the function body and that is the return statement. The equivalent and more compact way to write addLatestHike() is:\naddLatestHike = (miles, lifetimeTotal) =\u003e lifetimeTotal + miles; Note If you have exactly one parameter, you do not have to wrap that parameter in parantheses. Let’s say lifetimeTotal was actually a global constant and we were writing a function that would return the sum of lifetimeTotal and a singular parameter, miles. Then our addLatestHike() function would actually be:\naddLatestHike = miles =\u003e lifetimeTotal + miles; There are many advantages of using arrow functions, but you should NOT use arrow functions as class constructors or class methods. Arrow functions treat the this keyword differently than regular functions. With a regular function, the this keyword refers to the object that calls the function so we can use it when writing class methods. With an arrow function, the this keyword refers to the object that owns the function so we would not get the same result if we use it in a class method. Furthermore, when writing ES6 classes, the use of = in our function declaration will designate our method as a property. Unlike methods, properties are not shared by instances of classes and instead are generated with each instance. This may not seem worrisome if we only have one class with three instances, but if we scale our application up to one class with 1,000,000 instances, all of those arrow functions that are now properties will slow our application down. Just because something is technically possible doesn’t mean that it is advisable when it comes to scalability.\nThe Spread Operator Another new syntatical expression you may see when you start diving in to more complex applications is the spread operator. The spread operator is written as three periods and appears before the object that you want to apply it to. We can use this operator whenever we want to expand an iterable and access all of it’s elements, such as passing each object in the iterable to a function as arguments or applying an operation to each object in an iterable. We can use the spread operator to make a copy of an array easily since it allows the computer to expand the iterable and access the individual elements. Here is how we write the code when we want to make a copy of an array:\nlet array1 = [\"STL\", \"KC\", \"Philly\"]; let array2 = [...array1]; Now array2 contains all three elements of array1 in the same order so we could add another element to array2 without impacting array1.\nWe can make use of the spread operator in our hiking application. First, let’s take a look at some of the code our colleagues wrote. Their code contains two functions: findWeeklyTotal() and addWeeklyTotal(). findWeeklyTotal() returns the total for miles hiked in a week. addWeeklyTotal() returns the sum of the miles hiked in a week and that hiker’s lifetimeTotal.\n1 2 3 4 5 6 7 8 9 10 11 let lifetimeTotal = 0; let weeklyTotal = 0; findWeeklyTotal = (m, t, w, th, f, sa, su) =\u003e { weeklyTotal = m + t + w + th + f + sa + su; } addWeeklyTotal = () =\u003e { lifetimeMiles = lifetimeMiles + weeklyTotal; weeklyTotal = 0; } Now each user’s logged miles for hikes are saved in arrays for each week. The miles hiked on Monday is stored at index 0, the miles hiked on Tuesday at index 1, and so on. If the hiker didn’t log a hike, then the value stored is just 0. If a hiker goes on two hikes in a week, one on Tuesday that was 2.1 miles and one on Saturday that was 5.3 miles, then milesHikedThisWeek would be [0, 2.1, 0, 0, 0, 5.3, 0]. Let’s take a look at what the code looks like when our user, Judy, goes on a hike every day of the week and each hike is 5.0 miles long. We can use the spread operator to pass our array to findWeeklyTotal() like so:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let lifetimeMiles = 0; let weeklyTotal = 0; let milesHikedThisWeek = [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0]; findWeeklyTotal = (m, t, w, th, f, sa, su) =\u003e { weeklyTotal = m + t + w + th + f + sa + su; } addWeeklyTotal = () =\u003e { lifetimeMiles = lifetimeMiles + weeklyTotal; weeklyTotal = 0; } findWeeklyTotal(...milesHikedThisWeek); addWeeklyTotal(); This way we don’t have to loop through milesHikedThisWeek to pass all seven values to findWeeklyTotal(). We can just use the spread operator!\nWarning You may be tempted to try and use the spread operator in function arguments, but doing so will make the item a rest parameter. To learn mroe about rest parameters and how they differ from the spread operator, check out this article from freeCodeCamp .\nTo Map or not to map()? Finally, when working with React applications, you may see the word “map” a lot. This is because there is a function called map() and a collection called Map.\nMap You may recall from learning about objects in JavaScript that objects are collections of key-value pairs where the keys are unordered and the collection is not iterable. Maps, on the other hand, are collections of key-value pairs where the keys are ordered and the collection is iterable. Also, you are not restricted to just using strings for your keys. You can use any primitive data type as a key with maps.\nIn our hiking application, we can turn our milesHikedThisWeek into a Map. Let’s do so using Judy’s data from the above example.\n1 2 3 4 5 6 7 8 9 let milesHikedThisWeek = new Map([ ['Monday', 5.0], ['Tuesday', 5.0], ['Wednesday', 5.0], ['Thursday', 5.0], ['Friday', 5.0], ['Saturday', 5.0], ['Sunday', 5.0] ]); Since the days of the week are in a specific order, it makes sense that we would want to use an ordered collection to store Judy’s hiking data. The other benefit is that milesHikedThisWeek is iterable. To loop through a Map, we need to use a new style of loop called a for/of loop.\n1 2 3 for (const [key, value] of milesHikedThisWeek) { console.log(`On ${key}, you hiked ${value} miles!`); } With this code, we would get the following output.\nOn Monday, you hiked 5.0 miles! On Tuesday, you hiked 5.0 miles! On Wednesday, you hiked 5.0 miles! On Thursday, you hiked 5.0 miles! On Friday, you hiked 5.0 miles! On Saturday, you hiked 5.0 miles! On Sunday, you hiked 5.0 miles! While there are many advantages to using Maps, keep in mind that if you are parsing JSON, you will need to use an object instead. JSON is an unordered collection so you cannot convert between JSON and Maps.\nmap() While a JavaScript Map is a type of collection, map() is an array method in JavaScript. map() is used in React applications to quickly display all the objects in an array. You can also use map() to create a copy of an array and apply a function to each item in the array.\nCheck Your Understanding Question Arrow functions are also _______ functions.\nanonymous odd class named Question What do you think evenNumbers will hold after this code executes?\nlet oddNumbers = [1, 3, 5]; let evenNumbers = oddNumbers.map(number =\u003e number * 2); ",
    "description": "",
    "tags": null,
    "title": "The JavaScript-y Way",
    "uri": "/modern-js/reading/es6-syntax/index.html"
  },
  {
    "content": "How many times do you use a computer in a day? What do you use it for? Maybe you use one to check email and social media, to watch TV, or to even set an alarm for the next day. Computers and technology are everywhere in our society.\nWith the rise of technology and computers, coding has risen as well. At its most basic level, coding is how humans communicate with computers. With code, humans tell computers to complete specific tasks and store specific information. Many would argue that due to the prevalence of computers, learning to code is vital to living in the 21st century. Writing and reading code is becoming a new form of literacy for today’s world.\nAs our needs change, technology changes to meet them. When we needed a way to talk to each other over long distances, we got phones. As our needs to communicate changed, our phones became portable. Then, we gained the ability to use our phones to send quick written messages to each other.\nThe technical skills required to make the phones of 20 years ago are not the same skills required to make a phone today. A career as a technologist, specifically as a programmer, is one of lifelong learning.\nLearning to code is not only valuable and challenging, it is also fun. Every EUREKA! moment inspires us to keep going forward and to learn new things. You may find some concepts difficult to understand at first, but these will also be the skills you take the most pride in mastering. While the journey to learning to code is long and winding, it is also rewarding.\nFrom the moment that you write your first line of code, you are a programmer. We hope you enjoy the flight!\n",
    "description": "",
    "tags": null,
    "title": "Why Learn to Code?",
    "uri": "/introduction/reading/why-learn-code/index.html"
  },
  {
    "content": ".concat() Examples The general syntax for this method is:\narrayName.concat(otherArray1, otherArray2, ...) This method adds the elements of one array to the end of another. The new array must be stored in a variable or printed to the screen, because concat does NOT alter the original arrays.\nExample let arr = [1, 2, 3]; let otherArray = ['M', 'F', 'E']; let newArray = []; newArray = arr.concat(otherArray); console.log(newArray); newArray = otherArray.concat(arr); console.log(newArray); console.log(arr.concat(otherArray, arr)); console.log(arr); Output\n[1, 2, 3, 'M', 'F', 'E'] [ 'M', 'F', 'E', 1, 2, 3 ] [ 1, 2, 3, 'M', 'F', 'E', 1, 2, 3 ] [1, 2, 3] ",
    "description": "",
    "tags": null,
    "title": "concat Examples",
    "uri": "/appendices/array-method-examples/concat-examples/index.html"
  },
  {
    "content": "The general syntax for this method is:\nlet answer = window.confirm(\"Message to user\"); Displays a dialog box with a message and returns true if user clicks “ok” and false if user clicks “cancel”. The browser waits until the user clicks “ok” or “cancel”.\nExample let response = window.confirm(\"Would you like to play a game?\"); // Code does NOT continue until user responds to confirm window if (response) { console.log(\"Let's play a board game\"); } else { console.log(\"Oh well, let's code instead\"); } Note Remember that methods defined on window can be used without referencing the window variable.\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eDOM Examples\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eWindow Confirm Example\u003c/h1\u003e \u003cscript\u003e let response = confirm(\"Are you excited?\"); if (response) { console.log(\"Yay! Me too!\"); } else { console.log(\"Oh no! I hope tomorrow is a better day!\"); } \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output (If “cancel” clicked)\nOh no! I hope tomorrow is a better day! ",
    "description": "",
    "tags": null,
    "title": "confirm Examples",
    "uri": "/appendices/dom-method-examples/confirm-examples/index.html"
  },
  {
    "content": "Setting Up Git Git will help us track changes and versions of our code.\nMac Users Open a new terminal window.\nType the command, git --version, in the terminal.\nIf the output includes a Git version, like the code below, then you are ready to use Git!\ngit --version Console Output\ngit version 2.6.4 (Apple Git-63) If the output does not include a Git version, then a popup will open and ask you to install Developer Tools. Click “Install”!\nAfter the installation is done, you can double check that it worked by typing git --version and the version of Git will be part of the output!\nWindows Users Since you already installed Git Bash when you set up your terminal , you are good to go!\n",
    "description": "",
    "tags": null,
    "title": "Installing Git",
    "uri": "/installations/install-git/index.html"
  },
  {
    "content": "The general syntax for this method is:\nMath.abs(number) This method returns the positive value of a number, which can be printed or stored in a variable. abs works on both integer and decimal values.\nNumerical strings can also be evaluated, but should be avoided as a best practice.\nExample 1 2 3 4 5 6 7 8 let num = Math.abs(-3); console.log(num); console.log(Math.abs(4.44)); console.log(Math.abs('-3.33')); console.log(Math.abs(24/-3)); // 24/-3 = -8 Console Output\n3 4.44 3.33 8 Math.abs also works on arrays, but to make the process work, we must combine it with the map array method. The syntax for this is:\narrayName.map(Math.abs) Note that Math.abs takes no argument when applied to an array.\nExample 1 2 3 4 5 let numbers = [-2, 3, -4.44, \"8.88\"]; let positiveArray = numbers.map(Math.abs); console.log(positiveArray); Console Output\n[2, 3, 4.44, 8.88] ",
    "description": "",
    "tags": null,
    "title": "Math.abs Examples",
    "uri": "/appendices/math-method-examples/abs-examples/index.html"
  },
  {
    "content": " Embrace Failure Does the following statement resonate with you? If so, perfect.\n“If I stumble, I WILL pick myself up, brush off the dust, and try again.”\nAll throughout LC101, you will be asked to code. Each exercise, studio and assignment is designed to give you experience through practice. You WILL make mistakes, and that is OK. Often, our mistakes teach us more than getting the correct answer on our first try.\nEvery genius programmer you see on Facebook or YouTube started out in front of a screen saying, “Oops,” “ARGH!” or “#*\u0026%%@#!” No one simply “gets” coding without some trial-and-error.\nWhere Would We Be? What if Thomas Edison had given up?\nThomas Edison’s teachers said he was too stupid to learn anything. He was fired from his first two jobs for being non-productive. As an inventor, Edison made 1,000 unsuccessful attempts at inventing the light bulb.\nWhen a reporter asked, “How did it feel to fail 1,000 times?” Edison replied, “I didn’t fail 1,000 times. The light bulb was an invention with 1,000 steps.”\nOr if Steve Jobs had taken Hewlett-Packard’s advice and finished college?\nApple Computer founder Steve Jobs on attempts to get companies interested in his and Steve Wozniak’s personal computer:\nSo we went to Atari and said, “Hey, we’ve got this amazing thing, even built with some of your parts, and what do you think about funding us? Or we’ll give it to you. We just want to do it. Pay our salary, we’ll come work for you.” And they said, ‘No.’\nSo then we went to Hewlett-Packard, and they said, ‘Hey, we don’t need you. You haven’t got through college yet.’\nDo…or do not. There is no try. Do your homework.\n",
    "description": "",
    "tags": null,
    "title": "The Power of Persistence",
    "uri": "/booster-rockets/personaldrive/index.html"
  },
  {
    "content": "In order for our application to make a request to an API, the data will need to be formatted in a way both our application and the API can understand.\nThe API may have been built with another programming language. And it may not use the same variables, objects, and data structures as JavaScript. To solve the issue of APIs being built in different programming languages, data formats are used.\nA data format is a set of rules that govern how data is written, organized, and labeled. Data formats make working with data consistent and reliable.\nJSON There are quite a few different data formats, but we will only focus on one throughout this class: JavaScript Object Notation, also known as JSON. JSON is one of the leading data formats used, especially on the web.\nJSON is based on JavaScript object syntax, but has some differences.\nLet’s consider an API that serves information about the books in a library. In this example, we searched for “An Astronaut’s Guide to Life on Earth”.\n1 2 3 4 5 6 7 8 { \"title\": \"An Astronaut's Guide to Life on Earth\", \"author\": \"Chris Hadfield\", \"ISBN\": 9780316253017, \"year_published\": 2013, \"subject\": [\"Hadfield, Chris\", \"Astronauts\", \"Biography\"], \"available\": true } The API returned a match for our search. The search provides us with information that may be useful to the user in the form of the title, author, ISBN, the year the book was published, the subjects of the book, and if the book is currently available for checkout.\nJSON Rules JSON is a collection of key-value pairs. In the example above, \"title\" is a key and it’s value is \"An Astronaut's Guide to Life on Earth\".\nThe key-value pairs describe the data that is being transferred.\nA JSON key MUST be a string, but the value may be a number, string, boolean, array, object, or null.\nIn the example above, the JSON describes one object, a book! All of the keys are strings, and the values are: string, string, number, number, array, and boolean respectively.\nJSON can also be used to describe a collection of objects at the same time. Consider we search for the word “Astronaut”.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \"hits\": 3, \"book\": [ { \"title\": \"An Astronaut's Guide to Life on Earth\", \"author\": \"Chris Hadfield\", \"ISBN\": 9780316253017, \"year_published\": 2013, \"subject\": [\"Hadfield, Chris\", \"Astronauts\", \"Biography\"], \"available\": true }, { \"title\": \"Astronaut\", \"author\": \"Lucy M. George\", \"ISBN\": 9781609929411, \"year_published\": 2016, \"subject\": [\"Astronauts\", \"Juvenile Fiction\", \"Space stations\"], \"available\": false }, { \"title\": \"Astronaut Ellen Ochoa\", \"author\": \"Heather E. Schwartz\", \"ISBN\": 9781512434491, \"year_published\": 2018, \"subject\": [\"Ochoa Ellen\", \"Women astronauts\", \"Astronauts\", \"Biography\", \"Women scientists\", \"Hispanic American women\"], \"available\": true } ] } This time, our search term “Astronaut” returned multiple books, and so a collection of book objects was returned in JSON format.\nEach book object can be found in the array with the key \"book\". Each book contains the keys \"title\", \"author\", \"ISBN\", \"year_published\", \"subject\", and \"available\".\nWhen we make a request to an API, the API formats the data we requested into JSON and then responds to our request with the JSON representation of our request.\nJSON \u0026 JavaScript Object Differences JSON is rooted in JavaScript objects syntax. However, there are some key differences between the two.\nJSON keys MUST be in double quotes. Double quotes should not be used when declaring properties for a JavaScript object.\nJSON:\n1 2 3 4 { \"title\": \"The Cat in the Hat\", \"author\": \"Dr. Seuss\" } JavaScript object:\n1 2 3 4 let newBook = { title: \"The Cat in the Hat\", author: \"Dr. Seuss\" } To represent a string in JSON, you MUST use double quotes. In JavaScript, you can use double quotes or single quotes.\nJSON:\n1 2 3 4 { \"title\": \"The Last Astronaut\", \"author\": \"David Wellington\" } JavaScript object:\n1 2 3 4 let anotherBook = { title: 'The Last Astronaut', author: 'David Wellington' } Note JSON is based on JavaScript objects, but there are key differences. JSON syntax is a little more strict than JavaScript object syntax.\nCheck Your Understanding Question What does API stand for?\nQuestion Why might you connect to an API?\nQuestion True or False: JSON is JavaScript.\nQuestion What purpose does JSON serve?\n",
    "description": "",
    "tags": null,
    "title": "Data Formats and JSON",
    "uri": "/json/reading/data-formats-json/index.html"
  },
  {
    "content": " Which of the following three code snippets is correct JSON syntax? Why are the other two options incorrect?\na.\n1 2 3 4 5 { type: \"dog\", name: \"Bernie\", age: 3 } b.\n1 2 3 4 5 { \"type\": \"dog\", \"name\": \"Bernie\", \"age\": 3 } c.\n1 2 3 4 5 { \"type\": 'dog', \"name\": 'Bernie', \"age\": 3 } Check your solution a. This not correct JSON syntax because keys in JSON need to be strings. b. This is the only correct option. c. This not correct JSON syntax because, unlike JavaScript, JSON only uses double quotation marks (\"\")\nWhich of the following three code snippets is correct JSON? Why are the other two options incorrect?\na.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"animals\": [ { \"type\": \"dog\", \"name\": \"Bernie\", \"age\": 3 }, { \"type\": \"cat\", \"name\": \"Draco\", \"age\": 2 } ] } b.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 { [ { \"type\": \"dog\", \"name\": \"Bernie\", \"age\": 3 }, { \"type\": \"cat\", \"name\": \"Draco\", \"age\": 2 } ] } c.\n1 2 3 4 5 6 7 8 9 10 11 12 [ { \"type\": \"dog\", \"name\": \"Bernie\", \"age\": 3 }, { \"type\": \"cat\", \"name\": \"Draco\", \"age\": 2 } ] ",
    "description": "",
    "tags": null,
    "title": "Exercises: JSON",
    "uri": "/json/exercises/index.html"
  },
  {
    "content": "While web developers can often get away with a minimal understanding of TCP/IP and DNS, they must understand HTTP much more deeply. Before diving into the details of HTTP, let’s gain a high-level understanding.\nRequests and Responses The fundamental units of HTTP are requests and responses. A client (usually a web browser) makes a request to a web server. Based on the details of the request, the server formulates and sends a response. The response is parsed and displayed by the browser.\nAs long as the server is available, every request receives a single response.\nRequests contain several types of data, including:\nThe URL being requested. The type of action the client is asking the browser to take. Metadata about the request, such as the type of browser making the request and the type(s) of data the client can accept in return. Optionally, a request message. Responses include:\nThe status of the response, including success or failure reasons. Metadata about the response, including the size and data format of the response message. Optionally, a response message. The Postal Service of the Internet HTTP can seem complicated, but it is actually very similar to a system that you are already familiar with: The United States Postal Service.\nSuppose you want to mail a letter to your friend in Alaska, asking them their favorite cheese. To do so, you write your question on a piece of paper and enclose it in an envelope. On the envelope, you write your friend’s address, along with your return address. Finally, you affix a stamp to the top-right corner.\nImage is in the public domain\nEach of these pieces of information is necessary for your letter to be delivered. When your letter enters the postal system, it will travel from one post office to another, via land, air, and maybe even sea. As long as you follow their rules, the postal service will get your letter to its destination.\nThis is very similar to how an HTTP request works. The letter is like a request message. The envelope contains the location and metadata needed for the letter to be delivered, just like an HTTP request specifies a URL and other metadata necessary for the request to reach the server and be processed.\nWhen you drop the letter in your mailbox, you know it will be delivered since you followed the postal service’s rules. When we make HTTP requests, we don’t know how our request will get to the server, but as long as we properly structure a request, it will be delivered.\nBoth the postal service and the Internet deliver messages, as long as you follow their formatting rules. Images used with permission. L: via US Air Force , R: via Flickr user verkeorg And just as your friend will respond with a letter telling you their favorite cheese (sharp white cheddar!), an HTTP request will result in a response from the server.\nAs we wade into the details of HTTP, keep this analogy in mind. It will help simplify the concepts and make them more concrete.\nCheck Your Understanding Question In your own words, explain the role of HTTP in enabling communication over the Internet.\nQuestion Answer true or false for each of the following statements.\nA web server can send multiple responses for a single HTTP request. The postal service will deliver your HTTP requests, if you ask nicely. When creating an HTTP request, we must specify every network connection and server between our client and the server. The postal service is a good analogy for HTTP. ",
    "description": "",
    "tags": null,
    "title": "HTTP at a Glance",
    "uri": "/http/reading/http-at-a-glance/index.html"
  },
  {
    "content": "Now that you have tackled HTTP, you are ready to take on forms. Before you do so, if you want to review HTTP, here are some of our favorite resources.\nAn Introduction to HTTP What is HTTP? ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/http/next-steps/index.html"
  },
  {
    "content": "We will use our new terminal powers to move through the Git exercises.\nIn whichever directory you are keeping your coursework outside of javascript-projects, make a new directory called Git-Exercises using the mkdir command. You want to make sure this is outside of javascript-projects because it will cause an issue if you try and make a new Git repository inside an existing one.\nCheck your solution My-Computer:my-coursework myusername$ mkdir Git-Exercises Inside the Git-Exercises directory, initialize a new Git repository using git init.\nUse git branch to check the default branch name. If necessary, change the branch name to main.\nAdd a file called exercises.txt using the touch command in the terminal.\nCheck Your Solution My-Computer:Git-Exercises myusername$ touch exercises.txt Commit your local changes using the git commit procedures.\nAdd \"Hello World!\" to the file called exercises.txt.\nCommit your local changes following the same steps that you used for step 5.\nRun the git log command. Take a screenshot of the result. Make note of what you see!\nCheck your solution My-Computer:Git-Exercises myusername$ git log commit 00000000000000000000000000000000000000000 Author: Me \u003cmyemail\u003e Date: Jan 1 01:01:01 2021 Wrote Hello World ",
    "description": "",
    "tags": null,
    "title": "Exercises: Git",
    "uri": "/git/exercises/index.html"
  },
  {
    "content": "Create a Repository To get started with a local git repository, the programmer must first create one. So far, we made all the repositories for you and you were able to clone the code to your local machine. To create a git repository, the programmer navigates to their project directory and uses the command git init, like so:\nStudents-Computer:~ student$ mkdir homework Students-Computer:~ student$ cd homework Students-Computer:homework student$ git init Initialized empty Git repository in /Users/student/homework/.git/ Now the programmer is ready to code away!\nMaking Commits After a while, the programmer has made a lot of changes and saved their code files many times over. So when do they make a commit to their repository? Here’s a good rule of thumb:\nAny time a significant change in functionality is made, perform a commit.\nIf the programmer has created the Git repository and is ready to commit, they can do so by following the commit process that you have seen before. Let’s review it now.\nThe procedure for making a commit to a Git repository includes four stages.\ngit status gives the programmer information about files that have been changed. git add allows the programmers to add specific or all changed files to a commit. git commit -m MESSAGE creates the new commit with the files that the programmer added, with a message describing the changes included in the commit. Here, MESSAGE should be a descriptive message within double-quotes. git log displays a log of every commit in the repository. If the steps above are followed correctly, the programmer will find their latest commit at the top of the log.\nHere is how the process looks in the terminal:\nStudents-Computer:homework student$ git status On branch main Initial commit Untracked files: (use \"git add \u003cfile\u003e...\" to include in what will be committed) learning-git.js nothing added to commit but untracked files present (use \"git add\" to track) Students-Computer:homework student$ git add . Students-Computer:homework student$ git commit -m \"My first commit\" [master (root-commit) 2c1e0af] My first commit 1 file changed, 1 insertion(+) create mode 100644 learning-git.js Students-Computer:homework student$ git log commit 2c1e0af9467217d76c7e3c48bcf9389ceaa4714b Author: Student \u003clc101.student@email.com\u003e Date: Wed Apr 24 14:44:59 2019 -0500 My first commit To break down what happens in a commit even further:\nWhen using git status, the output shows two categories: modified tracked files and modified untracked files. Modified tracked means that the file exists in the Git repository already, but it is different than the version in the repository. Modified untracked means that it is a new file that is not currently in the repository.\ngit add adds files to the commit, but it does not commit those files. By using git add ., all the modified files were added to the commit. If a programmer only wants to add one modified file, they can do so.\ngit commit actually commits the files that were added to the repository. By adding -m \"My first commit\", a comment was added to the commit. This is helpful for looking through the log and seeing detailed comments of the changes made in each commit.\nTip It’s important to include a descriptive commit message. Such messages are visible in your local Git log, as well as in the commit history on GitHub. A good commit message allows you and your fellow developers to easily identify the changes made in a given commit.\ngit log shows the author of the commit, the date made, the comment, and a 40-character hash. This hash or value is a key for Git to refer to the version. Programmers use these hashes to reference specific commits, or snapshots, in the repository’s history.\nCheck Your Understanding Question What git command is NOT a part of the commit process?\ngit add git log git status git push ",
    "description": "",
    "tags": null,
    "title": "Repositories and Commits",
    "uri": "/git/reading/repositories-and-commits/index.html"
  },
  {
    "content": " Tip As you go through these steps, you’ll be working with branches.\nIt’s very likely you will make changes to the code only to realize that you did so in the wrong branch. When this happens (and it happens to all of us) you can use git stash to cleanly move your changes to another branch. Read about how to do this in the chapter content.\nStep 5: First Message Exchange Pilot: Use the File menu in Visual Studio Code to open the cloned communication-log-control directory. Double click the index.html file to open it in the editor.\nModify the HTML to add your response to mission control. Be creative, the communication can go anywhere! Just don’t ask your partner what you should write.\nPilot: After you finish, commit your change with the usual git status/git add ./git commit -m process.\nPilot: Push up your changes up to GitHub so Control can see them as well. Use the command:\n$ git push origin main Counting objects: 9, done. remote: Resolving deltas: 100% (8/8), completed with 8 local objects. To git@github.com:username/communication-log.git 511239a..679de77 main -\u003e main Control: Pull Pilot’s changes down from GitHub with the command\n$ git pull origin main From github.com:username/communication-log e0de62d..e851b7e main -\u003e origin/main Updating e0de62d..e851b7e Fast-forward index.html | 1 + 1 file changed, 1 insertion(+) Control: Notice that the code your local index.html file changes to reflect the line(s) Pilot added. Cool!\nRespond by adding a new HTML element and some text. Save, commit, and push your changes up to GitHub.\nPilot and Control: Play with the pull/edit/push process for a while! Repeat the cycle a few more times to add to your story.\nTip In VS Code, right-click on the index.html tab. Choose the Copy Path option.\nNext, open a web browser and paste the path into the address bar. Ta da! Your webpage appears. Opening index.html in your browser lets you track your progress by refreshing the page.\nNotice that the path in the address bar looks very similar to the result we would see from the pwd command in the terminal.\nStep 6: Create a Branch In Git This back-and-forth workflow is nice, but it can get in the way. After all, professional developers don’t sit around waiting for their teammates to commit and push a change before starting their own work. Fortunately, Git branches allow partners to work on a project at the same time and at their own pace.\nPilot: While Control is working on the next part of the story, use the terminal to create a new branch called open-mic. Recall that a branch is a separate copy of the codebase. This lets you commit changes without affecting the code in the main branch.\n$ git checkout -b open-mic Switched to a new branch 'open-mic' $ git branch main * open-mic Pilot: In VS Code, create a new file called style.css and add the following CSS style rule:\n1 2 3 4 body { color: white; background-color: black; } Pilot: Next, open index.html and link to the stylesheet. Your HTML should look something like this:\n1 2 3 4 5 6 7 8 9 10 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eRadio check. Pilot, please confirm.\u003c/p\u003e \u003c!-- Your ongoing conversation here... --\u003e \u003c/body\u003e \u003c/html\u003e Pilot: Save and commit your changes, then push the new branch up to GitHub with the command:\n$ git push origin open-mic Note that the command is a little different than what you used before (git push origin main). The final part is the name of the branch that you want to push to GitHub.\nControl: To pull down the new open-mic branch, enter the command:\n$ git pull origin open-mic Note If you don’t know the name of the new branch, then just enter git pull. This will pull down all new branches and show you a list of the options.\nPilot and Control: If you haven’t already done so, open index.html in a browser to see what it looks like.\nGood! Now let’s take a look at GitHub and find the new open-mic branch.\nView Branches in GitHub Pilot and Control: To view the available branches on GitHub, select Branches from the navigation section just below the repository title.\nGreat progress! Now let’s figure out how to merge two branches in GitHub.\nStep 7: Open a Pull Request in GitHub Pilot: In your browser, go to the GitHub project and click on Branches and make sure you see the new branch name, open-mic.\nPilot: Click New Pull Request to ask Control to review your changes in the open-mic branch before merging them into main. Add some text in the description box to let Control know what you did and why.\nNote The branch selected in the base dropdown is the one you want to merge into, while the selected branch in the compare dropdown is the one you want to merge from.\nThis is what an opened pull request looks like:\nStep 8: Merge the Pull Request Control: Go to your repo in GitHub. Click on Pull Requests. Next, click on the title for the one and only PR.\nControl: The page that opens shows the history of all the commits made to the open-mic branch. When ready, click the green Merge Pull Request button, followed by Confirm Merge.\nUpon a successful merge, you should see a screen similar to the following:\nPilot and Control: The changes from open-mic are now in the main branch, but only in the remote repository on GitHub. You will need to pull the updates to your main for them to be present locally.\n$ git checkout main $ git pull origin main Git is able to merge these files on its own.\nNotice that the changes made in the open-mic branch now appear in main. Refreshing the tab in your browser should display the styled webpage!\nTip When you save a change to our HTML code, clicking the Refresh button in the browser displays the new layout. However, this doesn’t always work for changes made to the CSS. Browsers often save the stylesheet in memory to speed up reloading. If the browser continues to use the old code, you won’t see your new styles.\nTo fix this, force a clean reload of the page. For most browsers (like Firefox, Chrome, and Safari), hold down the Shift key and click Refresh. For Microsoft Edge, use the Control key plus Refresh.\nResources Before moving on to the bonus studio content, here are some external resources for using Git and GitHub.\nGit Branching - Basic Branching and Merging Adding Another Person To Your Repository Resolving Conflicts In the Command Line Bonus: Merge Conflicts! When teaming up on a project, things won’t always go smoothly. It’s common for two people to change the same line(s) of code on their separate machines. This prevents Git from being able to automatically finish a merge.\nMerge conflicts often occur, and they are not a big deal. To see how to handle this situation, you will intentionally create a merge conflict and then resolve it.\nPilot: In VS Code, switch back to the main branch.\nPilot: Change the style.css file. The webpage is looking pretty plain, so spice up the body style rule to look like this:\n1 2 3 4 5 6 7 body { color: white; background-color: #333; font-size: 150%; font-family: 'Satisfy', cursive; margin: 5em 25%; } The result:\nPilot: Save and commit the changes, then push them up to GitHub.\n$ git push origin main Meanwhile…\nControl: In VS Code, switch back to the main branch.\nControl: In your local style.css file, change the body rule to look like this:\n1 2 3 4 5 6 7 8 9 body { color: white; background-color: black; font-family: 'Sacramento', cursive; font-size: 32px; margin-top: 5%; margin-left: 20%; margin-right: 20%; } Control: Save and commit your changes to main.\nResolve the Merge Conflicts Control: Try to push your changes up to GitHub. You should get an error message. How exciting!\n$ git push origin main To git@github.com:username/communication-log.git ! [rejected] main -\u003e main (fetch first) error: failed to push some refs to 'git@github.com:username/communication-log.git' hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref. You may want to first integrate the remote changes hint: (e.g., 'git pull ...') before pushing again. There's a lot of text in the message. However, the main idea is clear: ``Updates were rejected because the remote contains work that you do not have locally.`` Somebody (Pilot, in this case), pushed changes to main, and you don’t have those commits on your computer. To fix this, begin by pulling those changes down from GitHub:\n$ git pull From github.com:username/communication-log 7d7e42e..0c21659 main -\u003e origin/main Auto-merging style.css CONFLICT (content): Merge conflict in style.css Automatic merge failed; fix conflicts and then commit the result. Since Pilot and Control both made changes to the same lines of code, Git cannot automatically merge the changes.\nControl: The specific locations where Git could not automatically merge files are indicated by lines that begin with CONFLICT. You will have to edit these files yourself to incorporate Pilot’s changes. Open the style.css file.\nAt the top and bottom, there is some code that could be merged without issue. Between the \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD and ======= symbols is the version of the code that exists locally. These are your changes.\nBetween ======= and \u003e\u003e\u003e\u003e\u003e\u003e\u003e a48e8a75... are the changes that Pilot made (the hash a48e8a75... will be unique to the commit, so you’ll see something slightly different on your screen).\nControl: To fix the conflicts, you need to tell Git what code to keep. You can use the provided buttons to either Accept Current Change (which is your code), Accept Incoming Change (from Pilot), or you can update the highlighted statements directly in the editor. We’ll let you decide how to handle this!\nControl: Save, commit, and push your changes. You should see no error message this time.\nPilot: Pull down the new updates. Notice that since Control dealt with the merge conflicts, you don’t have to!\nCongratulations! You just fixed your first merge conflict!\nMore Merge Conflicts! Turn the tables so Pilot can practice resolving a merge conflict.\nControl and Pilot: Decide which file and lines of code you will both change. Make different changes in those places. Control: Save, commit, and push your changes up to GitHub. Pilot: Try to pull down the changes, and notice that there are merge conflicts. Resolve them, then save, commit, and push the result. Control: Pull down the final, resolved code. Avoiding Conflicts Git happens. Merge conflicts will pop up, but they’re not a big deal. Still, the best way to handle them is to try to avoid them in the first place. Here are some tips:\nDeal with any uncommitted work before trying to merge. Partners should avoid working on the same file at the same time. Try to avoid adding code directly into main. New ideas should be explored in a different branch first and then merged. ",
    "description": "",
    "tags": null,
    "title": "Task 2: Time to Communicate!",
    "uri": "/git/studio/studio-part2/index.html"
  },
  {
    "content": "In this course, we will mostly use Firefox as our browser. If you haven’t installed Firefox, you can get it from Mozilla . Other browsers have good developer tools as well (Chrome, in particular) but we’re going to stick with Firefox. If you are more comfortable with another browser, you’ll find that most of the developer tools functionality exists in other browsers’ dev tools as well.\nComplete the HTML file for this simple web page. Open up javascript-projects/html/exercises. Add lines to index.html that do the following.\nAdd a h1 to the page that says “Why I Love Web Development”.\nCheck Your Solution \u003ch1\u003eWhy I Love Web Development\u003c/h1\u003e Add an ordered list to the page with 3 reasons why you love web development.\nAdd a link to this page below your list.\nCheck Your Solution \u003ca href=\"https://www.webelements.com/\" target=\"_blank\"\u003eWebElements\u003c/a\u003e Add a paragraph about the website you want to make with your web development superpowers!\nThis code block gives you a rough outline for how it might look.\n1 2 3 4 5 6 7 8 9 10 11 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- h1 goes here ---\u003e \u003c!-- ol goes here ---\u003e \u003c!-- a goes here ---\u003e \u003c!-- p goes here ---\u003e \u003c/body\u003e \u003c/html\u003e To see your work, open up index.html with Firefox.\n",
    "description": "",
    "tags": null,
    "title": "Exercises: HTML",
    "uri": "/html/exercises/index.html"
  },
  {
    "content": "Programmers should follow certain rules about how to structure an HTML file. The rules about how to structure an HTML file and the tags used to lay out this structure are vital to the browser being able to render the page.\nStructure Rules When it comes to laying out the overarching structure of an HTML file, a programmer should follow 5 rules:\nEvery HTML file needs a DOCTYPE tag, specifying the HTML version used. When using the current version of HTML, the DOCTYPE tag is simple to remember as it is: \u003c!DOCTYPE html\u003e. This is one of few tags that does not require a closing tag. The \u003chtml\u003e tag denotes the beginning and end of the HTML the programmer has written. The \u003chead\u003e tag contains data about the web page. The \u003cbody\u003e tag contains everything that appears on the page of the document. The \u003ctitle\u003e tag goes in the \u003chead\u003e of the document and browsers require it. It gives the title of the web page that appears in the tab. Here is an example of the structure of an HTML page based off of these rules:\n1 2 3 4 5 6 7 8 9 10 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eMy Web Page\u003c/title\u003e content \u003c/head\u003e \u003cbody\u003e content \u003c/body\u003e \u003c/html\u003e Document Head So other than the title, what goes in the head of an HTML file? The head includes links to other files and other data about the document. Browsers do not display the content in the head.\nNote The head can also include some styling to make the page beautiful. How to do that is covered in the next chapter on CSS.\nDocument Body After the programmer has written the head of the document, it is time to move on to the body of the document. The body of the document contains the content that appears on the web page. Within the body tags, programmers add images, text, and even code samples with different HTML tags. Content outside of the body will not appear on the page.\nTo make HTML more readable to other programmers, programmers write comments in HTML. When adding a comment, the programmer uses \u003c!-- to indicate the start and --\u003e to end the comment, like so:\n1 2 3 \u003cbody\u003e \u003c!-- This is an important comment --\u003e \u003c/body\u003e Note Spacing and tabs helps many programmers read through theirs and their colleagues’ code. Be aware that doing so in HTML can affect how the browser renders the page in rare instances.\nCheck Your Understanding Question Which HTML tag does not require a closing tag?\ntitle body head DOCTYPE ",
    "description": "",
    "tags": null,
    "title": "HTML Structure",
    "uri": "/html/reading/structure/index.html"
  },
  {
    "content": "Creating a Class Just like the function keyword defines a new function, the keyword for defining a new class is class. By convention, class names start with capital letters to distinguish them from JavaScript function and variable names (e.g. MyClass vs. myFunction).\nRemember that classes are blueprints for building multiple objects of the same type. The general format for declaring a class is:\n1 2 3 4 5 6 class ClassName { constructor(parameters) { //assign properties } //define methods } Note the keyword constructor. This is a special method for creating objects of the same type, and it assigns the key/value pairs. Parameters are passed into constructor rather than the class declaration.\nAssigning Properties Let’s set up an Astronaut class to help us store data about our animal crew. Each animal has a name, age, and mass, and we assign these properties in constructor as follows:\n1 2 3 4 5 6 7 class Astronaut { constructor(name, age, mass) { this.name = name; this.age = age; this.mass = mass; } } The this keyword defines a key/value pair, where the text attached to this becomes the key, and the value follows the equal sign (this.key = value).\nconstructor uses the three this statements (this.name = name, etc.) to achieve the same result as the object declaration let objectName = {name: someString, age: someNumber, mass: someMass}. Each time the Astronaut class is called, constructor builds an object with the SAME set of keys, but it assigns different values to the keys based on the arguments.\nNote Each class requires one constructor. Including more than one constructor results in a syntax error. If constructor is left out of a class declaration, JavaScript adds an empty constructor () {} automatically.\nCreating a New Class Object To create an object from a class, we use the keyword new. The syntax is:\nlet objectName = new ClassName(arguments); new creates an instance of the class, which means that the object generated shares the same set of keys as every other object made from the class. However, the values assigned to each key may differ.\nExample Let’s create objects for two of our crew members: Fox and Hippo.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Astronaut { constructor(name, age, mass){ this.name = name; this.age = age; this.mass = mass; } } let fox = new Astronaut('Fox', 7, 12); let hippo = new Astronaut('Hippo', 25, 1500); console.log(typeof hippo, typeof fox); console.log(hippo, fox); Console Output\nobject object Astronaut { name: 'Hippo', age: 25, mass: 1500 } Astronaut { name: 'Fox', age: 7, mass: 12 } In lines 9 and 10, we call the Astronaut class twice and pass in different sets of arguments, creating the fox and hippo objects.\nThe output of line 14 shows that fox and hippo are both the same type of object (Astronaut). The two share the same keys, but they have different values assigned to those keys.\nNote Two objects created from the same class are NOT equal, even if the keys within the objects all have the same values. The reason behind this was discussed previously.\nAfter creating an Astronaut object, we can access, modify, or add new key/value pairs as described in the Objects and Math chapter.\nExample Play around with modifying and adding properties inside and outside of the class declaration. Open up ClassExamples01.js in javascript-projects/classes/chapter-examples to get started.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Astronaut { constructor(name, age, mass){ this.name = name; this.age = age; this.mass = mass; } } let fox = new Astronaut('Fox', 7, 12); console.log(fox); console.log(fox.age, fox.color); fox.age = 9; fox.color = 'red'; console.log(fox); console.log(fox.age, fox.color); Console Output\nAstronaut { name: 'Fox', age: 7, mass: 12 } 7 undefined Astronaut { name: 'Fox', age: 9, mass: 12, color: 'red' } 9 'red' Attempting to print fox.color in line 12 returns undefined, since that property is not included in the Astronaut class. Line 15 adds the color property to the fox object, but this change will not affect any other objects created with Astronaut.\nSetting Default Values What happens if we create a new Astronaut without passing in all of the required arguments?\nExample Open ClassExamples02.js in javascript-projects/classes/chapter-examples to explore what happens when we are missing some of the required arguments.\n1 2 3 4 5 6 7 8 9 10 11 class Astronaut { constructor(name, age, mass){ this.name = name; this.age = age; this.mass = mass; } } let tortoise = new Astronaut('Speedy', 120); console.log(tortoise.name, tortoise.age, tortoise.mass); To avoid issues with missing arguments, we can set a default value for a parameter as follows:\n1 2 3 4 5 6 7 class Astronaut { constructor(name, age, mass = 54){ this.name = name; this.age = age; this.mass = mass; } } Now if we call Astronaut but do not specify a mass value, the constructor automatically assigns a value of 54. If an argument is included for mass, then the default value is ignored.\nTRY IT! Return to the code in the example above and set default values for one or more of the parameters.\nCheck Your Understanding The questions below refer to a class called Car.\n1 2 3 4 5 6 7 8 9 class Car { constructor(make, model, year, color, mpg){ this.make = make; this.model = model; this.year = year; this.color = color; this.mpg = mpg; } } Question If we call the class with let myCar = new Car('Chevy', 'Astro', 1985, 'gray', 20), what is output by console.log(typeof myCar.year)?\nobject string function number property Question If we call the class with let myCar = new Car('Tesla', 'Model S', 2019), what is output by console.log(myCar)?\nCar {make: ‘Tesla’, model: ‘Model S’, year: 2019, color: undefined, mpg: undefined } Car {make: ‘Tesla’, model: ‘Model S’, year: 2019, color: ‘’, mpg: ’’ } Car {make: ‘Tesla’, model: ‘Model S’, year: 2019 } ",
    "description": "",
    "tags": null,
    "title": "Declaring and Calling a Class",
    "uri": "/classes/reading/declaring-a-class/index.html"
  },
  {
    "content": "Welcome to the space station! It is your first day onboard and as the newest and most junior member of the crew, you have been asked to organize the library of manuals and fun novels for the crew to read.\nHeadquarters have asked that you store the following information about each book.\nThe title The author The copyright date The ISBN The number of pages The number of times the book has been checked out. Whether the book has been discarded. Headquarters also needs you to track certain actions that you must perform when books get out of date. First, for a manual, the book must be thrown out if it is over 5 years old. Second, for a novel, the book should be thrown out if it has been checked out over 100 times.\nOpen ClassExercises.js in javascript-projects/classes/exercises to get started.\nConstruct three classes that hold the information needed by headquarters as properties. One class should be a Book class and two child classes of the Book class called Manual and Novel. Each class will contain two methods. One will be a constructor. The other one will either be in charge of disposal of the book or updating the property related to the number of times a book has been checked out. Hint: This means you need to read through the requirements for the problem and decide what should belong to Book and what should belong to the Novel and Manual classes. Check your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Book { constructor(title, author, copyright, isbn, pages, timesCheckedOut, discarded){ this.title = title; this.author = author; this.copyright = copyright; this.isbn = isbn; this.pages = pages; this.timesCheckedOut = timesCheckedOut; this.discarded = discarded; } checkout(uses=1) { this.timesCheckedOut += uses; } } class Manual extends Book { constructor(title, author, copyright, isbn, pages, timesCheckedOut, discarded){ super(title, author, copyright, isbn, pages, timesCheckedOut, discarded); } dispose(currentYear){ if (currentYear-this.copyright \u003e 5) { this.discarded = 'Yes'; } } } class Novel extends Book { constructor(title, author, copyright, isbn, pages, timesCheckedOut, discarded){ super(title, author, copyright, isbn, pages, timesCheckedOut, discarded); } dispose(){ if (this.timesCheckedOut \u003e 100) { this.discarded = 'Yes'; } } } Declare an object of the Novel class for the following tome from the library: Variable Value Title Pride and Prejudice Author Jane Austen Copyright date 1813 ISBN 1111111111111 Number of pages 432 Number of times the book has been checked out 32 Whether the book has been discarded No Declare an object of the Manual class for the following tome from the library: Variable Value Title Top Secret Shuttle Building Manual Author Redacted Copyright date 2013 ISBN 0000000000000 Number of pages 1147 Number of times the book has been checked out 1 Whether the book has been discarded No Check your solution let makingTheShip = new Manual('Top Secret Shuttle Building Manual', 'Redacted', 2013, '0000000000000', 1147, 1, 'No'); One of the above books needs to be discarded. Call the appropriate method for that book to update the property. That way the crew can throw it into empty space to become debris.\nThe other book has been checked out 5 times since you first created the object. Call the appropriate method to update the number of times the book has been checked out.\nCheck your solution goodRead.checkout(5); goodRead.dispose(); ",
    "description": "",
    "tags": null,
    "title": "Exercises: Classes",
    "uri": "/classes/exercises/index.html"
  },
  {
    "content": "Upon completing all the content in this chapter, you are ready to learn about exceptions. If you would like to learn more about JavaScript data types before you continue on to the next chapter, here are a few of our favorite resources.\nMDN Documentation W3Schools ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/more-on-types/next-steps/index.html"
  },
  {
    "content": "In many of your previous coding tasks, you had to verify that your code worked before moving to the next step. This often required you to add console.log() statements to your code to check the value stored in a variable or returned from a function. This approach finds and fixes syntax, reference, or logic errors AFTER you write your code.\nIn this chapter, you learned how to use unit testing to solve coding errors. Even better, you learned how to PREVENT mistakes by writing test cases before completing the code. The exercises below offer practice with using tests to find bugs, and the studio asks you to implement TDD.\nFor the exercises, open javascript-projects/unit-testing/exercises to find the files you will need to get started.\nAutomatic Testing to Find Errors Let’s begin with the following code in checkFive.js:\n1 2 3 4 5 6 7 8 9 10 11 12 function checkFive(num){ let result = ''; if (num \u003c 5){ result = num + \" is less than 5.\"; } else if (num === 5){ result = num + \" is equal to 5.\"; } else { result = num + \" is greater than 5.\"; } return result; } The function checks to see if a number is greater than, less than, or equal to 5. We do not really need a function to do this, but it provides good practice for writing test cases.\nNote that the exercises directory also contains a tests directory for us.\nWe need to add a few lines to checkFive.js and checkFive.test.js to get them to talk to each other.\ncheckFive.test.js needs to access checkFive.js. Add a require statement to accomplish this.\nMake the checkFive function available to the spec file, by using module.exports.\nCheck your solution checkFive.test.js:\nconst test = require('../checkFive.js'); Set up your first test for the checkFive function. In the checkFive.test.js file, add a describe function with one test clause:\n1 2 3 4 5 6 7 8 9 const checkFive = require('../checkFive.js'); describe(\"checkFive\", function(){ test(\"Descriptive feedback...\", function() { //code here... }); }); Now write a test to see if checkFive produces the correct output when passed a number less than 5.\nFirst, replace Descriptive feedback... with a DETAILED message. This is the text that the user will see if the test fails. Do NOT skimp on this. Refer back to Specifications and Expectations section to review best practices.\nDefine the variable output, and initialize it by passing a value of 2 to checkFive.\n1 2 3 4 5 6 7 8 9 const checkFive = require('../checkFive.js'); describe(\"checkFive\", function(){ test(\"Descriptive feedback...\", function(){ let output = checkFive(2); }); }); Now use the expect function to check the result:\n1 2 3 4 5 6 7 8 9 10 const checkFive = require('../checkFive.js'); describe(\"checkFive\", function(){ test(\"Descriptive feedback...\", function(){ let output = checkFive(2); expect(output).toEqual(\"2 is less than 5.\"); }); }); Run the test script and examine the results. The test should pass.\nNow change line 3 in checkFive.js to if (num \u003e 5) and rerun the test.\nChange line 3 back.\nNote We do NOT need to check every possible value that is less than 5. Testing a single example is sufficient to check that part of the function.\nCheck your solution checkFive.test.js after writing a declarative test name:\ntest(\"returns 'num is less than 5' when num \u003c 5.\", function() { // test code // }); checkFive.test.js uses expect:\nexpect(output).toBe(\"2 is less than 5.\"); Change checkFive.js to see the test fail:\nif (num \u003e 5) { // sourcecode // } Add two more test clauses inside describe—one to test what happens when checkFive is passed a value greater than 5, and the other to test when the value equals 5.\nTry One on Your Own Time for Rock, Paper, Scissors! The function in RPS.js takes the choices ('rock', 'paper', or 'scissors') of two players as its parameters. It then decides which player won the match and returns a string.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function whoWon(player1,player2){ if (player1 === player2){ return 'TIE!'; } if (player1 === 'rock' \u0026\u0026 player2 === 'paper'){ return 'Player 2 wins!'; } if (player1 === 'paper' \u0026\u0026 player2 === 'scissors'){ return 'Player 2 wins!'; } if (player1 === 'scissors' \u0026\u0026 player2 === 'rock '){ return 'Player 2 wins!'; } return 'Player 1 wins!'; } Set up the RPS.js and RPS.spec.js files to talk to each other.\nCheck your solution RPS.js:\nmodule.exports = { whoWon: whoWon }; RPS.spec.js:\nconst test = require('../RPS.js'); Write a test in RPS.test.js to check if whoWon behaves correctly when the players tie (both choose the same option). Click “Run” and examine the output. SPOILER ALERT: The code for checking ties is correct in whoWon, so the test should pass. If it does not, modify your test statement.\nWrite tests (one at a time) for each of the remaining cases. Run the tests after each addition, and modify the code as needed. There is one mistake in whoWon. You might spot it on your own, but try to use automated testing to identify and fix it.\nCheck your solution Here are two sample tests:\ntest(\"returns 'Player 2 wins!' if P1 = rock \u0026 P2 = paper\", function(){ let output = test.whoWon('rock','paper'); expect(output).toBe(\"Player 2 wins!\"); }); test(\"returns 'Player 2 wins!' if P1 = paper \u0026 P2 = scissors\", function(){ let output = test.whoWon('paper','scissors'); expect(output).toBe(\"Player 2 wins!\"); }); Bonus Mission What if something OTHER than 'rock', 'paper', or 'scissors' is passed into the whoWon function? Modify the code to deal with the possibility.\nDon’t forget to add another test clause in RPS.test.js to test for this case.\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Unit Testing",
    "uri": "/unit-testing/exercises/index.html"
  },
  {
    "content": "In order to unit test our code, we need to use a module. Such a module is called a unit-testing framework, and there are many to choose from .\nWe will use Jest , a popular JavaScript testing framework. We are using Jest because of it’s popularity in industry, excellent developer support, and it is used for testing React applications, which we will learn more about in later lessons.\nUsing Jest Jest is an npm module that can be installed and used in a manner similar to readline-sync. Jest will require that we first install it. We then will have to configure everything to make sure that Jest can run the tests in our project.\nA project using Jest has several components:\nA folder containing our tests. This folder is commonly called tests. Test files within this folder. For example, if we wanted to test a function called hello, we might have a test file called hello.test.js. package.json with Jest listed under dependencies or devDependencies. Occasionally, you will find an extra configuration file called jest.config.js. This is used in cases where we want to use a different configuration from Jest’s default options. Warning Jest can be set up and used in many different ways. If you are looking for an answer on the Internet (like on Stack Overflow or in the documentation) you will see widely varying usages of Jest that may not seem to apply to your situation. For example, maybe another developer on Stack Overflow stores their tests in a folder called spec or _tests_.\nHello, Jest! Let’s build a “Hello, World!” Jest project, to get familiar with the basic components. Open the hello-jest directory in the chapter-examples folder in javascript-projects/unit-testing.\nWe will walk you through the steps needed to get a simple Jest project up and running. Code along with us throughout this section. Run npm install in your terminal to make sure that your project is ready to run when you want to see how the code works.\nhello.js Open hello.js and review the code inside:\n1 2 3 4 5 6 function hello(name) { if (name === undefined) name = \"World\"; return \"Hello, \" + name + \"!\"; } The hello function takes a single argument representing a person’s name and returns a string greeting that person. If the function is called without an argument, the function returns \"Hello, World!\".\nTo use this function outside hello.js we must export it at the bottom of the file.\nmodule.exports = hello; tests/hello.test.js Now that we have a function to test, let’s write some test code. Add a folder named tests to the project. Within the folder, create the file hello.test.js. It is conventional to put tests for fileName.js in tests/fileName.test.js. This makes it easy to find the tests associated with a given file.\nAt the top of the hello.test.js file, review the import of your function from hello.js:\n1 const hello = require('../hello.js'); Below that, there is a call to the function describe, passing in the name of the function we want to test along with an empty anonymous function. describe is a Jest function that is used to define a test suite, a group of related tests. These related tests are placed within the anonymous function to be run together as a suite.\ndescribe(\"hello\", function(){ }); Specifications and Expectations There are two cases we want to test:\nThe function is called with a string argument. In this case, a customized greeting should be returned. The function is called with no argument. In this case, the general greeting should be returned. Within describe’s function argument, review the test for case 1:\n1 2 3 test(\"should return custom message when name is specified\", function() { expect(hello(\"Jest\")).toBe(\"Hello, Jest!\"); }); The test function is part of the Jest framework as well. Calling test creates a specification, or spec, which is a description of expected behavior. The first argument to test is a string describing the desired behavior. This string serves to document the test and is also used in reporting test results. These strings will usually begin with “should”, followed by a desired action.\nThe second argument to test is called a function. This function contains the test code itself, which takes the form of an expectation. An expectation is a declaration of desired behavior in code. Let’s examine the contents of the arrow function:\nexpect(hello(\"Jest\")).toBe(\"Hello, Jest!\"); Calling expect(x).toBe(y) declares that we expect x to equal y. As you get started with unit testing, nearly all of your tests will take this form. The argument to expect() is a call to the function hello(). The argument to toBe() is the expected output from that function call. toBe() is a specialized method called a matcher. Matchers in Jest compare the value passed to the value passed to expect(). These comparisons are not just limited to checking if the two values are equal. Jest has a wide variety of matchers built-in and developers can also build custom matchers. For a full list of the provided matchers, check out the Jest documentation .\nIf the two arguments are indeed equal, the test will pass. Otherwise, the test will fail. In this case, we are declaring that we expect hello(\"Jest\") to return the value \"Hello, Jest!\".\nLet’s review the final spec for testing our other case.\ntest(\"should return a general greeting when name is not specified\", function(){ expect(hello()).toBe(\"Hello, World!\"); }); This spec declares that calling hello() should return \"Hello, World!\".\nTest Reporting This is a fully-functioning test file. Run npm test in your terminal to run your tests. If all goes well, the output will look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u003e unit-testing@1.0.0 test \u003e jest PASS tests/hello.test.js hello world test ✓ should return a custom message when name is specified (2 ms) ✓ should return a general greeting when name is not specified Test Suites: 1 passed, 1 total Tests: 2 passed, 2 total Snapshots: 0 total Time: 0.69 s, estimated 1 s Ran all test suites. The most important line in the output is this one:\n2 passed, 2 total It tells us that Jest found 2 test specifications, and that 0 of the specs failed. If our test had failed, then the line would have read:\n0 passed, 2 total In other words, our tests passed!\nLet’s see what a test failure looks like. Go back to hello.js and remove the \"!\" from the return statement:\nreturn \"Hello, \" + name; Run the tests again. This time, the output looks quite different as we intentionally made tests fail. The failing tests appear below the list of tests run for this test suite. This describes exactly what went wrong. For the first test, the expected value was 'Hello, Jest!' but the received value 'Hello, Jest'. Notice that the failure description is the result of joining the two string arguments from describe and test. This is why we intentionally defined those strings the way we did.\nPut hello.js back as it was and run the tests again to make sure it works.\nCheck Your Understanding Question Examine the function below, which checks if two strings match:\n1 2 3 4 5 6 7 function doStringsMatch(string1, string2){ if (string1 === string2) { return 'Strings match!'; } else { return 'No match!'; } } Which of the following tests checks if the function properly handles case-sensitive answers.\nexpect(doStringsMatch('Flower', 'Flower')).toBe('Strings match!'); expect(doStringsMatch('Flower', 'flower')).toBe('No match!'); expect(doStringsMatch('Flower', 'plant')).toBe('No match!'); expect(doStringsMatch('Flower', '')).toBe('No match!'); ",
    "description": "",
    "tags": null,
    "title": "Hello, Jest!",
    "uri": "/unit-testing/reading/hello-jest/index.html"
  },
  {
    "content": "At our space base, it is a historic day! Five non-human animals are ready to run a space mission without our assistance! For the exercises, you will use the same five animal objects throughout.\nOpen up ObjectExercises.js in javascript-projects/objects-and-math/exercises to find all the starter code you will need for these exercises.\nPart 1: Create More Objects Based on the two object literals provided in the starter code, create new object literals for three more animals:\nName Species Mass (kg) Age (years) Brad Chimpanzee 11 6 Leroy Beagle 14 5 Almina Tardigrade 0.0000000001 1 Add a New Property For each animal, add a property called astronautID. Each astronautID should be assigned a number between 1 and 10 (including 10). However, no crew members should have the same ID.\nAdd a Method Add a move method to each animal object. The move method will select a random number of steps from 0 to 10 for the animal to take. The number can be 0 as well as 10.\nStore the Objects Create a crew array to store all of the animal objects.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 let superChimpOne = { name: \"Chad\", species: \"Chimpanzee\", mass: 9, age: 6, astronautID: 1, move: function () {return Math.floor(Math.random()*11)} }; let salamander = { name: \"Lacey\", species: \"Axolotl Salamander\", mass: 0.1, age: 5, astronautID: 2, move: function () {return Math.floor(Math.random()*11)} }; let superChimpTwo = { name: \"Brad\", species: \"Chimpanzee\", mass: 11, age: 6, astronautID: 3, move: function () {return Math.floor(Math.random()*11)} }; let dog = { name: \"Leroy\", species: \"Beagle\", mass: 14, age: 5, astronautID: 4, move: function () {return Math.floor(Math.random()*11)} }; let waterBear = { name: \"Almina\", species: \"Tardigrade\", mass: 0.0000000001, age: 1, astronautID: 5, move: function () {return Math.floor(Math.random()*11)} }; let crew = [superChimpOne, superChimpTwo, salamander, dog, waterBear]; let crew = [superChimpOne, superChimpTwo, salamander, dog, waterBear]; Part 2: Crew Reports Upper management at the space base wants us to report all of the relevant information about the animal astronauts.\nDefine a crewReports function to accomplish this. When passed one of the animal objects, the function returns a template literal with the following string: '____ is a ____. They are ____ years old and ____ kilograms. Their ID is ____.'\nFill in the blanks with the name, species, age, mass, and ID for the selected animal.\nPart 3: Crew Fitness Before these animal astronauts can get ready for launch, they need to take a physical fitness test. Define a fitnessTest function that takes an array as a parameter.\nWithin the function, race the five animals together by using the move method. An animal is done with the race when they reach 20 steps or greater. Store the result as a string: '____ took ____ turns to take 20 steps.' Fill in the blanks with the animal’s name and race result. Create a new array to store how many turns it takes each animal to complete the race.\nReturn the array from the function, then print the results to the console (one animal per line).\nHINT: There are a lot of different ways to approach this problem. One way that works well is to see how many iterations of the move method it will take for each animal to reach 20 steps.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function fitnessTest(candidates){ let results = [], numSteps, turns; for (let i = 0; i \u003c candidates.length; i++){ numSteps = 0; turns = 0; while(numSteps \u003c 20){ numSteps += candidates[i].move(); turns++; } results.push(`${candidates[i].name} took ${turns} turns to take 20 steps.`); } return results; } ",
    "description": "",
    "tags": null,
    "title": "Exercises: Objects and Math",
    "uri": "/objects-and-math/exercises/index.html"
  },
  {
    "content": "Accessing Properties When using objects, programmers oftentimes want to retrieve or change the value of one of the properties. To access the value of a property, you will need the object’s name and the key of the property.\nProgrammers have two ways to access the value of property:\nBracket syntax Dot notation Bracket Syntax To access a property with bracket syntax, the code looks like: object[\"key\"].\nDot Notation To access a property with dot notation, the code looks like: object.key. Notice that the key is no longer surrounded by quotes. However, keys are still strings.\nNote Recall, the only restraint in naming a key is that it has to be a valid JavaScript string. Since a key could potentially have a space in it, bracket syntax would be the only way to access the value in that property because of the quotes.\nExample 1 2 3 4 5 6 7 8 9 10 let tortoiseOne = { species: \"Galapagos Tortoise\", name: \"Pete\", weight: 919, age: 85, diet: [\"pumpkins\", \"lettuce\", \"cabbage\"] }; console.log(tortoiseOne[\"name\"]); console.log(tortoiseOne.name); Console Output\nPete Pete Modifying Properties A programmer can modify the value of a property by using either notation style.\nWarning Recall that mutability means that a data structure can be modified without making a copy of that structure. Objects are mutable data structures. When you change the value of a property, the original object is modified and a copy is NOT made.\nExample In our zoo software, we may want to update Pete’s weight as he has gained 10 lbs. We will use both bracket syntax and dot notation for our software, but that is not a requirement! Feel free to use whichever one suits your needs and is easiest for you and your colleagues to read.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let tortoiseOne = { species: \"Galapagos Tortoise\", name: \"Pete\", weight: 919, age: 85, diet: [\"pumpkins\", \"lettuce\", \"cabbage\"] }; console.log(tortoiseOne.weight); newWeight = tortoiseOne.weight + 10; tortoiseOne[\"weight\"] = newWeight; console.log(tortoiseOne[\"weight\"]); Console Output\n919 929 Add New Key/Value Pairs After declaring and initializing an object, we can add new properties at any time by using bracket syntax:\nobjectName[\"new-key\"] = propertyValue; Example 1 2 3 4 5 6 7 8 9 10 11 12 13 let tortoiseTwo = { species: \"Galapagos Tortoise\", name: \"Pete\", weight: 919 }; console.log(tortoiseTwo); tortoiseTwo[\"age\"] = 120; tortoiseTwo[\"speed\"] = 'Faster than the hare.' console.log(tortoiseTwo); console.log(tortoiseTwo.age); Console Output\n{ species: 'Galapagos Tortoise', name: 'Pete', weight: 919 } { species: 'Galapagos Tortoise', name: 'Pete', weight: 919, age: 120, speed: 'Faster than the hare.' } 120 Check Your Understanding All of the questions below refer to an object called giraffe.\n1 2 3 4 5 6 7 let giraffe = { species: \"Reticulated Giraffe\", name: \"Cynthia\", weight: 1500, age: 15, diet: \"leaves\" }; Question We want to add a method after the diet property for easily increasing Cynthia’s age on her birthday. Which of the following is missing from our method? You can select MORE than one.\nbirthday: function () {age = age + 1;}\nreturn this diet a comma Question Could we use bracket syntax, dot notation, or both to access the properties of giraffe?\n",
    "description": "",
    "tags": null,
    "title": "Working with Objects",
    "uri": "/objects-and-math/reading/modifying-objects/index.html"
  },
  {
    "content": " Practice makes better. Repetition is a good thing. Repetition is a good thing. Repetition is a good thing. Repetition is a good thing.\nWAIT!!! Why type “Repetition is a good thing,” four times when we can code a better result? How about printing the phrase 100 times instead?\n1 2 3 for (let i = 0; i \u003c 100; i++){ console.log(\"Repetition is a good thing.\"); } Loops simplify repetitive tasks!\nfor Practice Open up for-Loop-Exercises.js in loops/exercises in javascript-projects. This is the file you will use to test your skills with for loops.\nConstruct for loops that accomplish the following tasks:\nPrint the numbers 0 - 20, one number per line. Print only the ODD values from 3 - 29, one number per line. Print the EVEN numbers 12 down to -14 in descending order, one number per line. Print the numbers 50 down to 20 in descending order, but only if the numbers are multiples of 3. Check your solution Print the numbers 0 - 20, one number per line. for (let i = 0; i \u003c= 20; i++) { console.log(i); } Print the EVEN numbers 12 down to -14 in descending order, one number per line. for (let i = 12; i \u003e= -14; i-=2) { console.log(i); } Initialize two variables to hold the string 'LaunchCode' and the array [1, 5, 'LC101', 'blue', 42], then construct for loops to accomplish the following tasks:\nPrint each element of the array to a new line. Print each character of the string—in reverse order—to a new line. Check your solution Print each element of the array to a new line. for (let i = 0; i \u003c arr.length; i++) { console.log(arr[i]); } Construct a for loop that sorts the array [2, 3, 13, 18, -5, 38, -10, 11, 0, 104] into two new arrays:\nDefine an empty evens array to hold the even numbers and an odds array for the odd numbers. In the loop, determine if each number is even or odd, then put that number into evens or odds, as appropriate. Print the arrays to confirm the results. Print evens first. Example: console.log(evens); Check your solution Define an empty evens array to hold the even numbers and an odds array for the odd numbers. let otherArr = [2, 3, 13, 18, -5, 38, -10, 11, 0, 104]; let evens = [], odds = []; Print the arrays to confirm the results. Print evens first. Example: console.log(evens); console.log(evens); console.log(odds); while Practice To practice with while loops, open up while-Loop-Exercises.js in loops/exercises in javascript-projects.\nDefine three variables for the LaunchCode shuttle—one for the starting fuel level, another for the number of astronauts aboard, and the third for the altitude the shuttle reaches.\nConstruct while loops to do the following:\nPrompt the user to enter the starting fuel level. The loop should continue until the user enters a positive value greater than 5000 but less than 30000. Use a second loop to query the user for the number of astronauts (up to a maximum of 7). Validate the entry by having the loop continue until the user enters an integer from 1 - 7. Use a final loop to monitor the fuel status and the altitude of the shuttle. Each iteration, decrease the fuel level by 100 units for each astronaut aboard. Also, increase the altitude by 50 kilometers. (Hint: The loop should end when there is not enough fuel to boost the crew another 50 km, so the fuel level might not reach 0). Check your solution Prompt the user to enter the starting fuel level. The loop should continue until the user enters a positive value greater than 5000 but less than 30000. const input = require('readline-sync'); let fuelLevel = 0, numAstronauts = 0, altitude = 0; while (fuelLevel \u003c= 5000 || fuelLevel \u003e 30000 || isNaN(fuelLevel)) { fuelLevel = input.question(\"Enter the starting fuel level: \"); } Use a final loop to monitor the fuel status and the altitude of the shuttle. Each iteration, decrease the fuel level by 100 units for each astronaut aboard. Also, increase the altitude by 50 kilometers. (Hint: The loop should end when there is not enough fuel to boost the crew another 50 km, so the fuel level might not reach 0). while (fuelLevel-100*numAstronauts \u003e= 0) { altitude += 50; fuelLevel -= 100*numAstronauts; } After all the loops complete, output the result with the phrase, The shuttle gained an altitude of ___ km.\nIf the altitude is 2000 km or higher, add “Orbit achieved!” Otherwise add, “Failed to reach orbit.” Check your solution If the altitude is 2000 km or higher, add “Orbit achieved!” let output = `The shuttle gained an altitude of ${altitude} km.`; if (altitude \u003e= 2000) { output += \" Orbit achieved!\"; } ",
    "description": "",
    "tags": null,
    "title": "Exercises: Loops",
    "uri": "/loops/exercises/index.html"
  },
  {
    "content": "The for loop is the first JavaScript tool for iteration that we will explore. A for loop is typically used for definite iteration. Definite iteration is the process of repeating a specific task with a specific data set. When a for loop begins it can usually be determined exactly how many times it will execute: once for each item in the data set.\nfor Loop Syntax We have already seen the basic syntax of a for loop.\n1 2 3 for (let i = 0; i \u003c 51; i++) { console.log(i); } This program prints the integers 0 through 50, one number per line. In the language of definite iteration, we say that the loop has a data set of 0-50, and its action is to print a value to the console.\nLet’s break down this syntax piece by piece, so we can begin to understand how for loops are structured.\nA for loop always contains the following components:\nfor (initial expression; loop condition; update expression) { loop body } Notice that in the first line, within parentheses, the components initial expression, loop condition, and update expression are separated by semicolons. Let’s look at these components in detail.\nThe statement let i = 0 is executed exactly once, at the beginning of loop execution. The variable i is the loop variable.\nThe boolean expression i \u003c 51 is the loop condition. This condition is evaluated before each loop iteration, or repetition.\nIf the condition is true then the loop executes again. If the condition is false then the loop ceases execution, and the program moves on to the code below the loop. The statement i++ is the update expression. This expression is executed at the end of each loop iteration.\nThe block of code surrounded with brackets ({ }) is the loop body. The body is executed once for each iteration of the loop.\nFlow of Execution of the for Loop In just a few lines of code, a for loop contains a lot of detailed logic, so let’s spend some time breaking down the flow of execution for the particular loop that we’ve been looking at.\n1 2 3 for (let i = 0; i \u003c 51; i++) { console.log(i); } Here is a step-by-step description of how this loop executes:\nWhen the program reaches the for loop, the initial expression let i = 0 is executed, declaring the variable i and initializing it to the value 0. The loop condition i \u003c 51 is evaluated, returning true because 0 is less than 51. Since the condition is true, the loop body executes, printing 0. After the execution of the loop body, the update expression i++ is executed, setting i to 1. This completes the first iteration of the loop. Steps 2 through 4 are repeated, using the new value of i. This continues until the loop condition evaluates to false in step 2, ending the loop. In this example, this occurs when i \u003c 51 is false for the first time. Since our update expression adds 1 after each iteration, this occurs when i is 51 (so 51 \u003c 51 is false). At that point, the loop body will have executed exactly 51 times, with i having the values 0…50. In general, we can visualize the flow of execution of a for loop as a flowchart.\n",
    "description": "",
    "tags": null,
    "title": "for Loops",
    "uri": "/loops/reading/for-loops/index.html"
  },
  {
    "content": "It is useful to distinguish between categories of errors in order to quickly identify and fix them. Each category manifests itself in a different way, and some strategies may be more useful for certain types of errors.\nStages of JavaScript Execution In order to understand programming errors it is useful to understand the two stages of code execution.\nParsing Before code can be run, it must first be parsed, or validated and prepared for execution. This is known as the parsing stage, and you can think of it like the pre-flight check for a plane or space craft.\nA lot of detailed, low-level tasks are carried out during this process, but it is enough for us to understand that parsing verifies the syntax and structure of the code.\nExecution Once our code has been parsed, its syntax has been verified and the program is ready to run. The execution stage is when the actions written into our program—printing to the console, prompting the user for input, making calculations, etc.—are actually carried out. You can think of this stage as the plane taking flight.\nSyntax Errors JavaScript can only execute a program if the program is syntactically correct. Syntax refers to the structure of a language (spoken, programming, or otherwise) and the rules about that structure. For example, in English, a sentence must begin with a capital letter and end with appropriate punctuation.\nA syntax error is a violation of the formal rules for a given language.\nExample this sentence contains a syntax error.\nSo does this one\nFor most readers of English, a few syntax errors are not a significant problem. Our brains are often flexible enough to determine the intended meaning of a sentence even if it contains one or more syntax errors.\nProgramming languages are not so forgiving. If there is a single syntax error anywhere in your program, JavaScript will display an error message and quit immediately. Since syntax is validated during the parsing stage, syntax errors are the first we see when running a program.\nDuring the first few weeks of your programming career, you will probably spend a lot of time tracking down syntax errors. However, as you gain experience, you will make fewer errors, and you will find your errors faster.\nTry It! Navigate to the chapter-examples directory in javascript-projects/errors-and-debugging. Open up SyntaxErrors.js in Visual Studio Code and first look at the code.\nFind the syntax errors in the program.\n1 2 let day = Wednesday; console.log(day; What syntax errors did you find? What was the specific error message provided by JavaScript in each case?\nRuntime Errors The second category consists of runtime errors, so called because they do not appear until you run the program. These errors are also called exceptions because they usually indicate that something exceptional (and bad) has happened.\nRuntime errors occur during the execution phase of a program, so we will only encounter them after the syntax of our program is completely correct.\nA common runtime error occurs when we try to use a variable that has not been created yet. This can happen if you misspell the name of a variable, as the following example shows.\nExample 1 2 let firstName = \"Jack\"; console.log(firstname); Console Output\nReferenceError: firstname is not defined at evalmachine.\u003canonymous\u003e:2:13 at Script.runInContext (vm.js:107:20) at Object.runInContext (vm.js:285:6) at evaluate (/run_dir/repl.js:133:14) at ReadStream.\u003canonymous\u003e (/run_dir/repl.js:116:5) at ReadStream.emit (events.js:189:13) at addChunk (_stream_readable.js:284:12) at readableAddChunk (_stream_readable.js:265:11) at ReadStream.Readable.push (_stream_readable.js:220:10) at lazyFs.read (internal/fs/streams.js:181:12) The syntax of our program is correct, but when the program executes, an error occurs at line 2. We attempt to print the value of the variable firstname, but such a variable does not exist.\nLogic Errors The third type of error is the logic error. If there is a logic error in your program, it will run successfully and not generate any error messages. However, the program will not work as intended.\nThe characteristic of logic errors is that the program you wrote is not the program you wanted. For example, say you want a program to calculate your daily earnings based on your weekly salary. You might try the following:\nExample 1 2 3 4 let weeklyPay = 600; let dailyEarnings = weeklyPay / 7; console.log(dailyEarnings); Console Output\n85.71428571428571 The result surprises you because you thought you were making at least $100 per day (you work Monday through Friday). According to this program, though, you are making about $85 per day. The error is a logic one because you divided your weekly pay by 7. It would have been more accurate to divide your weekly pay by 5, since that is how many days a week you come to work.\nIdentifying logic errors can be tricky because unlike syntax and runtime problems, there are no error messages to help us identify the issue. We must examine the output of the program and work backward to figure out what it is doing wrong.\nCheck Your Understanding Question Label each of the following as either a syntax, runtime, or logic error.\nTrying to use a variable that has not been defined. Leaving off a close parenthesis, ), when calling console.log. Forgetting to divide by 100 when printing a percentage amount. ",
    "description": "",
    "tags": null,
    "title": "Categories of Errors",
    "uri": "/errors-and-debugging/reading/categories-of-errors/index.html"
  },
  {
    "content": "Imagine we are running a space station. Your job is to evaluate the station’s code and fix any errors. The lives of the crew rest squarely upon your shoulders.\nYour directions from superiors:\nLaunch the shuttle only if the fuel, crew and computer all check out OK. If a check fails, print that information to the console and scrub the launch. If all checks are successful, print a countdown to launch in the console. To get started, check out the exercises directory in javascript-projects/errors-and-debugging.\nDebugging Practice Fix syntax errors first. Run the code in Debugging1stSyntaxError.js as-is and read the error message. Fix the mistake, and then re-run the code to check it.\n1 2 3 4 5 6 7 8 9 10 let launchReady = false; let fuelLevel = 17000; if (fuelLevel \u003e= 20000 { console.log('Fuel level cleared.'); launchReady = true; } else { console.log('WARNING: Insufficient fuel!'); launchReady = false; } Check your solution Line 4 needs a closing parenthesis:\nif (fuelLevel \u003e= 20000) {\nThe next block of code in DebuggingSyntaxErrors2.js hides two syntax errors. Run the code as-is to find the mistakes.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let launchReady = false; let crewStatus = true; let computerStatus = 'green'; if (crewStatus \u0026\u0026\u0026 computerStatus === 'green') { console.log('Crew \u0026 computer cleared.'); launchReady = true; } else { console.log('WARNING: Crew or computer not ready!'); launchReady = false; } if (launchReady) { console.log((\"10, 9, 8, 7, 6, 5, 4, 3, 2, 1...\"); console.log(\"Fed parrot...\"); console.log(\"Ignition...\"); console.log(\"Liftoff!\"); } else { console.log(\"Launch scrubbed.\"); } Tip Only one error will be flagged at a time. Fix that ONE problem, and then re-run the code to check your work. Avoid trying to fix multiple issues at once.\nFix runtime errors next. Open up DebuggingRuntimeErrors1.js. Remember to examine the error message for clues about what is going wrong. Pay close attention to any line numbers mentioned in the message - these will help you locate and repair the mistake in the code.\n1 2 3 4 5 6 7 8 9 10 let launchReady = false; let fuelLevel = 17000; if (fuellevel \u003e= 20000) { console.log('Fuel level cleared.'); launchReady = true; } else { console.log('WARNING: Insufficient fuel!'); launchReady = false; } Check your solution fuellevel should be fuelLevel on Line 7:\nif (fuelLevel \u003e= 20000) {\nArrr! Did we mention your crew are space pirates? Open up DebuggingRuntimeErrors2.js. Now find and fix the runtime error in a longer code sample.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let launchReady = false; let fuelLevel = 27000; if (fuelLevel \u003e= 20000) { console.log('Fuel level cleared.'); launchReady = true; } else { console.log('WARNING: Insufficient fuel!'); launchReady = false; } if (launchReady) { console.log(\"10, 9, 8...\"); console.log(\"Fed parrot...\"); console.log(\"6, 5, 4...\"); console.log(\"Ignition...\"); consoul.log(\"3, 2, 1...\"); console.log(\"Liftoff!\"); } else { console.log(\"Launch scrubbed.\"); } Solve logic errors last. Logic errors do not generate warning messages or prevent the code from running, but the program still does not work as intended. (Refer to debugging logic errors if you need to review).\nOpen up DebuggingLogicErrors1.js. First, run this sample code as-is and examine the output.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 let launchReady = false; let fuelLevel = 17000; let crewStatus = true; let computerStatus = 'green'; if (fuelLevel \u003e= 20000) { console.log('Fuel level cleared.'); launchReady = true; } else { console.log('WARNING: Insufficient fuel!'); launchReady = false; } if (crewStatus \u0026\u0026 computerStatus === 'green'){ console.log('Crew \u0026 computer cleared.'); launchReady = true; } else { console.log('WARNING: Crew or computer not ready!'); launchReady = false; } if (launchReady) { console.log('10, 9, 8, 7, 6, 5, 4, 3, 2, 1...'); console.log('Liftoff!'); } else { console.log('Launch scrubbed.'); } Should the shuttle have launched? Did it?\nCheck your solution The shuttle should not have launched. However, the messages to the console tell a different story. Without any changes, the original code outputs: ```console WARNING: Insufficient fuel! Crew \u0026 computer cleared. 10, 9, 8, 7, 6, 5, 4, 3, 2, 1... Liftoff! ``` Let’s break the code down into smaller chunks. Open up DebuggingLogicErrors2.js. Consider the first if/else block below. We’ve commented out some of the variables we’re not inspecting right now. Add console.log(launchReady) after this block, then run the program.\n1 2 3 4 5 6 7 8 9 10 11 12 let launchReady = false; let fuelLevel = 17000; // let crewStatus = true; // let computerStatus = 'green'; if (fuelLevel \u003e= 20000) { console.log('Fuel level cleared.'); launchReady = true; } else { console.log('WARNING: Insufficient fuel!'); launchReady = false; } Given the fuelLevel value, should launchReady be true or false after the check? Is the program behaving as expected?\nNow consider the second if/else block. OPen up DebuggingLogicErrors3.js. Here again, we comment the variables and blocks that we’re not inspecting. Add another console.log(launchReady) after this block and run the program.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let launchReady = false; // let fuelLevel = 17000; let crewStatus = true; let computerStatus = 'green'; // if (fuelLevel \u003e= 20000) { // console.log('Fuel level cleared.'); // launchReady = true; // } else { // console.log('WARNING: Insufficient fuel!'); // launchReady = false; // } if (crewStatus \u0026\u0026 computerStatus === 'green'){ console.log('Crew \u0026 computer cleared.'); launchReady = true; } else { console.log('WARNING: Crew or computer not ready!'); launchReady = false; } Given crewStatus and computerStatus, should launchReady be true or false after this check?\nIs the program behaving as expected?\nCheck your solution With their initial values set to `true` and `'green'`, line 14 evaluates to `true` and `launchReady` is set to `true`. If it's value on dependent on the value of these variables only (`crewStatus` and `computerStatus`), then `launchReady` should be `true` after this check. Now consider both if/else blocks together (keeping the added console.log lines). Run the code in DebuggingLogicErrors4.js and examine the output.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 let launchReady = false; let fuelLevel = 17000; let crewStatus = true; let computerStatus = 'green'; if (fuelLevel \u003e= 20000) { console.log('Fuel level cleared.'); launchReady = true; } else { console.log('WARNING: Insufficient fuel!'); launchReady = false; } console.log(launchReady); if (crewStatus \u0026\u0026 computerStatus === 'green'){ console.log('Crew \u0026 computer cleared.'); launchReady = true; } else { console.log('WARNING: Crew or computer not ready!'); launchReady = false; } console.log(launchReady); Given the values for fuelLevel, crewStatus and computerStatus, should launchReady be true or false? Is the program behaving as expected?\nAhoy, Houston! We spied a problem! The value of launchReady assigned in the first if/else block got changed in the second if/else block. Dangerous waters, Matey. Open up DebuggingLogicErrors5.js to address this error.\nThe issue is with the launchReady value being assigned and reassigned based on different checks. One way to fix the logic error is to use two different variables to store the results of checking the fuel readiness (lines 6-13) and checking the crew and computer readiness (lines 15-22).\nUpdate your code to do this. Verify that your change works by updating the console.log statements.\nCheck your solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 let launchReady = false; let crewReady = false; let fuelLevel = 17000; let crewStatus = true; let computerStatus = 'green'; if (fuelLevel \u003e= 20000) { console.log('Fuel level cleared.'); launchReady = true; } else { console.log('WARNING: Insufficient fuel!'); launchReady = false; } console.log(\"launchReady = \", launchReady); if (crewStatus \u0026\u0026 computerStatus === 'green'){ console.log('Crew \u0026 computer cleared.'); crewReady = true; } else { console.log('WARNING: Crew or computer not ready!'); crewReady = false; } console.log(\"crewReady = \", crewReady); Almost done, so wipe the sweat off your brow! Add a final if/else block to print a countdown and “Liftoff!” if all the checks pass, or print “Launch scrubbed” if any check fails.\nBlimey! That’s some good work.\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Debugging",
    "uri": "/errors-and-debugging/exercises/index.html"
  },
  {
    "content": "At their core, programming languages are collections of rules that allow us to tell a computer what to do. Actions like Repeat 25 times, Prompt the user for a password, or Display text on the screen can be done with any language. However, each one uses different methods to complete the tasks.\nSyntax refers to the structure of a language (spoken, programming, or otherwise) and the rules about that structure. For example, in English, a sentence must begin with a capital letter and end with proper punctuation.\nJavaScript and other languages can only run a program if it is syntactically correct, and each language is pretty rigid and unforgiving if you make a mistake. While humans are good at overlooking minor grammar and syntax errors, computers cannot do the same.\nFor example, the following sentence will send English teachers into fits, It iz a tooth universe ally ack know ledged, tat a seengle man in po session off a good for toon, moose bee n wat off a wive. Despite being poorly written, we can still make some sense out of the words. It might take some re-reading, but eventually we will get the point. Other examples include vanity license plates:\nPlate Meaning KC ROKS Kansas City (or Casey?) Rocks 4EVERL8 All parents who ever needed to get the kids to practice Computers cannot interpret or overlook mistakes like humans. Any syntax errors, no matter how minor, will prevent the code from running. Instead of trying to work around the issue, the program will immediately crash and generate error messages.\n",
    "description": "",
    "tags": null,
    "title": "Syntax Rules",
    "uri": "/how-to-write-code/reading/syntax-rules/index.html"
  },
  {
    "content": "Congratulations! You finished the prep work for Web Development. You are ready to take the next steps on your learning journey.\nSome words of advice:\nTake advantage of the resources at your disposal—your instructor, TAs, and classmates are here to help. Complete all of the homework and practice tasks. To learn how to code, you need to code. Ask and answer questions. Recognize that making mistakes is part of the learning process. We applaud your efforts, and we look forward to your success.\n",
    "description": "",
    "tags": null,
    "title": "Welcome, Novice Coder",
    "uri": "/how-to-write-code/next-steps/index.html"
  },
  {
    "content": "Major Concepts After completing this chapter, you should be able to do the following:\nExplain what an algorithm is. Explain what a programming language is. Explain why one programming language might be chosen over another. Explain how a program runs, including the differences between compiled and interpreted languages. Run a program and locate its output in the console. Understand some basic debugging practices. Key Terminology Here are the key terms for this chapter. On the pages that they appear, make note of what they are and their definitions.\nIntroduction Program Algorithm Programming Languages Binary code Hexadecimal Programming language Compiler Syntax The JavaScript Language JavaScript Front-end Back-end Setting Up Your Coding Tools Integrated development environment (IDE) Visual Studio Code (VSC) Console Terminal Starter code Your First Program cd ls Dashboard Repository git status Staging git add git commit Commit message git pull git push Fork Clone Personal Access Token Content Links Reading Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 2: How Programs Work",
    "uri": "/how-programs-work/index.html"
  },
  {
    "content": " “Computer, scan the surface for lifeforms.”\n“Hey Siri, what movies are playing nearby?”\nEven though today’s tech makes it seem like computers understand spoken language, the devices do not use English, Chinese, Spanish, etc. to carry out their jobs. Instead, programmers must write their instructions in a form that computers understand.\nComputers operate using binary code, which consists only of 0s and 1s. For example, here is the binary version of the text Hello World:\n01001000 01100101 01101100 01101100 01101111 00100000 01010111 01101111 01110010 01101100 01100100\nEach set of 8 digits represents one character in the text. To make things a little easier, binary data may also be represented as hexadecimal values. Here is Hello World expressed in hex:\n48 65 6c 6c 6f 20 57 6f 72 6c 64\nTo run an algorithm, all of the steps must be written in binary or hex so the computer can understand the instructions.\nNote Fortunately, we do not need to worry about binary or hexadecimal code to make our programs work!\nLanguages Writing code using only 0s and 1s would be impractical, so many clever individuals designed ways to convert between the text readable by humans and the binary or hexadecimal forms needed by machines.\nA programming language is a set of specific words and rules for teaching a computer how to perform a desired task. Examples of programming languages include Python, JavaScript, Basic, COBOL, C++, C#, Java, and many others.\nThese high-level languages can be written and understood by humans, and each one has its own characteristic vocabulary, style, and syntax.\nHow Computers Run Programs Since computers only understand binary code, every programming language contains a special set of instructions that translate a programmer’s work into the 0s and 1s that the machines need.\nIf we want to print Hello, World! on the screen, we would write the instructions in our chosen programming language, then select “Run”. Our code gets compiled or interpreted, which converts our typed commands into something the computer can use. The instructions are then executed by the machine, and we observe the results.\nIn the example above, the syntax for printing Hello, World! varies between the Python, JavaScript, and Java languages, but the end result is the same.\nHow Many Programming Languages Are There? Ask Google, “How many programming languages are there?” and many results get returned. Even with all these options, there is no specific answer to the question.\nThere are hundreds, if not thousands, of programming languages available. However, most are either obsolete, impractical or too specialized to be widely used.\nArguments occur whenever someone makes a top 10 list for programming languages, but regardless of the opinions, one fact remains. Once you learn one language, learning the next is much, much easier. Adding a third becomes child’s play.\nThe reason for this is that thinking like a coder does not change with the language. Your logic, reasoning, and problem-solving skills apply just as well for JavaScript as they do for Python, Swift, and C#. To display text on the screen in Python, we use print(), for JavaScript we use console.log();, for C# the command is Console.WriteLine();. The syntax, or code, for each language varies, but the results are identical.\n",
    "description": "",
    "tags": null,
    "title": "Programming Languages",
    "uri": "/how-programs-work/reading/programming-languages/index.html"
  },
  {
    "content": "Adding Alerts Now, let’s add validation to notify the user if they forgot to enter a value for any one of the fields.\nThis process is going to look similar to the validation section in the chapter on forms. Add an alert to notify the user that all fields are required.\nYou also want to make sure that the user entered valid info for each of the fields. Valid information for the fields means that the user submits a value that is easily converted to the correct data type for our fellow engineers. The pilot and co-pilot names should be strings and the fuel level and cargo mass should be numbers. To do this, complete the helper function in your scriptHelper.js called validateInput(). validateInput() should take in a string as a parameter and return \"Empty\", \"Not a Number\", or \"Is a Number\" as appropriate. In scriptHelper.js, you will use validateInput() to complete the formSubmission() function. formSubmission() will take in a document parameter and strings representing the pilot, co-pilot, fuel level, and cargo mass. Using the values in those strings and the document parameter for your HTML document, update the shuttle requirements as described below. Make sure to call your formSubmission() function at the appropriate time in your script.js file!\nNote If you want to check if something is NaN, you cannot use == or ===. Instead, JavaScript has a built-in method called isNaN(value) that returns true if value is NaN and false if value is not NaN.\nUpdating Shuttle Requirements The list of shuttle requirements, the div with the id faultyItems, should be updated if something is not ready for launch. Using template literals, update the li elements pilotStatus and copilotStatus to include the pilot’s name and the co-pilot’s name.\nIf the user submits a fuel level that is too low (less than 10,000 liters), change faultyItems to visible with an updated fuel status stating that there is not enough fuel for the journey. The text of the h2 element, launchStatus, should also change to “Shuttle not ready for launch” and the color should change to red.\nIf the user submits a cargo mass that is too large (more than 10,000 kilograms), change the list to visible with an updated cargo status stating that there is too much mass for the shuttle to take off. The text of launchStatus should also change to “Shuttle not ready for launch” and the color should change to red.\nIf the shuttle is ready to launch, change the text of launchStatus to green and display “Shuttle is ready for launch”.\nNote The autograder will check if your CSS is set to just red or green. While we normally encourage you to be creative, in this case, we ask that you only use \"red\" or \"green\" for the autograder.\n",
    "description": "",
    "tags": null,
    "title": "Task 2: Adding Validation",
    "uri": "/assignments/launch-checklist/validation/index.html"
  },
  {
    "content": "For Task 1, you will get comfortable with writing markup, and with separating content from design and layout.\nGetting Started Open your index.html file.\nYour index.html comes with a simplified HTML5 boilerplate:\n1 2 3 4 5 6 7 8 9 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003e\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e\u003c/body\u003e \u003c/html\u003e Getting to Work Your mission is to build a page that:\nTells a story. This can be personal or impersonal, funny, serious or neither. You can do whatever you like, but it should be something in the range of 3-10 paragraphs or sections. Here is an example , and here are some other ideas:\nCreate a résumé page that tells the story of your professional journey to-date, and where you want to go as a coder. Describe a trip you took. Talk about one of your hobbies or passions. Does each of the following:\nUses each of the following structural HTML5 tags at least once:\n\u003cp\u003e \u003cheader\u003e \u003cfooter\u003e \u003cmain\u003e \u003carticle\u003e. If you need to review any of these tags, check out the HTML tag reference at w3schools.\nUses at least one \u003cimg\u003e tag (hopefully more).\nWhen placing images in your page, put them in a new subfolder called images within your html-me-something directory. Uses at least one HTML entity .\nHint: putting a copyright notice in your footer will afford you the opportunity to use \u0026copy;, but you should also try to get creative here.\nDemonstrates creativity.\nDon’t stop with these items or tags. Have some ideas for your page, and make it great. And dig into the w3schools HTML reference to learn more about other tags, their usage and attributes!\nNotes and Tips Use your browser developer tools to look at the example page , or to troubleshoot things that don’t look right. You can mimic the document structure of this example, but do NOT just copy/paste! Use the example to learn how your HTML elements might be structured, and build your page to fit your own content. Don’t add any CSS yet. Really, we mean it! If you think your page looks boring now, that’s okay. We’ll get there soon enough. As you make changes, you will obviously want to see the results. To do so, re-save the file in your text editor, then click Refresh in the browser window (or use cmd+R on a Mac, ctrl+R on Windows). Rely on the reference sites linked on this page, or find others online. We haven’t taught you every detail about every tag that you may want or need. You’re free to use tags that haven’t been explicitly introduced in class. We’ve given you enough background to get started, and are intentionally leaving some of the learning up to you. Tip Once you finish your page, use Git to add and commit your index.html changes.\nWell done! You may notice that you haven’t got a green check mark on your repository yet. You need to create and apply some design features. You will do that in Task 2 .\n",
    "description": "",
    "tags": null,
    "title": "Task 1: Creating Your Content",
    "uri": "/assignments/html-me-something/part-1/index.html"
  },
  {
    "content": "Assignment Overview Project Introduction Task 1: Minimum Viable Quiz Task 2: Multiple Questions Task 3: Grade the Quiz ",
    "description": "",
    "tags": null,
    "title": "Assignment 1: Candidate Testing",
    "uri": "/assignments/candidate-testing/index.html"
  },
  {
    "content": "For Task 1, you are going to:\nAsk the candidate for their name Create a quiz that asks a single question Check if the candidate answered the question correctly Inform the candidate if they answered the question correctly or not Create a greeting using the candidate’s name The starter code contains functions. These pieces of code will be covered later in this course. However, instructions have been provided to help you work with them. The final page of these instructions will have a little more information about functions if you are curious.\nWe have added TODO statements in the starter code to guide you with these functions.\nFor the sake of this assignment, look for the TODO statements. Some are outside of a function, and some are within a function. The location indicates where you should add your code.\n1.1 candidateName Ask for the candidate’s name. Look for TODO 1.1a in the starter code. On the line below the TODO statement, define a variable called candidateName. Declare this variable as an empty string. Look for TODO 1.1b inside the askForName function. On the line below the TODO statement (and inside the function), write code that asks the user to enter their name into the program and store the value as candidateName. Look for TODO 1.1c Underneath it, there is an empty console.log statement. Write a message to the console greeting the user with the name they just provided. 1.2 Single Question Quiz Ask the user to answer a single quiz question. Look for TODO 1.2a. Below the TODO statement, define variables called question, correctAnswer, and candidateAnswer.\nquestion should be initialized to the following string: \"Who was the first American woman in space? \". Note Don’t forget the trailing space at the end of this string! It is required.\ncorrectAnswer should be initialized to \"Sally Ride\". candidateAnswer will initially be set to the empty string. Find TODO 1.2b. Using your question variable, display the question and prompt the candidate for their answer. Store their response in one of the variables you defined just above.\nUnder TODO 1.2c, check the candidate’s answer to see if it is correct. Provide basic feedback to the candidate, letting them know if their answer is correct or not.\nTesting Task 1 In the terminal run npm test. This will run the autograding tests. The results will display in the terminal.\nTo pass Task 1, you need to pass tests 1-6.\nTo see which tests you passed, scroll up in your terminal. You will see details of each test. At the top of the test results, you will find a list that displays all of the tests and each status. This can be used a quick reference. The detailed outputs can help you explore the cause of a failure which can help you debug and improve your code.\nThe rest of the tests are for Tasks 2 and 3.\nNote Make sure your small app works properly before moving on to task 2.\nRun the following command to make sure the app is running without errors, if you do encounter any errors:\nRevisit the above instructions step by step to ensure you completed all steps in Task 1. If you are still encountering problems, take a look back at this page and reach out to your instructional assistant. node index.js This is also a great time to save, commit, and push up your work.\nReady for Task 2 ",
    "description": "",
    "tags": null,
    "title": "Task 1: Minimum Viable Quiz",
    "uri": "/assignments/candidate-testing/task-1/index.html"
  },
  {
    "content": "You already know one method for creating a function :\nfunction myFunction(parameter1, parameter2,..., parameterN) { // function body } A function defined in this way is a named function (myFunction, in the example above).\nMany programming languages, including JavaScript, allow us to create anonymous functions, which do not have names. We can create an anonymous function by simply leaving off the function name when defining it:\nfunction (parameter1, parameter2,..., parameterN) { // function body } You might be asking yourself, How do I call a function if it doesn’t have a name?! Good question. Let’s address that now.\nAnonymous Function Variables Anonymous functions are often assigned to variables when they are created, which allows them to be called using the variable’s name.\nExample Let’s create and use a simple anonymous function that returns the sum of two numbers.\n1 2 3 4 5 let add = function(a, b) { return a + b; }; console.log(add(1, 1)); Console Output\n2 The variable add refers to the anonymous function created on lines 1 through 3. We call the function using the variable name, since the function doesn’t have a name.\nWarning Like other variable declarations, an assignment statement using an anonymous function should be terminated by a semi-colon, ;. This is easy to overlook, since named functions do not end with a semi-colon.\nCheck Your Understanding Question Convert the following named function to an anonymous function that is stored in a variable.\nfunction reverse(str) { let lettersArray = str.split(''); let reversedLettersArray = lettersArray.reverse(); return reversedLettersArray.join(''); } Question Consider the code sample below, which declares an anonymous function beginning on line 1.\nlet f1 = function(str) { return str + str; }; let f2 = f1; Which of the following are valid ways of invoking the anonymous function with the argument \"abcd\"? (Choose all that apply.)\nf1(\"abcd\"); function(\"abcd\"); f2(\"abcd\"); It is not possible to invoke the anonymous function, since it doesn’t have a name. Question Complete the following code snippet so that it logs an error message if userInput is negative.\nlet logger = function(errorMsg) { console.log(\"ERROR: \" + errorMsg); }; if (userInput \u003c 0) { ____________(\"Invalid input\"); } ",
    "description": "",
    "tags": null,
    "title": "Anonymous Functions",
    "uri": "/more-on-functions/reading/anonymous-functions/index.html"
  },
  {
    "content": "For your second assignment, we’ll ask you to modify and improve our Scrabble Scorer program. Did you think you were going to work on Mars Rover code already? That will come next!\nWe want you to update our program that asks a user for a word and outputs a score. Your final version will have three scoring algorithms and allow a user to interactively choose which algorithm to use. We’ve provided some starter code that includes the official Scrabble scoring point system and we’d like you to make some modifications to improve it.\nLet’s roll.\nRequirements Note The requirements below are what your assignment should look like when it’s time to submit. Rome wasn’t built in a day and neither was Scrabble.\nThis assignment is broken down so you can complete small pieces as you go. You need to move sequentially starting with Part A below. You’ll have a much more enjoyable time writing this program if you read this entire page before even opening your code.\nWrite an initialPrompt() function that asks a user to input a word. Have the program return a score for the word using oldScrabbleScorer(). Add additional scoring algorithms and store them in the scoringAlgorithms array. Create a transform() function that takes in the oldPointStructure object and returns a newPointStructure object. Use the runProgram() function to serve as the starting point for your program. Starter Code Fork and clone the starter code repo .\nYou only need to pay attention to one file here, scrabble-scorer.js. Within this JavaScript file is still some more starter code that you don’t need to touch. We’ll point out what you should be modifying here to write your Scrabble Scorer program.\nTo run the starter code as is, take the following steps:\nOpen the terminal in Visual Studio Code. Run the command, npm install. Once that is complete, run the command, node index. You’ll see a message printed to the console: $ node index Let's play some Scrabble! Tip If you don’t see this message printed and have exhausted your troubleshooting skills, reach out to your classmates or course staff ASAP so you can get started with the real coding.\nTime to code!\nYour Tasks Task 1: Initial Prompt Task 2: Add and Organize Scoring Algorithms Task 3: Transform Scrabble Scoring Task 4: Transform the Object Task 5: Submitting Your Work ",
    "description": "",
    "tags": null,
    "title": "Assignment 2: Scrabble Scorer",
    "uri": "/assignments/scrabble-scorer/index.html"
  },
  {
    "content": "In order to fully explain how the fetch function works, we need to define and talk about the terms asynchronous and synchronous.\nAsynchronous: Not simultaneous or concurrent in time.\nSynchronous: Simultaneous or concurrent in time.\nWhen fetching data in JavaScript, the HTTP requests are asynchronous. In brief, that means when an HTTP request is sent, we don’t know exactly when a response will be received by the browser. Remember that HTTP requests are sent to an address, then a response is sent. That process takes a variable amount of time depending on network speed, the address location, and response size.\nNote These requests are also called AJAX requests (Asynchronous JavaScript and XML). The XML part of AJAX refers to a data format that was popular before JSON.\nResponse Handlers Browsers can’t stop everything and wait for a response to an HTTP request. Browsers have to render HTML, interact with the user, and run JavaScript. To keep these processes running seamlessly, without any noticeable pauses, the browser relies on events.\nThis is where .then() and the response handler function come in. The browser provides us with a way to handle the response whenever it is received.\nPromises and the then Function Let’s look again at a simple fetch example. Notice on line 1 that then is called on the value returned from fetch.\nfetch(\"https://handlers.education.launchcode.org/static/weather.json\").then( function(response) { console.log(response); } ); To make it clearer, let’s capture the value returned by fetch in a variable named fetchPromise.\nconst fetchPromise = fetch(\"https://handlers.education.launchcode.org/static/weather.json\"); fetchPromise.then( function(response) { console.log(response); } ); fetch returns an instance of the Promise class. The Promise class represents a promise. A promise is the eventual outcome of an asynchronous event. In the above example, fetchPromise represents the eventual response from the HTTP request to https://handlers.education.launchcode.org/static/weather.json.\nA promise can be fulfilled or rejected. When a promise is fulfilled, data is passed to the response handler function. The then method of Promise defines what will happen when the promise is fulfilled. When a promise is rejected, the error reason is returned.\nThe above example can be translated to these steps\nMake an HTTP request to https://handlers.education.launchcode.org/static/weather.json When the response is received, THEN run the response handler function (passing in response data) In the response handler function, console log the response object More Promises Above, we showed a promise representing the outcome of an HTTP request, however, promises can represent the outcome of any asynchronous event. For example, the response object has a json() function that will return the JSON data in the response. The json() function returns a promise that represents the future result of turning the response data into JSON.\nThe example below shows how promises are used to represent two different types of asynchronous events and the outcomes.\nExample const fetchPromise = fetch(\"https://handlers.education.launchcode.org/static/weather.json\"); fetchPromise.then( function(response) { const jsonPromise = response.json(); jsonPromise.then( function(json) { console.log(\"temp\", json.temp); }); } ); This example involves two promises. On line 1, fetchPromise is a promise that represents the fetch request. On line 3, jsonPromise is a promise that represents the response data being turned into JSON.\nFinally on line 5, the JSON data can be logged.\nTip Promises can be a hard concept to understand. Focus on the examples and the theory will make sense in time.\nCheck Your Understanding Question We know exactly when an asynchronous request will return.\nTrue False Question A promise can represent the outcome of any future event.\nTrue False Question then is a method of the Promise class that allows us to run code after an event is completed.\nTrue False ",
    "description": "",
    "tags": null,
    "title": "Asynchronous and Promises",
    "uri": "/fetch/reading/asynch-promies/index.html"
  },
  {
    "content": "Understanding strings as sequential collections of characters gives us much more than just a mental model of how they are structured. JavaScript provides a rich collection of tools—including special syntax and operations—that allows us to work with strings.\nBracket notation is the special syntax that allows us to access the individual characters that make up a string. To access a character, we use the syntax someString[i], where i is the index of the character we want to access. String indices are integers representing the position of a character within a given string, and they start at 0. Thus, the first character of a string has index 0, the second has index 1, and so on.\nConsider the string \"JavaScript\". The \"J\" has index 0, the first \"a\" has index 1, \"v\" has index 2, and so on.\nAn expression of the form someString[i] gives the character at index i.\nExample This program prints out the initials of the person’s name.\n1 2 3 4 5 6 7 8 9 let jsCreator = \"Brendan Eich\"; let firstInitial = jsCreator[0]; let lastInitial = jsCreator[8]; let outputStr = \"JavaScript was created by somebody with initials \" + firstInitial + \".\" + lastInitial + \".\"; console.log(outputStr); Console Output\nJavaScript was created by somebody with initials B.E. What happens if we try to access an index that doesn’t exist, for example -1 or an index larger than the length of the string?\nTry It! 1 2 3 4 let jsCreator = \"Brendan Eich\"; console.log(jsCreator[-1]); console.log(jsCreator[42]); Question What does an expression using bracket notation evaluate to when the index is invalid (the index does not correspond to a character in the string)?\nCheck Your Understanding Question If phrase = 'Code for fun', then phrase[2] evaluates to:\n\"o\" \"d\" \"for\" \"fun\" Question Which of the following returns true given myStr = 'Index'? Choose all correct answers.\nmyStr[2] === 'n'; myStr[4] === 'x'; myStr[6] === ' '; myStr[0] === 'I'; Question What is printed by the following code?\n1 2 let phrase = \"JavaScript rocks!\"; console.log(phrase[phrase.length - 8]); \"p\" \"i\" \"r\" \"t\" ",
    "description": "",
    "tags": null,
    "title": "Bracket Notation",
    "uri": "/stringing-characters-together/reading/bracket-notation/index.html"
  },
  {
    "content": "Writing CSS Programmers can change a lot of different styling using CSS rules. A rule includes the selector and a declaration block. A selector determines which elements will be affected by the rule. Inside the declaration block, programmers set CSS properties to specific values. CSS has a lot of different properties and it would be impossible to memorize them all.\nselector { declaration block } CSS Selectors CSS has three different selectors that the programmer can use to make their style choices.\nThe first one that most beginners start with is the element selector. Element refers to the HTML elements, so if the selector used is p, then the styling will apply to all paragraph elements.\nThe id selector is a specific id given to one element for CSS styling, for example when one paragraph on the web page needs to be bright pink.\nThe final selector is the class selector. A class is a group of HTML elements that need the same styling. The class name is determined by the programmer. The class name should be unique and have meaning like variable names.\nDeclaration Blocks The declaration block is a series of initializations of style rules in CSS for a selector. Programmers can write CSS two different ways depending on where the CSS is in relation to the HTML document. We will go more in depth about the differences between CSS locations in the next section.\nHere is an example of how to write the declaration block for internal and external CSS:\nselector { property: value; property: value; property: value; } For inline CSS, the declaration block is inside one line of HTML like so:\n\u003ctag style=\"property:value;property:value;property:value;\"\u003econtent\u003c/tag\u003e Every property in CSS has a default value. For example, color, which governs text color, defaults to “black”. For that reason, programmers only need to declare the CSS properties they want to change from the default.\nNote HTML elements also have a default appearance. When creating web pages, we should be aware of which elements are inline elements and which elements are block elements. Inline elements will not start a new line (such as \u003cb\u003e, \u003cem\u003e, and \u003cspan\u003e) and block display elements do (such as \u003ch1\u003e, \u003cdiv\u003e, and \u003cp\u003e).\nCSS Examples Here are three different examples of how we can use selectors to make the text in a paragraph pink.\nElement Selector\nUsing the element selector to change the color of all \u003cp\u003e elements,\np { color: pink; } Using the element selector will make all paragraph elements on the page have pink text.\nClass Selector\nWe can give a few of the paragraphs on the page the class pink-paragraph on the HTML document, like so: \u003cp class=\"pink-paragraph\"\u003econtent\u003c/p\u003e. If we want to then style the pink-paragraph elements, we need to use the class selector in CSS. Here is how our CSS might look:\n.pink-paragraph { color: pink; } In CSS, the class selector is preceded by ..\nId Selector\nIf one paragraph is going to have pink text, the id selector on the HTML document would look like: \u003cp id=\"pinkParagraph\"\u003econtent\u003c/p\u003e. In CSS, we would use the id selector to make the paragraph pink:\n#pinkParagraph { color: pink; } In CSS, the id selector is preceded by #.\nLinking CSS to HTML To get started with CSS, programmers need to add CSS to HTML.\nThere are three different places to add CSS in an HTML file as indicated below:\nExternal: The CSS is in a separate file linked to the HTML document in the \u003chead\u003e. External linking of CSS is great for when programmers have large quantities of CSS that apply to the whole page. \u003chead\u003e \u003ctitle\u003eMy Web Page\u003c/title\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"\u003e \u003c/head\u003e link is an HTML tag that tells the browser to connect what is inside the linked file to the web page content. rel, type, href are all HTML attributes that are required to properly link CSS and let the browser know that CSS is what is in the file and where the file is. rel should be set to “stylesheet”, because it designates how the link relates to the page. type will be set to “text/css” for all stylesheets. href is where the programmer enters the path to the stylesheet that should be used for the page.\nDocument or internal: All CSS styling is inside the HTML file, but within the \u003chead\u003e. Internal use of CSS is great for when the programmer has a small amount of CSS that applies to the whole document. \u003chead\u003e \u003ctitle\u003eMy Web Page\u003c/title\u003e \u003cstyle\u003e selector { declaration block } \u003c/style\u003e \u003c/head\u003e Inline: Programmers add CSS styling to individual tags. This is a good place to add some specific styling. There is no selector in inline CSS; instead, the style attribute is used. This is because the styling only applies to that one instance of the HTML tag. \u003ctag style=\"declaration block\"\u003econtent\u003c/tag\u003e Order of Precedence Because there is an order of precedence to the location of CSS, it is important to be able to add or change CSS in all three locations. Programmers use this to their advantage if they want to be very specific with overwriting some CSS for one element. Inline CSS is highest in precedence with internal CSS being next and then external CSS is lowest.\nCheck Your Understanding Question What is the order of precedence in CSS?\nInternal \u003e External \u003e Inline Inline \u003e Internal \u003e External Inline \u003e External \u003e Internal External \u003e Internal \u003e Inline ",
    "description": "",
    "tags": null,
    "title": "CSS Structure",
    "uri": "/styling-css/reading/css-structure/index.html"
  },
  {
    "content": "Loose Equality With == In the section booleans , we learned about the comparison operators == and !=, which test whether two values are equal or not equal, respectively. However, there are some quirks with using the == operator, which occur when we use == to compare different data types.\nExample console.log(7 == \"7\"); console.log(0 == false); console.log(0 == ''); Console Output\ntrue true true In order to properly make a comparison, the two operands must be the same type. If the two operands to == are of different data types, JavaScript will implicitly convert the operands so that the values are of the same data type before comparing the two. For this reason, the == operator is often said to measure loose equality.\nType conversions with == are carried out according to a complex set of rules , and while many of these conversions make some sense, others do not.\nFor example, Number(\"7\") returns 7, so it makes some sense that 7 == \"7\" returns true. However, the following example leaves us scratching our heads.\nExample console.log('0' == 0); console.log(0 == ''); console.log('0' == ''); Console Output\ntrue true false The == operator is non-transitive. We think of equality as being transitive; for example, if A and B are equal and B and C are equal, then A and C are also equal. However, the example above demonstrates that that is not the case for the == operator.\nSince == does not follow rules that we typically associate with equality, unexpected results may occur if == is used in a program. Thankfully, JavaScript provides another operator that returns more predictable results.\nStrict Equality With === The operator === compares two operands without converting their data types. In other words, if a and b are of different data types (say, a is a string and b is a number) then a === b will always be false.\nExample console.log(7 === \"7\"); console.log(0 === false); console.log(0 === ''); Console Output\nfalse false false For this reason, the === operator is often said to measure strict equality.\nJust as equality operator == has the inequality operator !=, there is also a strict inequality operator, !==. The boolean expression a !== b returns true when the two operands are of different types, or if they are of the same type and have different values.\nTip USE === AND !== WHENEVER POSSIBLE. In this book we will use these strict operators over the loose operators from now on.\nCheck Your Understanding Question What is the result of the following boolean expression?\n4 == \"4\" true false \"true\" \"false\" Question What is the difference between == and ===?\nThere is no difference. They work exactly the same. Only === throws an error if its arguments are of different types. == converts values of different types to be the same type, while === does not. == works with all data types, while === does not. ",
    "description": "",
    "tags": null,
    "title": "Equality",
    "uri": "/decisions-with-conditionals/reading/equality/index.html"
  },
  {
    "content": " Note The following commands might already be familiar to you. Practicing them and using the commands many times over makes them second nature. Once you are comfortable with them the speed at which you can execute them and move swiftly through your terminal for common tasks becomes an excellent tool at your disposal!\nUsing your terminal, navigate to your Home directory using cd ~.\nUse ls to view the contents of your Home directory.\nUse cd to move into your Desktop directory. For most, the command to do this is cd Desktop/ since the Desktop is most often a child of the Home directory.\nIn the terminal, use mkdir to create a folder on the Desktop called ‘my_first_directory’. Look on your Desktop. Do you see it?\nCheck Your Solution Use cd my_first_directory/ to move inside that directory.\npwd to check your location.\nThere, make a file called ‘my_first_file.txt’ with touch my_first_file.txt.\nOpen the file and write yourself a message!\nBack in the terminal, list the contents of your current directory from the terminal with ls.\nCheck Your Solution Make a copy of your ‘my_first_file.txt’ from it’s current spot to directly on the Desktop with cp my_first_file.txt ../my_first_copy.txt.\nMove back out to your Desktop directory from the terminal with cd ...\nUse ls in the terminal to verify your ‘my_first_copy.txt’ on your Desktop. Print the contents of the file to standard out with the cat command. Is it the same as your first file?\nCheck Your Solution Move your copied file into your ‘my_first_directory’ with mv my_first_copy.txt my_first_directory/.\nUse ls to see that the copied file is no longer on your Desktop.\nType cd my_first_directory/, followed by ls to confirm that your copy has been moved into ‘my_first_directory’.\ncd .. to get back out to your Desktop.\nType rm -r my_first_directory/ and do a visual check, as well as ls on your terminal, to verify that the directory has been removed.\nCheck Your Solution ",
    "description": "",
    "tags": null,
    "title": "Exercises",
    "uri": "/terminal/exercises/index.html"
  },
  {
    "content": "OK, rookie. It’s time to train you on how to modify the shuttle’s cargo manifest. The following actions will teach you how to add, remove, modify and rearrange our records for the items stored in our hold.\nNote All of the following exercise files can be found in the javascript-projects directory at the following location:\njavascript-projects/arrays/exercises/part-(one-six)-arrays.js\nPart 1 Create an array called practiceFile with the following entry: 273.15. Use the push method to add the following elements to the array. Add items 1 \u0026 2 one at a time, then use a single push to add the items within section 3. Print the array after each step to confirm the changes.\n42 “hello” false, -4.6, “87” Congratulations, rookie. You can now add items to an array.\nCheck Your Solution let practiceFile = [273.15]; 42 practiceFile.push(42); console.log(practiceFile); false, -4.6, “87” practiceFile.push(false, -4.6, \"87\"); console.log(practiceFile); Part 2 push, pop, shift and unshift are used to add/remove elements from the beginning/end of an array. Bracket notation can be used to modify any element within an array. Starting with the cargoHold array ['oxygen tanks', 'space suits', 'parrot', 'instruction manual', 'meal packs', 'slinky', 'security blanket']\nWrite statements to do the following:\nUse bracket notation to replace 'slinky' in the array with 'space tether'. Print the array to confirm the change. Remove the last item from the array with pop. Print the element removed and the updated array. Remove the first item from the array with shift. Print the element removed and the updated array. Unlike pop and shift, push and unshift require arguments inside the (). Add the items 1138 and ‘20 meters’ to the array - the number at the start and the string at the end. Print the updated array to confirm the changes. Use a template literal to print the final array and its length. Status check, rookie. Which array methods ADD items, and where are the new entries placed? Which methods REMOVE items, and where do the entries come from? Which methods require entries inside the ()?\nCheck Your Solution let cargoHold = ['oxygen tanks', 'space suits', 'parrot', 'instruction manual', 'meal packs', 'slinky', 'security blanket']; Use bracket notation to replace 'slinky' in the array with 'space tether'. Print the array to confirm the change. cargoHold[5] = 'space tether'; console.log(cargoHold); Remove the first item from the array with shift. Print the element removed and the updated array. console.log(cargoHold.shift()); console.log(cargoHold); Use a template literal to print the final array and its length. console.log(`The array ${cargoHold} has a length of ${cargoHold.length}.`); Part 3 The splice method can be used to either add or remove items from an array. It can also accomplish both tasks at the same time. Review the :ref:splice appendix \u003csplice-examples\u003e if you need a syntax reminder. Use splice to make the following changes to the final cargoHold array from exercise 2. Be sure to print the array after each step to confirm your updates.\nInsert the string 'keys' at index 3 without replacing any other entries. Remove ‘instruction manual’ from the array. (Hint: indexOf is helpful to avoid manually counting an index). Replace the elements at indexes 2 - 4 with the items 'cat', 'fob', and 'string cheese'. Check Your Solution Insert the string 'keys' at index 3 without replacing any other entries. cargoHold.splice(3,0,'keys'); console.log(cargoHold); Replace the elements at indexes 2 - 4 with the items 'cat', 'fob', and 'string cheese'. cargoHold.splice(2,3,'cat','fob','string cheese'); console.log(cargoHold); Well done, cadet. Now let’s look at some finer details about array methods. We’ve got to keep our paperwork straight, so you need to know when your actions change the original records.\nPart 4 Some methods—like splice and push—alter the original array, while others do not. Use the the following arrays:\nholdCabinet1 ['duct tape', 'gum', 3.14, false, 6.022e23] and\nholdCabinet2 ['orange drink', 'nerf toys', 'camera', 42, 'parsnip'] to explore the following methods: concat, slice, reverse, sort. Refer back to the chapter if you need to review the proper syntax for any of these methods.\nPrint the result of using concat on the two arrays. Does concat alter the original arrays? Verify this by printing holdCabinet1 after using the method. Print a slice of two elements from each array. Does slice alter the original arrays? reverse the first array, and sort the second. What is the difference between these two methods? Do the methods alter the original arrays? Good progress, cadet. Here are two more methods for you to examine.\nCheck Your Solution Print the result of using concat on the two arrays. Does concat alter the original arrays? Verify this by printing holdCabinet1 after using the method. console.log(holdCabinet1.concat(holdCabinet2)); console.log(holdCabinet1); reverse the first array, and sort the second. What is the difference between these two methods? Do the methods alter the original arrays? holdCabinet1.reverse(); holdCabinet2.sort(); console.log(holdCabinet1); console.log(holdCabinet2); Part 5 The split method converts a string into an array, while the join method does the opposite.\nTry it! Given the string str = 'In space, no one can hear you code.', see what happens when you print str.split() vs. str.split('e') vs. str.split(' ') vs. str.split(''). What is the purpose of the parameter inside the ()? Given the array arr = ['B', 'n', 'n', 5], see what happens when you print arr.join() vs. arr.join('a') vs. arr.join(' ') vs. arr.join(''). What is the purpose of the parameter inside the ()? Do split or join change the original string/array? The benefit, cadet, is that we can take a string with delimiters (like commas) and convert it into a modifiable array. Try it! Alphabetize these hold contents: “water,space suits,food,plasma sword,batteries”, and then combine them into a new string. Nicely done, astronaut. Now it’s time to bring you fully up to speed.\nCheck Your Solution Try it! Given the string str = 'In space, no one can hear you code.', see what happens when you print str.split() vs. str.split('e') vs. str.split(' ') vs. str.split(''). What is the purpose of the parameter inside the ()? console.log(str.split()); console.log(str.split('e')); console.log(str.split(' ')); console.log(str.split('')); The benefit, cadet, is that we can take a string with delimiters (like commas) and convert it into a modifiable array. Try it! Alphabetize these hold contents: “water,space suits,food,plasma sword,batteries”, and then combine them into a new string. console.log(cargoHold.split(',').sort().join(',')); Part 6 Arrays can hold different data types, even other arrays! A multi-dimensional array is one with entries that are themselves arrays.\nDefine and initialize the following arrays, which hold the name, chemical symbol and mass for different elements: element1 = ['hydrogen', 'H', 1.008] element2 = ['helium', 'He', 4.003] element26 = ['iron', 'Fe', 55.85] Define the array table, and use push(arrayName) to add each of the element arrays to it. Print table to see its structure. Use bracket notation to examine the difference between printing table[1] and table[1][1]. Don’t just nod your head! I want to HEAR you describe this difference. Go ahead, talk to your screen. Using bracket notation and the table array, print the mass of element1, the name for element 2 and the symbol for element26. table is an example of a 2-dimensional array. The first “level” contains the element arrays, and the second level holds the name/symbol/mass values. Experiment! Create a 3-dimensional array and print out one entry from each level in the array. Check Your Solution Define and initialize the following arrays, which hold the name, chemical symbol and mass for different elements: element1 = ['hydrogen', 'H', 1.008] element2 = ['helium', 'He', 4.003] element26 = ['iron', 'Fe', 55.85] let element1 = ['hydrogen', 'H', 1.008]; let element2 = ['helium', 'He', 4.003]; let element26 = ['iron', 'Fe', 55.85]; Use bracket notation to examine the difference between printing table[1] and table[1][1]. Don’t just nod your head! I want to HEAR you describe this difference. Go ahead, talk to your screen. console.log(table[1], table[1][1]); Excellent work, records keeper. Welcome aboard.\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Arrays",
    "uri": "/arrays/exercises/index.html"
  },
  {
    "content": "Attempt these exercises to test your understanding. Don’t worry if you struggle while working on them. Struggling and then reviewing the material will help you remember it.\nTake note of any problem here or topic from this chapter that you don’t understand. Take a break and return to the problem. Do you see it in a new way or have a better understanding? If not, try spending five minutes researching the topic. Start with this book and if you still have questions, ask one on the internet or Slack/Discourse. You’re not the first person to learn to code and you’re definitely not the first person to ask a question or get stuck!\nDeclare and initialize the following variables for our space shuttle Variable Name Value engineIndicatorLight red blinking spaceSuitsOn true shuttleCabinReady true crewStatus spaceSuitsOn \u0026\u0026 shuttleCabinReady computerStatusCode 200 shuttleSpeed 15000 Check Your Solution let engineIndicatorLight = \"red blinking\"; let spaceSuitsOn = true; let shuttleCabinReady = true; let crewStatus = spaceSuitsOn \u0026\u0026 shuttleCabinReady; let computerStatusCode = 200; let shuttleSpeed = 15000; Examine the code below. What will be printed to the console?\nUse the value of engineIndicatorLight defined above to answer this question.\nif (engineIndicatorLight === \"green\") { console.log(\"engines have started\"); } else if (engineIndicatorLight === \"green blinking\") { console.log(\"engines are preparing to start\"); } else { console.log(\"engines are off\"); } Write conditional expressions to satisfy the safety rules.\nUse the variables defined from the table above to satisfy the rules listed below.\ncrewStatus\nIf the value is true, print “Crew Ready” Else print “Crew Not Ready” Check Your Solution if (crewStatus) { console.log(\"Crew Ready\"); } else { console.log(\"Crew Not Ready\"); } computerStatusCode\nIf the value is 200, print “Please stand by. Computer is rebooting.” Else if the value is 400, print “Success! Computer online.” Else print “ALERT: Computer offline!” Check Your Solution if (computerStatusCode === 200) { console.log(\"Please stand by. Computer is rebooting.\"); } else if (computerStatusCode === 400) { console.log(\"Success! Computer online.\"); } else { console.log(\"ALERT: Computer offline!\"); } shuttleSpeed\nIf the value is \u003e 17500, print “ALERT: Escape velocity reached!” Else if the value is \u003c 8000, print “ALERT: Cannot maintain orbit!” Else print “Stable speed” Check Your Solution if (shuttleSpeed \u003e 17500) { console.log(\"ALERT: Escape velocity reached!\"); } else if (shuttleSpeed \u003c 8000) { console.log(\"ALERT: Cannot maintain orbit!\"); } else { console.log(\"Stable speed.\"); } PREDICT\nDo these code blocks produce the same result? Answer Yes or No.\nif (crewStatus \u0026\u0026 computerStatusCode === 200 \u0026\u0026 spaceSuitsOn) { console.log(\"all systems go\"); } else { console.log(\"WARNING. Not ready\"); } if (!crewStatus || computerStatusCode !== 200 || !spaceSuitsOn) { console.log(\"WARNING. Not ready\"); } else { console.log(\"all systems go\"); } Monitor the shuttle’s fuel status.\nImplement the checks below using if / else if / else statements. Order is important when working with conditionals, and the checks below are NOT written in the correct sequence. Please read ALL of the checks before coding and then decide on the best order for the conditionals.\nIf fuelLevel is above 20000 AND engineTemperature is at or below 2500, print “Full tank. Engines good.” If fuelLevel is above 10000 AND engineTemperature is at or below 2500, print “Fuel level above 50%. Engines good.” If fuelLevel is above 5000 AND engineTemperature is at or below 2500, print “Fuel level above 25%. Engines good.” If fuelLevel is at or below 5000 OR engineTemperature is above 2500, print “Check fuel level. Engines running hot.” If fuelLevel is below 1000 OR engineTemperature is above 3500 OR engineIndicatorLight is red blinking, print “ENGINE FAILURE IMMINENT!” Otherwise, print “Fuel and engine status pending…” Try It! Run your code several times ot make sure it prints the correct phrase for each set of conditions.\nfuelLevel engineTemperature engineIndicatorLight Result Any Any red blinking ENGINE FAILURE IMMINENT! 21000 1200 NOT red blinking Full tank. Engines good. 900 Any Any ENGINE FAILURE IMMINENT! 5000 1200 NOT red blinking Check fuel level. Engines running hot. 12000 2600 NOT red blinking Check fuel level. Engines running hot. 18000 2500 NOT red blinking Fuel level above 50%. Engines good. Check Your Solution if (fuelLevel \u003c 1000 || engineTemperature \u003e 3500 || engineIndicatorLight === \"red blinking\"){ console.log(\"ENGINE FAILURE IMMINENT!\"); } else if (fuelLevel \u003c= 5000 || engineTemperature \u003e 2500){ console.log(\"Check fuel level. Engines running hot.\"); } else if (fuelLevel \u003e 20000 \u0026\u0026 engineTemperature \u003c= 2500){ console.log(\"Full tank. Engines good.\"); } else if (fuelLevel \u003e 10000 \u0026\u0026 engineTemperature \u003c= 2500){ console.log(\"Fuel level above 50%. Engines good.\"); } else if (fuelLevel \u003e 5000 \u0026\u0026 engineTemperature \u003c= 2500){ console.log(\"Fuel level above 25%. Engines good.\"); } else { console.log(\"Fuel and engine status pending...\"); } Final bit of fun!\nThe shuttle should only launch if the fuel tank is full and the engine check is OK. However, let’s establish an override command to ignore any warnings and send the shuttle into space anyway!\nCreate the variable commandOverride, and set it to be true or false.\nIf commandOverride is false, then the shuttle should only launch if the fuel and engine check are OK.\nIf commandOverride is true, then the shuttle will launch regardless of the fuel and engine status.\nCode the following if / else check:\nIf fuelLevel is above 20000 AND engineIndicatorLight is NOT red blinking OR commandOverride is true print “Cleared to launch!”\nElse print “Launch scrubbed!”\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Booleans and Conditionals",
    "uri": "/decisions-with-conditionals/exercises/index.html"
  },
  {
    "content": "We have built a website for you to test your CSS knowledge. You can find the code within your javascript-projects/css/exercises directory!\nNote Open the index.html file in your browser to view the application.\nUtilize the pwd command to view your current working directory:\nThe current working directory in the above image is /home/john/Documents/launchcode/curriculum/exercises-studios/javascript-projects/css/exercises\nIf you copy and paste the filepath after you run the pwd on your machine into a browser window and add index.html to the end of the string you will find your application.\nFor the exercises, add the following style rules to the website:\nChange the background color to yellow.\nCheck Your Solution body { background-color: yellow; } Change all paragraph text color to green.\nChange all h1 to 36 px font size.\nCheck Your Solution h1 { font-size: 36px; } Align all text to the center of the page.\nLet’s say that you don’t like aligning all of the text to the center. Use a CSS class to align only the headings to the center of the page.\nCheck Your Solution .center { text-align: center; } Within index.html add a center class to all header tags (h1, h2 etc.)\nCheck Your Solution \u003cbody\u003e \u003ch1 class=\"center\"\u003eMy Very Cool Web Page\u003c/h1\u003e \u003ch2 class=\"center\"\u003eWhy this Website is Very Cool\u003c/h2\u003e \u003col\u003e \u003cli\u003eI made it!\u003c/li\u003e \u003cli\u003eThis website is colorful!\u003c/li\u003e \u003c/ol\u003e \u003ch2 class=\"center\" id=\"cool-text\"\u003eWhy I love Web Development\u003c/h2\u003e \u003cp\u003eWeb Development is a very cool skill that I love learning!\u003c/p\u003e \u003cp\u003eI love making websites because all I have to do is reload the page to see the changes I have made!\u003c/p\u003e \u003c/body\u003e Change the font color of elements with the id, cool-text, to blue.\nUse a CSS id to change the elements in the ordered list to a color of your choosing.\nCheck Your Solution #list-color { color: blueviolet; } Within index.html add the id attribute to the ol tag.\nCheck Your Solution \u003col id=\"list-color\"\u003e \u003cli\u003eI made it!\u003c/li\u003e \u003cli\u003eThis website is colorful!\u003c/li\u003e \u003c/ol\u003e Note We learned from the reading that the location of CSS and the selector type can change the order of precedence of the CSS rules. Try different locations and selector types and see what happens!\n",
    "description": "",
    "tags": null,
    "title": "Exercises: CSS",
    "uri": "/styling-css/exercises/index.html"
  },
  {
    "content": "Exercises appear regularly in the book. Just like the concept checks, these exercises will check your understanding of the topics in this chapter. They also provide good practice for the new skills.\nWe’ve included our solutions to some (but not all) of the exercises so that you can check your own work after you practice. As with any learning opportunity, take it seriously and give every exercise a fair shot before peeking at the solution. Our solution may not look exactly like yours, but that’s ok. There’s often more than one way to solve a problem with code.\nYou don’t need to show proof of completing the exercises to pass, so do them for your own benefit. And if they’re hard or you get some answers wrong on the first try, keep going! Your future self will thank you.\nUnlike the concept checks, you will need a code editor to complete the exercises. We will be using Visual Studio Code as our code editor.\nNote Fork and Clone the following github repository to get started: JavaScript Projects The Data Use the information given below about your space shuttle to complete the exercises:\nData Value Name of the space shuttle Determination Shuttle Speed (mph) 17,500 Distance to Mars (km) 225,000,000 Distance to the Moon (km) 384,400 Miles per kilometer 0.621 The Exercises Declare and assign variables Declare and assign a variable for each item in the Data Table above. Tip When declaring and assigning your variables, remember that you will need to use that variable throughout the rest of the exercises. Make sure that you are using the correct data type!\nCheck Your Solution! let shuttleName = 'Determination'; let shuttleSpeedMph = 17500; let distanceToMarsKm = 225000000; let distanceToMoonKm = 38400; const milesPerKm = 0.621; Print out the type of each variable For each variable you declared in part A, use the typeof operator to print its type to the console, one item per line.\nVerify your code works as expected by running the program. Once you have the correct output move on to Calculate a space mission! Note In order to run your program, open a terminal and navigate to the directory containing your data-and-variables-exercises.js file.\nThe following command will run any code within the file:\nnode data-and-variables-exercises.js Calculate a space mission! We need to determine how many days it will take to reach Mars.\nCreate and assign a miles to Mars variable. You can get the miles to Mars by multiplying the distance to Mars in kilometers by the miles per kilometer.\nCheck your solution let milesToMars = kilometersToMars * milesPerKilometer; Next, we need a variable to hold the hours it would take to get to Mars. To get the hours, you need to divide the miles to Mars by the shuttle’s speed.\nCheck your solution let hoursToMars = milesToMars / shuttleSpeedMph; Finally, declare a variable and assign it the value of days to Mars. In order to get the days it will take to reach Mars, you need to divide the hours it will take to reach Mars by 24.\nCheck your solution let daysToMars = hoursToMars / 24; Print out the results of your calculations Using variables from above, print to the screen a sentence that says \"_____ will take ___ days to reach Mars.\" Fill in the blanks with the shuttle name and the calculated time.\nVerify that your code works as expected by running the program. Once you have the correct output move on to Calculate a trip to the Moon Calculate a trip to the Moon Repeat the calculations, but this time determine the number of days it would take to travel to the Moon and print to the screen a sentence that says \"_____ will take ___ days to reach the Moon.\".\nCheck Your Solution let milesToMoon = kilometersToMoon * milesPerKilometer; let hoursToMoon = milesToMoon / shuttleSpeedMph; let daysToMoon = hoursToMoon / 24; console.log(shuttleName + \" will take \" + daysToMoon + \" days to reach the Moon.\"); ",
    "description": "",
    "tags": null,
    "title": "Exercises: Data and Variables",
    "uri": "/data-and-variables/exercises/index.html"
  },
  {
    "content": "Zero Division: Throw Write a function called divide that takes two parameters: a numerator and a denominator.\nYour function should return the result of numerator / denominator.\nHowever, if denominator is zero you should throw the error, \"Attempted to divide by zero.\"\nNote Hint: You can use an if / throw statement to complete this exercise.\nCode your function within the javascript-projects/exceptions/exercises/divide.js\nCheck Your Solution function divide(numerator, denominator) { if (denominator === 0) { throw Error('You cannot divide by zero!'); } return numerator/denominator; } Test Student Labs Note The following starter code can be found at javascript-projects/exceptions/exercises/test-student-labs.js\nA teacher has created a gradeLabs function that verifies if student programming labs work. This function loops over an array of JavaScript objects that should contain a student property and runLab property.\nThe runLab property is expected to be a function containing the student’s code. The runLab function is called and the result is compared to the expected result. If the result and expected result don’t match, then the lab is considered a failure.\nfunction gradeLabs(labs) { for (let i=0; i \u003c labs.length; i++) { let lab = labs[i]; let result = lab.runLab(3); console.log(`${lab.student} code worked: ${result === 27}`); } } let studentLabs = [ { student: 'Carly', runLab: function (num) { return Math.pow(num, num); } }, { student: 'Erica', runLab: function (num) { return num * num; } } ]; gradeLabs(studentLabs); The gradeLabs function works for the majority of cases. However, what happens if a student named their function incorrectly? Run gradeLabs and pass it studentLabs2 as defined below.\nlet studentLabs2 = [ { student: 'Blake', myCode: function (num) { return Math.pow(num, num); } }, { student: 'Jessica', runLab: function (num) { return Math.pow(num, num); } }, { student: 'Mya', runLab: function (num) { return num * num; } } ]; gradeLabs(studentLabs2); Upon running the second example, the teacher gets TypeError: lab.runLab is not a function.\nAdd a try/catch block inside of gradeLabs to catch an exception if the runLab property is not defined. If the exception is thrown, result should be set to the text \"Error thrown\".\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Exceptions",
    "uri": "/exceptions/exercises/index.html"
  },
  {
    "content": "Fetch To practice fetching data, create a file called fetch_planets.html using touch in your terminal.\nAdd this preliminary HTML to your fetch_planets document:\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eFetch Planets\u003c/title\u003e \u003cscript\u003e window.addEventListener(\"load\", function(){ // TODO: fetch planets JSON }); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eDestination\u003c/h1\u003e \u003cdiv id=\"destination\"\u003e \u003ch3\u003ePlanet\u003c/h3\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e The URL where our planet data is located is: \"https://handlers.education.launchcode.org/static/planets.json\". Add the code to fetch this URL inside the load event listener.\nCheck Your Solution window.addEventListener(\"load\", function() { fetch(\"https://handlers.education.launchcode.org/static/planets.json\").then(function(response){ // TODO: do something after fetching and receiving a response }); }); Peek at the response returned in the request by adding a print statement inside of the function.\nCopy the file path of your HTML file and paste it as the URL in your browser. You won’t see much on the page yet. Open your developer tools and examine both the Console tab for the response value, as well as the Network tab for the request status.\nUse the .json() method on your response now to see more of the data in the console: What data type do you see printed?\nCheck Your Solution fetch(\"https://handlers.education.launchcode.org/static/planets.json\").then(function(response){ response.json().then(function(json) { console.log(json); }); }); Replace your console.log(json) with the following to view a portion of the JSON into the app.\nconst destination = document.getElementById(\"destination\"); destination.innerHTML = `\u003ch3\u003ePlanet ${json[0].name}\u003c/h3\u003e`; Refresh the page to see some new data in your HTML. Play around by changing the index number. Does the planet name change? Can you change the planet’s property being printed?\nNow, what happens if we move those last lines we added to outside and after the fetch request?\nSince json hasn’t been defined outside of the response.json() method yet, in order to move the template literal that uses that json variable, we’ll need to initiate it outside of the function call. Let’s also put our print statement back so we can verify that our fetch works.\nRefresh the page and try this. See any data? See anything of note in the console?\nCheck Your Solution window.addEventListener(\"load\", function() { let json = []; fetch(\"https://handlers.education.launchcode.org/static/planets.json\").then(function(response){ response.json().then(function(json) { console.log(json); }); }); const destination = document.getElementById(\"destination\"); destination.innerHTML = `\u003ch3\u003ePlanet ${json[0].name}\u003c/h3\u003e`; }); Note You should not expect a response. Take note of the error that you see in the console!\nOur last task left us with some knowledge about where and how we can use the fetched data, but we don’t really want to keep those changes. Instead, how about we use an event to change the planet information we see? Let’s move the DOM manipulation to inside a click handler.\nfetch(\"https://handlers.education.launchcode.org/static/planets.json\").then(function(response){ response.json().then(function(json) { const destination = document.getElementById(\"destination\"); destination.addEventListener(\"click\", function(){ destination.innerHTML = ` \u003cdiv\u003e \u003ch3\u003ePlanet ${json[0].name}\u003c/h3\u003e \u003cimg src=${json[0].image} height=250\u003e\u003c/img\u003e \u003c/div\u003e `; }); }); }); Now, after refreshing the page, you can click on the Planet header to make the name and image appear. Take note, we’re still fetching on load, just not displaying the data until the header is clicked.\nFor fun and good measure, let’s dynamically change which planet’s info we’re displaying each time the header is clicked. To do this,\nDeclare a counter variable, index that changes each time a click event takes place. Use the value of index as the position in the planets array to use in the template literal. Finally, since we want to cap the value of index so that it does not exceed the length of the planets array, use a modulo to control how large index can get. Et voila! Our destination changes on each click!\nCheck Your Solution fetch(\"https://handlers.education.launchcode.org/static/planets.json\").then(function(response) { response.json().then(function(json) { const destination = document.getElementById(\"destination\"); let index = 0; destination.addEventListener(\"click\", function(){ destination.innerHTML = ` \u003cdiv\u003e \u003ch3\u003ePlanet ${json[index].name}\u003c/h3\u003e \u003cimg src=${json[index].image} height=250\u003e\u003c/img\u003e \u003c/div\u003e `; index = (index + 1) % json.length; }); }); }); Put on your planetary shoes. We are moving through planets!\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Fetch",
    "uri": "/fetch/exercises/index.html"
  },
  {
    "content": "Hello programmer, we need you to make a Rocket Simulation form.\nForm Data This is the kind of data the Rocket Simulation form will need to process.\nData Fields for the Rocket Simulation Form Display Name Input Type Input Name Possible Values Test Name text testName No limitations Test Date date testDate Date format mm/dd/yyyy Rocket Type select rocketType Brant, Lynx, Orion, Terrier Number of Rocket Boosters number boosterCount A positive number less than 10 Wind Rating radio windRating No Wind: with value 0, Mild: with value 10, Strong: with value 20 Use production grade servers checkbox productionServers on or off Form Display Your completed simulation form will look roughly like this:\nSubmitted Values\ntestName=Moon+Shot testDate=2020-07-16 rocketType=Lynx boosterCount=3 windRating=10 productionServers=on Starting Codebase Code your solution within the javascript-projects/user-input-with-forms/exercises directory.\nInstructions Please follow the steps below and good luck!\nCreate a \u003cform\u003e with these attributes.\nSet method to \"POST\" Set action to \"https://handlers.education.launchcode.org/request-parrot\" Check Your Solution \u003cform action=\"https://handlers.education.launchcode.org/request-parrot\" method=\"POST\"\u003e // the rest of your form fields go in here // \u003c/form\u003e Add a \u003clabel\u003e and \u003cinput\u003e for Test Name to the \u003cform\u003e.\n\u003clabel\u003eTest Name \u003cinput type=\"text\" name=\"testName\"/\u003e\u003c/label\u003e. Can you submit the form now? What is missing?\nCheck Your Solution You can’t submit the form with a button to submit it!\nAdd a \u003cbutton\u003eRun Simulation\u003c/button\u003e to the \u003cform\u003e. Enter a value into the “testName” input and submit the form. Was the value properly submitted to the form handler? Check Your Solution Yes! At this point, your form should be able to handle input into the “testName” field.\nRepeat steps 2 and 5 for the remaining data fields from the data table . Pay attention to the input types and possible options. Don’t forget to add a \u003clabel\u003e for each input. Bonus Mission Use an event handler and the submit event to validate that all inputs have values. Do NOT let the form be submitted if inputs are empty.\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Forms",
    "uri": "/user-input-with-forms/exercises/index.html"
  },
  {
    "content": "To solve problems with code, you need to be able to break large problems into small ones. Usually, these smaller problems will take the form of functions that are used to solve the larger problem. Therefore, to solve problems with code, you need to be skilled at writing functions. And to master functions, you need to write a lot of them.\nThese exercises ask you to write many relatively small functions, which combine to form larger, more complicated ones.\nAt the end, you will be able to create strings of shapes, like this nifty diamond:\n# ### ##### ####### ######### ######### ####### ##### ### # There is no starter code for these exercises, so create a new JavaScript file within your javascript-projects/functions directory to get started.\nRectangles makeLine(size) function Write a function makeLine(size) that returns a line with exactly size hashes.\nconsole.log(makeLine(5)); Console Output\n##### Check Your Solution function makeLine(size) { let line = ''; for (let i = 0; i \u003c size; i++) { line += '#'; } return line; } makeSquare(size) function Write a function called makeSquare(size) that returns a size by size string of hashes. The function should NOT print each row of the square. Instead, it must return a single string that contains the entire shape.\nTip Call your makeLine function to create each row of the square. The newline character, \\n, will be helpful to you. Do NOT include a newline character at the end of your string. console.log(makeSquare(5)); Console Output\n##### ##### ##### ##### ##### Warning For each of the shape exercises, do not include a newline character at the very end of your string. While the final \\n might not be noticeable for the simpler shapes, including it will make life harder for you toward the end of the exercises.\nmakeRectangle(width, height) function Write a function makeRectangle(width, height) that returns a rectangle with the given width and height. Use your makeLine function to do this.\nconsole.log(makeRectangle(5, 3)); Console Output\n##### ##### ##### Check Your Solution function makeRectangle(width, height) { let rectangle = ''; for (let i = 0; i \u003c height; i++) { rectangle += (makeLine(width) + '\\n'); } return rectangle.slice(0, -1); } Now, go back and rewrite makeSquare to use makeRectangle.\nTriangles makeDownwardStairs(height) function Write a function makeDownwardStairs(height) that prints the staircase pattern shown below, with the given height. Use your makeLine function to do this.\nconsole.log(makeDownwardStairs(5)); Console Output\n# ## ### #### ##### Check Your Solution function makeDownwardStairs(height) { let stairs = ''; for (let i = 0; i \u003c height; i++) { stairs += (makeLine(i+1) + '\\n'); } return stairs.slice(0, -1); } makeSpaceLine(numSpaces, numChars) function Write a function makeSpaceLine(numSpaces, numChars) that returns a line with exactly the specified number of spaces, followed by the specified number of hashes, followed again by numSpaces more spaces.\nconsole.log(makeSpaceLine(3, 5)); Console Output\n___#####___ Note We have inserted underscores to represent spaces, so they are visible in the output. Don’t do this in your code.\nmakeIsoscelesTriangle(height) function Write a function makeIsoscelesTriangle(height) that returns a triangle of the given height.\nconsole.log(makeIsoscelesTriangle(5)); Console Output\n# ### ##### ####### ######### Tip Consider the top line of the triangle to be level 0, the next to be line 1, and so on. Then line i is a space-line with height - i - 1 spaces and 2 * i + 1 hashes.\nCheck Your Solution function makeIsoscelesTriangle(height) { let triangle = ''; for (let i = 0; i \u003c height; i++) { triangle += (makeSpaceLine(height - i - 1, 2*i + 1) + '\\n'); } return triangle.slice(0, -1); } Diamonds makeDiamond(height) function Write a function makeDiamond(height) that returns a diamond where the triangle formed by the top portion has the given height.\nconsole.log(makeDiamond(5)); Console Output\n# ### ##### ####### ######### ######### ####### ##### ### # Tip Consider what happens if you create a triangle and reverse it using our reverse function .\nBonus Mission Refactor your functions so that they take a single character as a parameter, and draw the shapes with that character instead of always using '#'. Make the new parameter optional, with default value '#'.\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Functions",
    "uri": "/functions/exercises/index.html"
  },
  {
    "content": "Practice makes better. You will create a project that accomplishes the following:\nSteps through a list of Yes/No questions. Calls functions based on the user’s responses. Rather than coding all of the functions from scratch, you are going to use existing modules to help assemble your project.\nThe starter code for these exercises can be found within your javascript-projects/modules/exercises directory.\nExport Finished Modules Lucky you! Some of your teammates have already coded the necessary functions in the averages.js and display.js files.\nIn averages.js, add code to export all of the functions within an object.\nCheck Your Solution module.exports = { averageForStudent: averageForStudent, averageForTest: averageForTest }; In display.js, add code to export ONLY printAll as a function.\nCode \u0026 Export New Module randomSelect.js requires your attention.\nAdd code to complete the randomFromArray function. It should take an array as an argument and then return a randomly selected element from that array.\nCheck Your Solution function randomFromArray(arr){ let index = Math.floor(Math.random()*arr.length); return arr[index]; } Do not forget to export the randomFromArray function so you can use it in your project.\nImport Required Modules The project code is in index.js. Start by importing the required modules:\nAssign readline-sync to the input variable.\nCheck Your Solution const input = require('readline-sync'); Assign the functions from averages.js to the averages variable.\nAssign the printAll function from display.js to the printAll variable.\nCheck Your Solution const printAll = require('./display.js'); Assign the function from randomSelect.js to the randomSelect variable.\nFinish the Project Now complete the project code. The comments in index.js will still show you where to add code for the following tasks:\nCall printAll to display all of the tests and student scores. Be sure to pass in the correct arguments.\nCheck Your Solution printAll(astronauts, testTitles, scores); Using dot notation, call averageForTest to print the class average for each test. Use j and scores as arguments.\nCall averageForStudent (with the proper arguments) to print each astronaut’s average score.\nCheck Your Solution let avg = averages.averageForStudent(j, scores); Call randomSelect to pick the next spacewalker from the astronauts array.\nSanity check! Properly done, your output should look something like:\nConsole Output\nWould you like to display all scores? Y/N: y Name Math Fitness Coding Nav Communication Fox 95 86 83 81 76 Turtle 79 71 79 87 72 Cat 94 87 87 83 82 Hippo 99 77 91 79 80 Dog 96 95 99 82 70 Would you like to average the scores for each test? Y/N: y Math test average = 92.6%. Fitness test average = 83.2%. Coding test average = 87.8%. Nav test average = 82.4%. Communication test average = 76%. Would you like to average the scores for each astronaut? Y/N: y Fox's test average = 84.2%. Turtle's test average = 77.6%. Cat's test average = 86.6%. Hippo's test average = 85.2%. Dog's test average = 88.4%. Would you like to select the next spacewalker? Y/N: y Turtle is the next spacewalker. ",
    "description": "",
    "tags": null,
    "title": "Exercises: Modules",
    "uri": "/modules/exercises/index.html"
  },
  {
    "content": " Note Work on the following studio within your javascript-projects/more-on-functions/exercises directory.\nArrr! Welcome back, pirates.\nPractice Your Skills First, create an anonymous function and practice how to use the map method.\nCreate an anonymous function and set it equal to a variable. Your function should: If passed a number, return the tripled value.\nCheck Your Solution let practice = function(myArg) { if (typeof myArg === \"number\") { return myArg * 3; } } If passed a string, return the string “ARRR!”\nIf NOT passed a number or string, return the data unchanged.\nCheck Your Solution let practice = function(myArg) { if (typeof myArg === \"number\") { return myArg * 3; } else if (typeof myArg === \"string\") { return \"ARRR!\"; } else { return myArg; } } Add to your code! Use your function and the map method to change the array ['Elocution', 21, 'Clean teeth', 100] as follows: Triple all the numbers. Replace the strings with “ARRR!” Print the new array to confirm your work. Raid a Shuttle You may still be wondering Why would I ever use an anonymous function? For today’s mission, of course!\nYou need to hack into the shuttle code and steal supplies. Since the LaunchCode TAs keep a sharp eye on the shuttle goodies, you can’t just add new functions like siphonFuel or lootCargo. You need to be more sneaky.\nClever.\nInvisible.\nAnonymous.\nThe first mate swiped a copy of the code you need to hack:\nfunction checkFuel(level) { if (level \u003e 100000){ return 'green'; } else if (level \u003e 50000){ return 'yellow'; } else { return 'red'; } } function holdStatus(arr){ if (arr.length \u003c 7) { return `Spaces available: ${7 - arr.length}`; } else if (arr.length \u003e 7){ return `Over capacity by ${arr.length - 7} items.` } else { return \"Full\"; } } let fuelLevel = 200000; let cargoHold = ['meal kits', 'space suits', 'first-aid kit', 'satellite', 'gold', 'water', 'AE-35 unit']; console.log(\"Fuel level: \"+ checkFuel(fuelLevel)); console.log(\"Hold status: \"+ holdStatus(cargoHold)); First, steal some fuel from the shuttle: Define an anonymous function and set it equal to a variable with a normal, non-suspicious name. The function takes one parameter. This will be the fuel level on the shuttle.\nCheck Your Solution let nonSuspiciousFunction = function(a) { } You must siphon off fuel without alerting the TAs. Inside your function, you want to reduce the fuel level as much as possible WITHOUT changing the color returned by the checkFuel function.\nOnce you figure out how much fuel to pump out, return that value.\nCheck Your Solution let nonSuspiciousFunction = function(a) { if (checkFuel(a) === 'green') { return a - 100001; } else if (checkFuel(a) === 'yellow') { return a - 50001; } else { return a; } }; Decide where to best place your function call to gather our new fuel.\nTip Be sure to test your function! Those bilge rat TAs will notice if they lose too much fuel.\nNext, liberate some of that glorious cargo. Define another anonymous function with an array as a parameter, and set it equal to another innocent variable. You need to swipe two items from the cargo hold. Choose well. Stealing water ain’t gonna get us rich. Put the swag into a new array and return it from the function. The cargo hold has better security than the fuel tanks. It counts how many things are in storage. You need to replace what you steal with something worthless. The count MUST stay the same, or you’ll get caught and thrown into the LaunchCode brig. Don’t get hasty, matey! Remember to test your function. Finally, you need to print a receipt for the accountant. Don’t laugh! That genius knows MATH and saves us more gold than you can imagine. Define a function called irs that can take fuelLevel and cargoHold as arguments.\nCheck Your Solution let irs = function(levelOfFuel, itemsInCargo) { } Call your anonymous fuel and cargo functions from within irs.\nUse a template literal to return, \"Raided _____ kg of fuel from the tanks, and stole ____ and ____ from the cargo hold.\"\nCheck Your Solution let irs = function(levelOfFuel, itemsInCargo { let arr = deckMops(itemsInCargo); return `Raided ${nonSuspiciousFunction(fuelLevel)} kg of fuel from the tanks, and stole ${arr[0]} and ${arr[1]} from the cargo hold.` } ",
    "description": "",
    "tags": null,
    "title": "Exercises: More on Functions",
    "uri": "/more-on-functions/exercises/index.html"
  },
  {
    "content": "Part One The length method returns how many characters are in a string. However, the method will NOT give us the length of a number. If num = 1001, num.length returns undefined rather than 4. Use type conversion to print the length (number of digits) of an integer.\nPrint the number of digits in a DECIMAL value (e.g. num = 123.45 has 5 digits but a length of 6).\nModify your code to print out the length of a decimal value EXCLUDING the period. What if num could be EITHER an integer or a decimal? Add an if/else statement so your code can handle both cases. (Hint: Consider the indexOf() or includes() string methods).\nCheck Your Solution if (String(num).includes('.')){ console.log(String(num).length-1); } else { console.log(String(num).length); } Part Two Remember, strings are immutable. Consider a string that represents a strand of DNA: dna = \" TCG-TAC-gaC-TAC-CGT-CAG-ACT-TAa-CcA-GTC-cAt-AGA-GCT \". There are some typos in the string that we would like to fix: Use the trim() method to remove the leading and trailing whitespace, and then print the results.\nCheck Your Solution let dna = \" TCG-TAC-gaC-TAC-CGT-CAG-ACT-TAa-CcA-GTC-cAt-AGA-GCT \"; let newString = dna.trim(); console.log(newString); Change all of the letters in the dna string to UPPERCASE and print the result.\nNote that if you try console.log(dna) after applying the methods, the original, flawed string is displayed. To fix this, you need to reassign the changes back to dna. Apply these fixes to your code so that console.log(dna) prints the DNA strand in UPPERCASE with no whitespace.\nCheck Your Solution let dna = \" TCG-TAC-gaC-TAC-CGT-CAG-ACT-TAa-CcA-GTC-cAt-AGA-GCT \"; dna = dna.trim().toUpperCase(); console.log(dna); Let’s use string methods to do more work on the DNA strand: Replace the sequence 'GCT' with 'AGG', and then print the altered strand.\nCheck Your Solution dna = dna.replace('GCT','AGG'); console.log(dna); Look for the sequence 'CAT' with indexOf(). If found print, 'CAT found', otherwise print, 'CAT NOT found'.\nUse slice() to print out the fifth set of 3 characters (called a codon) from the DNA strand.\nCheck Your Solution console.log(dna.slice(16,19)); Use a template literal to print, \"The DNA strand is ___ characters long.\"\nJust for fun, apply methods to dna and use another template literal to print, 'taco cat'.\nCheck Your Solution console.log(`${dna.slice(4,7).toLowerCase()}o ${dna.slice(dna.indexOf('CAT'),dna.indexOf('CAT')+3).toLowerCase()}`); Part Three If we want to turn the string 'JavaScript' into 'JS', we might try .remove(). Unfortunately, there is no such method in JavaScript. However, we can use our cleverness to achieve the same result. Use string concatenation and two slice() methods to print 'JS' from 'JavaScript'.\nCheck Your Solution let language = 'JavaScript'; console.log(language.slice(0,1)+language.slice(4,5)); Without using slice(), use method chaining to accomplish the same thing.\nUse bracket notation and a template literal to print, \"The abbreviation for 'JavaScript' is 'JS'.\"\nCheck Your Solution console.log(`The abbreviation for '${language}' is '${initials}'.`) Just for fun, try chaining 3 or more methods together, and then print the result.\nSome programming languages (like Python) include a title() method to return a string with Every Word Capitalized (e.g. 'title case'.title() returns Title Case). JavaScript has no title() method, but that won’t stop us! Use the string methods you know to print 'Title Case' from the string 'title case'. ",
    "description": "",
    "tags": null,
    "title": "Exercises: Strings",
    "uri": "/stringing-characters-together/exercises/index.html"
  },
  {
    "content": "Time to make a flight simulator for your fellow astronauts! The provided HTML and JavaScript files can be used for all of the exercises. For each exercise, the requirements and desired effect of the events is listed.\nNote The following files can be found within your javascript-projects/dom-and-events/exercises directory.\nWhen the Take off button is clicked, the text The shuttle is on the ground changes to Houston, we have liftoff!. The Take off button has an id=\"liftoffButton\" attribute.\nCheck Your Solution button.addEventListener('click', event =\u003e { paragraph.innerHTML = 'Houston! We have liftoff!'; }); When the user’s cursor goes over the Abort Mission button, the button’s background turns red. The Abort Mission button has id=\"abortMission\".\nWhen the user’s cursor leaves the Abort Mission button, the button’s background returns to its original state\nTip Setting the background color to the empty string, \"\", will force it to revert to the default browser styles.\nCheck Your Solution missionAbort.addEventListener(\"mouseout\", function( event ) { event.target.style.backgroundColor = \"\"; }); When the user clicks the Abort Mission button, make a confirmation window that says Are you sure you want to abort the mission?. If the user confirms that they want to abort, the text changes to Mission aborted! Space shuttle returning home. ",
    "description": "",
    "tags": null,
    "title": "Exercises: The DOM and Events",
    "uri": "/dom-and-events/exercises/index.html"
  },
  {
    "content": "A filesystem is a structure for the computer to store the files and folders that make up the data of the operating system.\nInside a filesystem, folders are referred to as directories. Folders that exist inside other folders are called subdirectories. A root directory can refer to a few different things but essentially means the top-most directory of a given system. In other words, a root directory is not a sub-directory - but it will probably contain its own subdirectories. Inside the machine you work with, the root directory is the location of primary hard drive - in Windows, that’s your C drive; in a Mac, the root directory is represented as /. The root directory is the parent directory for the folders stored inside of it.\nExample Most of you have a Desktop folder on your computer. If you happened to store your javascript-projects folder on your Desktop, then the parent directory of javascript-projects is Desktop.\nA path for files and folders is the list of parent directories that the computer must go through to find that particular item.\nFilesystems have two different types of paths: absolute and relative. The absolute path is the path to a file from the root directory. The relative path is the path to a file from the current directory. When working with a relative path, you may find yourself wanting to go up into a parent directory to find a file in a different sub, or child, directory. In order to do so, you can use .. in the file path to tell the computer to go up to the parent directory.\nBelow you will find examples for both scenarios.\nAbsolute Path Example Envision a scenario where there is a file called homework.js located within the Desktop directory.\nThe absolute path for homework.js would be /Users/launchcode-learner/Desktop/homework.js for Mac users.\nThe absolute path for homework.js would be C:\\windows\\Desktop\\homework.js for Windows users.\nThe following screenshot was taken on a Linux machine where the absolute path for homework.js is /home/john/Desktop/homework.js. The user in the screenshot utilizes the pwd command to display the current working directory and the ls command to list the contents of that directory. You will learn about these commands and more in the next section.\nRelative Path Example Using the image below we will cover an example for a relative path:\nEnvision that the user is located within the java/spring-boot directory but they needed to copy the javascript file from the launchcode/curriculum directory. The relative path for this scenario is ../../launchcode/curriculum/javascript.\nThe following command would accomplish the above task:\ncp ../../launchcode/curriculum/javascript . Remember that the relative path is always going to be the path to your desired location from your current location.\nMany programmers use paths to navigate through the filesystem in the terminal. We will discuss the commands to do so in the next section.\n",
    "description": "",
    "tags": null,
    "title": "Filesystem and Paths",
    "uri": "/terminal/reading/filesystems-paths/index.html"
  },
  {
    "content": "Forms collect data input by the user. As we learned in the previous chapter, communication on the web occurs via a series of HTTP requests and responses. A form submission is an HTTP request sent to the server containing the values in a form.\nTrigger Form Submission A form submission is triggered by clicking a button inside the form. A submit button can be an input element with type=submit or a button element. Both button types are in the below example.\n\u003cform\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"\u003e\u003c/label\u003e \u003c!-- clicking either of these will cause a form submission --\u003e \u003cinput type=\"submit\"/\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e When a form is submitted, an HTTP request is sent to the location set in the action attribute of the \u003cform\u003e tag.\nIf the action attribute is not present or is empty, then the form will submit to the URL of the current page.\nTry It! Open the following form within your browser: javascript-projects/user-input-with-forms/chapter-examples/form-submission.html in a browser. Type values into the inputs, click the Submit button, and notice what happens to the address bar.\n\u003chtml\u003e \u003chead\u003e \u003ctitle\u003eForm Example\u003c/title\u003e \u003cstyle\u003e body { padding: 25px;} \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action=\"\"\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"\u003e\u003c/label\u003e \u003clabel\u003eTeam Name \u003cinput type=\"text\" name=\"team\"\u003e\u003c/label\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e Output\nOutput After Submitted\nNotice in the above example that the browser address has changed to:\nfile:///home/john/Desktop/javascript-projects/user-input-with-forms/chapter-examples/form-submission.html?username=John\u0026team=Space+Coders The web address is the same as the form we loaded, but now includes a query parameter for every input, with a name, in the form. These parameters are known as the query string parameters. The form values are submitted via the query string because the default submission type for forms is GET. In the next section, we will soon learn how to submit form data via POST.\nNote Since spaces are not allowed in URLs, the browser replaces them with +.\nKey-value Pairs When a form is submitted a key-value pair is created for each named input. The keys are the values of the name attributes, and they are paired with the content of the value attributes.\nForm with two named inputs:\n\u003cform action=\"\"\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"\u003e\u003c/label\u003e \u003clabel\u003eTeam Name \u003cinput type=\"text\" name=\"team\"\u003e\u003c/label\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e When this form is submitted with the values from the previous example, the query string looks like this:\nusername=John\u0026team=Space+Coders Check Your Understanding Question What must be added to a form to enable submission?\nQuestion By default, are HTTP forms submitted with GET or POST?\n",
    "description": "",
    "tags": null,
    "title": "Form Submission",
    "uri": "/user-input-with-forms/reading/form-submission/index.html"
  },
  {
    "content": "In order to take advantage of modules, we must import them with the require command. You have seen this before with readline-sync.\nconst input = require('readline-sync'); let name = input.question(\"What is your name?\"); console.log(`Hello, ${name}`); Line 1 imports the readline-sync module and assigns its functions to the input variable.\nModules are either single functions or objects that contain multiple functions. If importing a module returns a single function, we use the variable name to call that function. If the module returns an object, we use dot notation to call the functions stored in the object. In line 3, we see an example of this. input.question calls the question function stored in the readline-sync module.\nLater, we will see examples of importing and using single function modules.\nExample Let’s check the type of input after we import the readline-sync module.\nconst input = require('readline-sync'); console.log(typeof input); Console Output\nobject The readline-sync module contains several key/value pairs, each of which matches a key (e.g. question) with a specific function.\nWhere Do We Find Modules? Modules come from three places:\nA local file on your computer. Node itself, known as Core modules. An external registry such as NPM. How Does Node Know Where to Look? The string value passed into require tells Node where to look for a module.\nUser Created Modules If a module is stored on your computer, the string passed into require must provide a path and a filename. This path tells Node where to find the module, and it describes how to move up and down within the folders on your computer. Paths can be extremely detailed, but best practice recommends that you keep local modules either in the same folder as your project or only one level from your project. Simple paths are better!\nA relative path starts with ./ or ../.\n./ tells Node, Search for the module in the current project folder. ../ tells Node, Search for the module in the folder one level UP from the project. As an example, let’s assume we have a folder structure like:\nFollowing best practice gives us three scenarios for importing one file into another:\nThe module is in the same folder: If we want to import hello.js into index.js, then we add const hello = require('./hello.js'); on line 1 of index.js. The module is one level up: If we want to import hello.js into myCoolApp.js, then we add const hello = require('../hello.js'); on line 1 of myCoolApp.js. The module is one level down: If we want to import myCoolApp.js into index.js, then we add const coolApp = require('./Projects/myCoolApp.js'); on line 1 of index.js. This tells Node to search for myCoolApp.js in the Projects sub-folder, which is in the same folder as index.js. Other Modules If the filename passed to require does NOT start with ./ or ../, then Node checks two resources for the module requested.\nNode looks for a Core module with a matching name. Node looks for a module installed from an external resource like NPM. Core modules are installed in Node itself, and as such do not require a path description. These modules are local, but Node knows where to find them. Core modules take precedence over ANY other modules with the same name.\nNote W3 schools provides a convenient list of the Core Node modules.\nIf Node does not find the requested module after checking Core, it looks to the NPM registry , which contains hundreds of thousands of free code packages for developers.\nIn the next section, we will learn more about NPM and how to use it.\nPackage.json File Node keeps track of all the modules you import into your project. This list of modules is stored inside a package.json file.\nFor example, if we only import readline-sync, the file looks something like:\n{ \"main\": \"index.js\", \"dependencies\": { \"readline-sync\": \"1.4.9\" } } Note You may not have seen or noticed the package.json file yet, mainly because we have not mentioned it very often up to this point. We will continue to dive a bit deeper as we progress through the book.\nCheck Your Understanding Question Assume you have the following file structure:\nWhich statement allows you to import the rutabaga module into project.js?\nconst rutabaga = require('/rutabaga.js'); const rutabaga = require('./rutabaga.js'); const rutabaga = require('../rutabaga.js'); const rutabaga = require('./Tubers/rutabaga.js'); ",
    "description": "",
    "tags": null,
    "title": "Require Modules",
    "uri": "/modules/reading/require-modules/index.html"
  },
  {
    "content": "Your job here is to write two other scoring algorithms for the Scrabble player.\nsimpleScorer: Define a function that takes a word as a parameter and returns a numerical score. Each letter within the word is worth 1 point. vowelBonusScorer: Define a function that takes a word as a parameter and returns a score. Each vowel within the word is worth 3 points, and each consonant is worth 1 point. Note Make each scoring algorithm case insensitive, meaning that they should all ignore case when assigning points.\nOnce you’ve written these scoring functions, organize all three of the scoring options into an array. Your program will use the scoringAlgorithms array to retrieve information about the three scoring algorithms and convey that information to the user.\nFinish writing the scoringAlgorithms array. It should be populated with three objects, one for each of the three scoring options. Each object should contain three keys: name, description, and scorerFunction.\nExamine the table for the information to store in name and description. The scorerFunction for each object should be the name of one of the three scoring algorithms already defined.\nName Description Score Function Simple Score Each letter is worth 1 point. A function with a parameter for user input that returns a score. Bonus Vowels Vowels are 3 pts, consonants are 1 pt. A function that returns a score based on the number of vowels and consonants. Scrabble The traditional scoring algorithm. Uses the oldScrabbleScorer() function to determine the score for a given word. Finish writing scorerPrompt() so that the user can select which scoring algorithm to use when the program scores their word. Use the selected algorithm to determine the score for the word:\nIf the user enters 0, have the program output a score using the simple scorer. If the user enters 1, use the vowel bonus scoring function. If the user enters 2, use the Scrabble scoring option. scorerPrompt() should return the object the user has selected.\nTip Your scoringAlgorithms structure now holds all of the scoring information required for the program.\nTo access a scoring object and its properties, use a combination of bracket notation and dot notation.\nHere is an example:\n// Simple scoring console.log(\"algorithm name: \", scoringAlgorithms[0].name); console.log(\"scorerFunction result: \", scoringAlgorithms[0].scorerFunction(\"JavaScript\")); Console Output\nalgorithm name: Simple Score scorerFunction result: 10 Call scorerPrompt() inside of runProgram() so that the program asks the user for a scoring algorithm after prompting for a word. Use the scoring object returned from scorerPrompt() to score the user’s word and let the user know what score their word receives.\nBefore moving forward, your running program should behave roughly like this:\n$ node index Let's play some Scrabble! Enter a word to score: coconut Which scoring algorithm would you like to use? 0 - Simple: One point per character 1 - Vowel Bonus: Vowels are worth 3 points 2 - Scrabble: Uses scrabble point system Enter 0, 1, or 2: 0 Score for 'coconut': 7 ",
    "description": "",
    "tags": null,
    "title": "Task 2: Add and Organize Scoring Algorithms",
    "uri": "/assignments/scrabble-scorer/scoring-algorithms/index.html"
  },
  {
    "content": "Command Class Description We’ll follow TDD practices for the creation of Message and Rover, but for this class, Command, we’ve provided the functionality. Command is already written for you and you do not need to modify it to write passing tests. Open up and examine the file command.js.\nThis class builds an object with two properties: constructor(commandType, value)\ncommandType is a string that represents the type of command. We will go over the details of the types when we get to the Rover class and tests. At this time, note that a command type will be one of the following: MODE_CHANGE, MOVE, or STATUS_CHECK. To peek ahead at the full functionality of these types, refer to the Command Types Table . value is a value related to the type of command. Example let modeCommand = new Command('MODE_CHANGE', 'LOW_POWER'); let moveCommand = new Command('MOVE', 12000); MODE_CHANGE and MOVE are passed in as the commandType.\nLOW_POWER and 12000 are passed in as the value. Different command types require different kinds of values. STATUS_CHECK takes no value.\nDon’t worry about the mode options for now. To peek ahead, see the Rover Modes Table .\nNow that we’ve gone over the class, let’s check out the tests.\nCommand Tests To begin, open and examine spec/command.spec.js. One test has been created for you. When a user creates a new Command object from the class, we want to make sure they pass a command type as the first argument.\nTest 1\nNote that the test description reads, “throws error if a command type is NOT passed into the constructor as the first parameter”.\nSo far, you have used many expectations to check for equality. In the chapter on exceptions, we shared an example of how we might use an expectation to check if an exception is thrown. Refer back to that example for guidance on the syntax. Run the command npm test within your terminal to verify that the test passes. Next, comment out lines 4-6 in command.js. Run npm test again to verify that the test fails (the expected error is not thrown when the Command class is called). Restore lines 4-6 to throw Error(\"Command type required.\");. Change ‘Command type required.’ on line 9 in command.spec.js to ‘Oops’. Run npm test again to verify that the test fails (the error message did not match \"Command type required.\"). Restore line 9 to ‘Command type required.’. Test 2\nCreate a second Command test using “constructor sets command type” as the description. This test checks that the constructor in the Command class correctly sets the commandType property in the new object.\nWithout editing command.js, it contains the correct code. Run npm test to verify that the first and second tests both pass. You do not need to use expect().toThrow(). You may not need to know the specific types of commands to write this test. Test 3\nCode a third test using “constructor sets a value passed in as the 2nd argument” as the description. This test checks that the constructor correctly sets the value property in the new object. You may not need to know a proper value in order to write this test.\nRun npm test to verify that all 3 command tests pass.\nNote As you move through the remaining instructions, the amount of guidance will decrease. Refer to your earlier, passing tests to help you construct new tests and passing code.\nGreat job, astronaut! When you are ready to keep going, check out the Message Class !\n",
    "description": "",
    "tags": null,
    "title": "Task 2: Command Class",
    "uri": "/assignments/mars-rover/command-class/index.html"
  },
  {
    "content": "Once you have the assignment open within Visual Studio Code, have a look around the various files and get curious about what this code does. Don’t be afraid to look - just don’t edit any of this code just yet.\nAfter you have done some exploring, open a terminal window within your Visual Studio Code application. You can do this by selecting the Terminal option near the top left of your window and clicking New Terminal.\nNote You can also open a terminal and navigate to the assignment0 project directory location and run the following commands as well.\nBefore we begin, we are going to install the required packages within our project directory. We will be using npm (Node Package Manager) to do so. Run the following command within your terminal:\nnpm i The i stands for install. This is the shorter version, you can also fully type out npm install. You terminal output should look something like this after typing in the command:\nAfter a short amount of time you should see that the packages were installed successfully:\nNow that we have installed all required packages we can move forward with running the program. Type the following command into your terminal window:\nnode index.js You should notice that when the program runs the output is \"Hello\". Remember, your task is to modify the output of this program so that, when run, \"Hello world!\" is printed.\nTake a look at the hello.js file. This is the only file in your starter code that needs changing. You’ll see a structure called a function, along with a final module.exports line.\nfunction hello() { // TODO: change this string so that your program prints \"Hello world!\" return \"Hello!\"; } module.exports = hello; We haven’t learned about either of these items yet, but we will! If you are so compelled, google these terms to get a brief introduction. If you are not compelled, you don’t need to know what they do for the purposes of this class until later lessons.\nTip Set a timer for 5 mins and google search “JavaScript functions” or “JavaScript module.exports”. Or look these items up directly on W3Schools or MDN . When the timer is up, write down whatever you have found interesting or most salient from your search.\nAlthough you won’t start learning about these terms in this book until later on, getting into the habit of exploring code and google searching topics helps to get you into the developer mindset.\nThis may not be the only place where this book leaves you with more questions than answers and getting answers from the world wide web is how every developer spends their time.\nBack inside of hello.js, you should recognize a string on this line: return \"Hello!\";.\nreturn \"Hello!\"; return is another keyword related to functions that we have not yet covered. For now, know that return behaves like a surrogate for console.log(). So anything inside of the string that follows it will be printed when your application is run.\nTip It’s a good idea to take note of how this file in the starter code looks before you start editing. Changing any code other than this string may cause your program to not run properly, and therefore may not be graded correctly. Making small changes and testing them as you go makes it easier to undo changes you don’t want and return to a working state.\nWith all of this in mind, modify the string on that line so that \"Hello world!\" is printed. Once you have modified the string, run the following command once more:\nnode index.js Once your output is correct move on to the next section!\n",
    "description": "",
    "tags": null,
    "title": "Task 2: Hello, World!",
    "uri": "/assignments/hello-world/code-refactor/index.html"
  },
  {
    "content": "You may remember from earlier chapters that classes represent specific entities. The Document Object Model (DOM) is a set of objects that represent the browser and the documents that make up the web page. The DOM objects are instances of classes that model the structure of the browser, HTML document, HTML elements, element attributes, and CSS. The below figure depicts the parent-child relationships between the DOM objects that make up a web page.\nGlobal DOM Variables To utilize the DOM in JavaScript, we need to use the DOM global variables. In the next section, we will learn more about the DOM global variables, including their type. For now, let’s get used to the idea of using JavaScript to interact with the DOM.\nTo start, we are going to use the window and document global variables. As mentioned above, we will go into more detail on these variables and what they are later.\nExample Here, the window and document variables are used to print information about the web page to the browser’s console.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eUsing DOM Variables\u003c/title\u003e \u003cscript\u003e console.log(\"the page title:\", document.title); console.log(\"the protocol:\", window.location.protocol); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e contents \u003c/body\u003e \u003c/html\u003e Console Output\nthe page title: Using DOM Variables the protocol: https: Dynamic Web Page Using the DOM The DOM plays a key part in making web pages dynamic. Since the DOM is a JavaScript representation of the web page, you can use JavaScript to alter the DOM and consequently, the web page. The browser will re-render the web page anytime changes are made via the DOM.\nNote Rendering is not the same action as loading.\nIn order to add or edit HTML elements with code, we need to be able to access them. The method document.getElementById will search for a matching element and return a reference to it. We will go into more detail on how this method works in the next section.\nExample We can use document.getElementById and element.append to add text to a \u003cp\u003e tag.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eAdd content using DOM\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp id=\"main-text\"\u003eWords about things...\u003c/p\u003e \u003cscript\u003e let p = document.getElementById(\"main-text\"); p.append(\"More words about things\"); console.log(p.innerHTML); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output\nWords about things... More words about things Where to Put the \u003cscript\u003e In the previous example, notice the \u003cscript\u003e tag is placed below the \u003cp\u003e tag in the HTML document. HTML documents are executed top down. Therefore, a \u003cscript\u003e tag must come after any other elements that will be affected by the code inside the \u003cscript\u003e. Later in the chapter, we will learn about another way to handle this.\nCheck Your Understanding Question What do the DOM objects represent?\nWord documents you have downloaded Directives of memory The browser window, HTML document, and the elements Question What is the value of p.innerHTML?\n\u003cp id=\"demo-text\"\u003eHello friend\u003c/p\u003e \u003cscript\u003e let p = document.getElementById(\"demo-text\"); console.log(p.innerHTML); \u003c/script\u003e ",
    "description": "",
    "tags": null,
    "title": "The Dom",
    "uri": "/dom-and-events/reading/the-dom/index.html"
  },
  {
    "content": "In most programming languages, when the compiler or interpreter encounters code it doesn’t know how to handle, it throws an exception. This is how the compiler notifies the programmer that something has gone wrong. Throwing an exception is also known as raising an exception.\nJavaScript gives us the ability to raise exceptions using the throw statement. One reason to throw an exception is if your code is being used in an unexpected way.\nThrow Default Error We can throw a default Error by using the throw statement and passing in a string description as an argument.\nExample throw Error(\"You cannot divide by zero!\"); Console Output\nError: You cannot divide by zero! at evalmachine.\u003canonymous\u003e:1:7 at Script.runInContext (vm.js:133:20) at Object.runInContext (vm.js:311:6) at evaluate (/run_dir/repl.js:133:14) The error text displays the error name, and it contains details about where the error was thrown. The text at evalmachine.\u003canonymous\u003e:1:7 indicates that the error as thrown from line 1, which we know is true because our example only has one line of code.\nNote With all that we have learned about unit testing, you might be wondering how you test if an error is thrown when it should be. To do so, let’s imagine our example above is inside a function called checkThrow(). We can then use the toThrow() matcher like so:\nexpect( function() { checkThrow(); }).toThrow(new Error('You cannot divide by zero!')); Pre-existing Error JavaScript also gives us the power to throw a more specific type of error.\nExample throw SyntaxError(\"That is the incorrect syntax\"); Console Output\nSyntaxError: That is the incorrect syntax JavaScript gives us flexibility by allowing us to raise standard library errors and to define our own errors. We can use exceptions to allow our program to break and provide useful information as to why something went wrong.\nCustom Error JavaScript will also let you define new types of Errors. You may find this helpful in the future, however, that goes beyond the scope of this class.\nCheck Your Understanding Question What statement do we use to raise an exception?\nQuestion How do we customize the message of an exception?\n",
    "description": "",
    "tags": null,
    "title": "Throw",
    "uri": "/exceptions/reading/throw/index.html"
  },
  {
    "content": "Sometimes it is necessary to convert values from one type to another. A common example is when a program receives input from a user or a file. In this situation, numeric data may be passed to the program as strings.\nJavaScript provides a few simple functions that will allow us to convert values to different data types. The functions Number and String will (attempt to) convert their arguments into types number and string, respectively. We call these type conversion functions.\nThe Number function can take a string and turn it into an integer. Let us see this in action:\nExample console.log(Number(\"2345\")); console.log(typeof Number(\"2345\")); console.log(Number(17)); Console Output\n2345 number 17 What happens if we attempt to convert a string to a number, and the string doesn’t directly represent a number?\nExample console.log(Number(\"23bottles\")); Console Output\nNaN This example shows that a string has to be a syntactically legal number for conversion to go as expected. Examples of such strings are \"34\" or \"-2.5\". If the value cannot be cleanly converted to a number, then NaN will be returned, which stands for “not a number.”\nNote NaN is a special value in JavaScript that represents the state of not being a number. We will learn more about NaN and other special values in a later chapter.\nThe type conversion function String turns its argument into a string. Remember that when we print a string, the quotes may be removed. However, if we print the type, we can see that it is definitely 'string'.\nExample console.log(String(17)); console.log(String(123.45)); console.log(typeof String(123.45)); Console Output\n17 123.45 string Check Your Understanding Question Which of the following strings result in NaN when passed to Number? (Feel free to try running each of the conversions.)\n'3' 'three' '3 3' '33' ",
    "description": "",
    "tags": null,
    "title": "Type Conversion",
    "uri": "/data-and-variables/reading/type-conversion/index.html"
  },
  {
    "content": "Having informally used and discussed functions, it is time to formalize a few concepts.\nA function call is the act of using a function by referring to its name, followed by parentheses. A synonymous term is function invocation, and we will sometimes say that we are “invoking a function.”\nWithin parentheses, a comma-separated list of arguments may be provided when calling a function. These are sometimes called inputs, and we say that the inputs are “passed to” the function.\nA generic function call looks like this:\nfunctionName(argument1, argument2,...,argumentN); Every function provides a return value, which can be used by the calling program—for example, to store in a variable or print to the console.\nExample A return value may be stored in a variable.\nlet stringVal = String(42); It may also be used in other ways. For example, here we use the return value as the input argument to console.log without storing it.\nconsole.log(String(42)); Console Output\n42 If a function doesn’t provide an explicit return value, the special value undefined will be returned.\nExample let returnVal = console.log(\"LaunchCode\"); console.log(returnVal); Console Output\nLaunchCode undefined Warning The special value undefined is built into JavaScript. As with booleans, it is not a string, so undefined === \"undefined\" returns false.\nIn some cases, calling a function results in an action that changes the state of a program outside of the function itself. Such a behavior is known as a side effect.\nExample Calling console.log results in output to the console, which is a side effect.\n",
    "description": "",
    "tags": null,
    "title": "Using Functions",
    "uri": "/functions/reading/using-functions/index.html"
  },
  {
    "content": "Scope allows programmers to control the flow of information through the variables in their program. Some variables you want to set as constants (like pi), which can be accessed globally. Others you want to keep secure to minimize the danger of accidental updates. For example, a variable holding someone’s username should be kept secure.\nShadowing Variable shadowing is where two variables in different scopes have the same name. The variables can then be accessed under different contexts. However, shadowing can affect the variable’s accessibility. It also causes confusion for anyone reviewing the code.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const input = require('readline-sync'); function hello(name) { console.log('Hello,', name); name = 'Ruth'; return doubleName(name); } function doubleName(name){ console.log(name+name); return name+name; } let name = input.question(\"Please enter your name: \"); hello(name); doubleName(name); console.log(name); So, what is the value of name in line 4, 10, 16, 17, and 18?\nYikes! This is why shadowing is NOT a best practice in coding. Whenever possible, use different global and local variable names.\nTry it! If you are curious about the name values in the example, feel free to run the code within your javascript-projects/scope/chapter-examples directory.\nVariable Hoisting Variable hoisting is a behavior in JavaScript where variable declarations are raised to the top of the current scope. This results in a program being able to use a variable before it has been declared. Hoisting occurs when the var keyword is used in the declaration, but it does NOT occur when let and const are used in the declaration.\nNote Although we don’t use the var keyword in this book, you will see it a lot in other JavaScript resources. Variable hoisting is an important concept to keep in mind as you work with JavaScript.\nCheck Your Understanding Question What keyword allows a variable to be hoisted?\nlet var const Question Consider this code:\nlet a = 0; function myFunction() { let a = 10; return a; } Because there are two separate variables with the name, a, under the two different scopes, a is being shadowed.\na. True b. False\n",
    "description": "",
    "tags": null,
    "title": "Using Scope",
    "uri": "/scope/reading/using-scope/index.html"
  },
  {
    "content": "Bracket Notation and Index As previously discussed, arrays are an ordered collection where each item can be accessed via index. Similar to strings, an index in an array is the number order given to items. Individual items can be accessed using bracket notation (array[index]). Indexes are zero-based, going from 0 to array.length-1.\nExample Use bracket notation and index to access items in an array.\nlet programmingLanguages = [ \"JavaScript\", // index 0 \"Python\", // index 1 \"Java\", // index 2 \"C#\" // index 3 ]; console.log(programmingLanguages[0]); console.log(programmingLanguages[3]); // What will happen when index 4 is requested? console.log(programmingLanguages[4]); Console Output\nJavaScript C# undefined Notice above that undefined was printed out when index 4 was referenced. undefined is returned when you request an index that the array does not contain.\nNote undefined is a special value in JavaScript that means no value has been assigned. We will discuss undefined more later in the class.\nExample undefined will be returned for any index that is outside of the array’s index range.\nlet programmingLanguages = [\"JavaScript\", \"Python\", \"Java\", \"C#\"]; console.log(programmingLanguages[-1]); console.log(programmingLanguages[100]); Console Output\nundefined undefined Arrays are Mutable In programming, mutability refers to what happens when you attempt to change a value. Remember that strings are immutable, meaning that any change to a string results in a new string being created. In contrast, arrays are mutable, meaning that individual items in an array can be edited without a new array being created.\nExample Update an item in an array using bracket notation and index.\nlet javaScriptFrameworks = [\"React\", \"Angular\", \"Ember\"]; console.log(javaScriptFrameworks); // Set the value of index 2 to be \"Vue\" javaScriptFrameworks[2] = \"Vue\"; // Notice the value at index 2 is now \"Vue\" console.log(javaScriptFrameworks); Console Output\n[ 'React', 'Angular', 'Ember' ] [ 'React', 'Angular', 'Vue' ] ",
    "description": "",
    "tags": null,
    "title": "Working With Arrays",
    "uri": "/arrays/reading/working-with-arrays/index.html"
  },
  {
    "content": "React components may need to display different things depending on certain conditions. This is called Conditional Rendering. Conditional rendering allows you to change the output with logical operators. This includes if, if/else, logical AND (\u0026\u0026) operator, and the ternary operator.\nif statements We can use if statements to create conditions. Those conditions then determine the output of our application.\nIn the example below, we have two functions, Rainy and Sunny. Each one returns a simple \u003ch1\u003e message.\nIn the App function, we use an if statement and props to render which statement will appear in the browser. The if block starts at line 15, and declares isRainy as true. This will return the message from the Rainy function. When isRainy is not true, it will return the \u003ch1\u003eNo rain today!\u003c/h1\u003e message instead.\nExample Setting our Conditional to True Try it! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 function Rainy(){ return( \u003ch1\u003eBring your umbrella!\u003c/h1\u003e ); } function RainOrShine(props){ const isRainy = props.isRainy; if(isRainy){ return( \u003cRainy /\u003e ); } return( \u003ch1\u003eNo rain today!\u003c/h1\u003e ); } export default function App(){ return( \u003cdiv\u003e \u003cRainOrShine isRainy={true} /\u003e \u003c/div\u003e ); } Output Bring your umbrella! We don’t always need to include the else statement if there are only two conditions.\nIn fact, we could even compare two different functions with a single if statement.\nIn the example below, we added a second function, Sunny which will run if isRainy is not true.\nWhen isRainy is false or not true, the Sunny function will run and you will see a different message in the browser.\nCurrently, we are hardcoding these outcomes. In the next chapter, you will learn about making this functionality more dynamic.\nExample Setting our Conditional to False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 function Rainy(){ return( \u003ch1\u003eBring your umbrella!\u003c/h1\u003e ); } function Sunny(){ return( \u003ch1\u003eBring your sunglasses!\u003c/h1\u003e ) } function RainOrShine(props){ const isRainy = props.isRainy; if(isRainy){ return( \u003cRainy /\u003e ); } return( \u003cSunny /\u003e ); } export default function App(){ return( \u003cdiv\u003e \u003cRainOrShine isRainy={false} /\u003e \u003c/div\u003e ); } Example Setting our Conditional to False Try it out in this sandbox!\nExplore CodeSandbox:\nClick the black left border. Click the hamburger menu in the top left corner. Select App.js to explore. Output Bring your sunglasses! if/else What about the else? In the examples above, we are not using else. You could add an else block to the RainOrShine function. It would have the same behavior and output.\nExample Adding Else Block 1 2 3 4 5 6 7 8 9 10 11 12 13 function RainOrShine(props){ const isRainy = props.isRainy; if(isRainy){ return( \u003cRainy /\u003e ); } else { return( \u003cSunny /\u003e ); } } \u0026\u0026 statements The logical \u0026\u0026 operator is often used with if blocks. It is often used for comparison between expressions. It will be true if both expressions it is comparing are true.\nA B Returns true true true true false false false true false false false false We can pair the logical \u0026\u0026 operator with an if statement if we want to render an element or nothing.\nWe could update our RainOrShine function to use the logical \u0026\u0026 like this:\nExample setting up for logical \u0026\u0026 1 2 3 4 5 6 7 8 9 function RainOrShine(props){ const isRainy = props.isRainy; const testWord = props.testWord; if((isRainy) \u0026\u0026 (testWord === \"thunder\")) { return( \u003cRainy /\u003e ); } } We would need to add the testWord to the App function.\nExample: Updating App() 1 2 3 4 5 6 7 8 9 10 export default function App(){ return( \u003cdiv\u003e \u003cRainOrShine isRainy={true} testWord={\"thunder\"} /\u003e \u003c/div\u003e ); } Output Bring your umbrella! If testWord was not \"thunder\", then nothing would render.\nExample: Updating App() 1 2 3 4 5 6 7 8 9 10 export default function App(){ return( \u003cdiv\u003e \u003cRainOrShine isRainy={true} testWord={\"kangaroo\"} /\u003e \u003c/div\u003e ); } Output (Nothing is rendered. This output represents a blank browser)\nNote You could also try using the logical Or || and the logical not ! in your application too.\nThese will work, but are not as useful as the \u0026\u0026.\nTernary Operator The ternary operator is a single-line expression of an if/else statement.\nSyntax Basic Syntax 1 condition ? ifTrueExpression : ifFalseExpression This would look like the following in JavaScript: Example Ternary Syntax 1 2 3 let creature = \"cat\"; let creatureSound = creature = \"cat\" ? \"Meow!\" : \"Woof!\"; console.log(creatureSound) Output Meow!\nTernary statements are simplified if/else blocks. We could update our RainOrShine function with a ternary operator like this:\nExample: RainOrShine as Ternary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function RainOrShine(props){ const isRainy = props.isRainy; return isRainy ? \u003cRainy /\u003e : \u003cSunny /\u003e } function App() { return ( \u003cdiv\u003e \u003cRainOrShine isRainy={true} /\u003e \u003c/div\u003e ); } Output Bring your umbrella! Other applications for Conditional Rendering Conditional Rendering can also be applied to the styling of elements. Let’s add some to our RainOrShine function. We will need set the conditional as part of the className.\nExample: Ternary for applying CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const isRainy = true; function RainOrShine(props){ const isRainy = props.isRainy; return isRainy ? \u003cRainy /\u003e : \u003cSunny /\u003e } function App() { return ( \u003cdiv className={`${isRainy === true ? \"dark\" : \"light\"}`}\u003e \u003cRainOrShine /\u003e \u003c/div\u003e ); } 1 2 3 4 5 6 7 8 9 10 11 //inside App.css .dark { background-color: midnightblue; color:aliceblue; } .light { background-color: paleturquoise; color:darkorange; } Output In the code example above, we had to refactor isRainy. First, we declared isRainy outside of RainOrShine. Remember that React, like JavaScript compiles from top to bottom. We need to declare it before the className in line 11 else it renders as undefined. By declaring isRainy outside of a function, it doesn’t need curly braces. We can declare it as we would in a typical JavaScript application.\nIn line 11, we placed the ternary statement inside a template literal. The ternary operator is a code block; use the $ escape symbol to ensure it renders like a code block and not a string.`\nWe placed the styling inside the \u003cdiv\u003e. The styling will only apply to the \u003cdiv\u003e with that className.\nCheck Your Understanding Question Given the following code, select the output message.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //inside App.js function Trees(props) { const isEvergreen = props.isEvergreen; const name = props.name; if (isEvergreen) { return \u003ch1\u003e{name} is an Evergreen tree\u003c/h1\u003e; } } export default function App() { return ( \u003cdiv className=\"App\"\u003e \u003cTrees isEvergreen={true} name=\"Silver Fir\" /\u003e \u003cTrees isEvergreen={false} name=\"Sweet Gum\" /\u003e \u003c/div\u003e ); } Silver Fir is an Evergreen tree Sweet Gum is a Deciduous tree undefined Question Refactor HowToSeason so that it returns a ternary statement\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function AddSalt() { return \u003cp\u003eAdd some salt\u003c/p\u003e; } function HowToSeason(props) { const isBland = props.isBland; if (isBland) { return \u003cAddSalt /\u003e; } return \u003cp\u003eJust right!\u003c/p\u003e; } export default function App() { return ( \u003cdiv\u003e \u003cHowToSeason isBland={false} /\u003e \u003c/div\u003e ); } 1 2 3 4 function HowToSeason(props) { const isBland = props.isBland; return isBland : \u003cAddSalt /\u003e ? \u003cp\u003eIt's just right\u003c/p\u003e; } 1 2 3 4 function HowToSeason(props) { const isBland = props.isBland; return isBland ? \u003cp\u003eIt's just right\u003c/p\u003e : \u003cAddSalt /\u003e; } 1 2 3 function HowToSeason(props) { return isBland ? \u003cp\u003eIt's just right\u003c/p\u003e : \u003cAddSalt /\u003e; } 1 2 3 4 function HowToSeason(props) { const isBland = props.isBland; return isBland ? \u003cAddSalt /\u003e : \u003cp\u003eIt's just right\u003c/p\u003e; } Question The code should render the “Add some spicy spices!” message. Help debug the issue.\n1 2 3 4 5 6 7 8 9 let spicySpices = [\"Cayenne\", \"Chili powder\", \"Gochugaru\"]; function TurnUpTheHeat(props) { const isBland = props.isBland; if (isBland \u0026\u0026 spicySpices.length \u003c 0) { return \u003ch1\u003eAdd some spicy spices!\u003c/h1\u003e; } } The issue is in line 1. The array is not declared correctly.\nThe issue is in line 4. Props are used incorrectly.\nThe issue is in line 6. It should be greater than 0.\nThe issue is in line 6. isBland should be encased in curly braces.\n",
    "description": "",
    "tags": null,
    "title": "Conditional Rendering",
    "uri": "/react-part-2/reading/conditional-rendering/index.html"
  },
  {
    "content": "For a quick review, state is the component’s memory and when a change in state occurs, the component re-renders. Let’s take a more in-depth look into how React re-renders a component. A number of things can trigger the re-render, but right now, we are going to just focus on state changes. While we can use the useState hook to set up a state variable, we can use the state setter function to trigger a change in state. Since state variables are treated as read-only, we cannot simply say stateVariable = x to update them, we have to use a state setter function to replace the current value and trigger the change in state.\nSo what is happening when a component re-renders in React and why does reloading the page reset the state? The answer to these questions lie in React’s Virtual DOM. Previously, you have learned about the DOM and how events can alter the DOM. React comes with an abstraction of the DOM that acts as a representation of what the DOM should be composed of based on the current state of the component. This representation of the DOM is called the Virtual DOM.\nWhen the site is first loaded or if the user reloads the page, React builds from scratch a virtual representation of the DOM based on what the component’s initial state is and then builds the actual DOM that is used for the page, which is used to display the app to the user. Now that the Virtual DOM and the DOM are both built, the site is ready for the user. As the user interacts with a component, React rebuilds the Virtual DOM and then performs a check between the Virtual DOM and the real DOM to see if there are differences. If there is a difference after a user interacts with the component, React initiates a process called reconciliation where the real DOM is altered to match the virtual DOM and the component is re-rendered.\nThe Virtual DOM is one of the reasons why React is so efficient. Unlike the actual DOM, React’s Virtual DOM only changes the one aspect of the DOM that needs to be changed as opposed to rebuilding the entire DOM. Because updating the real DOM takes more power, only updating it when there are differences between the Virtual DOM and the real DOM saves resources. Also, the real DOM is responsible for directly responding to the users’ actions, while the Virtual DOM is an abstract construction built by React that the user cannot interact with.\nKnowing more about how state changes, let’s explore how we can update the state of a component with code.\nCheck Your Understanding Question True/False: The Virtual DOM is responsible for responding directly to the user.\nQuestion True/False: The process of checking the Virtual DOM against the real DOM and updating the real DOM to match is called reconciliation.\n",
    "description": "",
    "tags": null,
    "title": "Changes in State",
    "uri": "/react-lsn3/reading/state-changes/index.html"
  },
  {
    "content": "Time to make a React app to share a hobby you love with your friends and family!\nNote The solution in the react-part3-exercises-vite branch of the react-exercises-and-studios repo uses needlepoint as an example hobby. Whenever you see a reference to needlepoint in the solution to the exercises, substitute it for your own chosen hobby.\nCreate a new application called exercises in the part3 directory in the react-exercises-and-studios repo.\nIn App.jsx, remove the boilerplate content as you have done in previous lessons. Replace it with an \u003ch1\u003e heading that says “My Hobby: \" with your hobby coming after the colon.\nCheck Your Solution \u003cdiv className=\"App\"\u003e \u003ch1\u003eMy Hobby: Needlepoint\u003c/h1\u003e \u003c/div\u003e Create a new components directory in src.\nCreate a new file called Introduction.jsx in components and inside create a new functional component called HobbyIntroduction.\nCheck Your Solution export default function HobbyIntroduction () { return(); } This functional component return a \u003cdiv\u003e that contains the following:\nAn \u003ch2\u003e heading that says something to the effect of “3 Fun Facts About this Hobby”. An ordered list that contains three facts that you want others to know about your chosen hobby. Import and Call the new HobbyIntroduction component under your \u003ch1\u003e heading in App.jsx.\nCheck Your Solution \u003cdiv className=\"App\"\u003e \u003ch1\u003eMy Hobby: Needlepoint\u003c/h1\u003e \u003cHobbyIntroduction /\u003e \u003c/div\u003e Run the application to see your new fun facts! Once you are satisfied, turn off the server so we can practice with state.\nInside src, create a new file called data.json. We are going to use this file to make a small gallery of images of projects or plans you have for your hobby. Inside this file, set up a new list of JSON objects called projects. Your list should contain 5 JSON objects and each one should have 4 properties that make sense with what your hobby is.\nCheck Your Solution Here is an example of what an object looks like for those making their app about needlepoint.\n{ \"canvas\": \"Fox\", \"designer\": \"Pip and Roo\", \"photoUrl\": \"long URL\", \"alt\": \"Stitched fox with fluffy tail\" } Create a new file called Projects.jsx in components. This file will hold a functional component called MyProjects.\nImport the data from data.json and useState from 'react' at the top of Projects.jsx.\nCheck Your Solution import data from './../data.json'; import { useState } from 'react'; Inside the MyProjects component, start by setting up a state variable for the index so we can loop through our list of projects. You can do this with the following code: const [index, setIndex] = useState(0);.\nNow we need to set up some local variables and a return statement.\nFirst, set up a JavaScript variable that contains your list from data.json. Then set up a variable that contains the item in that list at the position determined by index. Inside return, set up a button that contains the text, “Next”. Set the onClick attribute to {handleClick}. Below your button, add HTML that will nicely display all four properties of your JSON objects. Finally, above the return statement, we need to set up handleClick() like so:\nfunction handleClick() { if (index \u003c data.projects.length-1) { setIndex(index + 1); } else { setIndex(0); } } Return to App.jsx and call the completed MyProjects component below HobbyIntroduction. Run the application to see your new gallery! Hit the Next button to see state in action!\nSubmitting Your Work Commit and push your work to GitHub and submit the link to your repository on the assignment page in Canvas.\n",
    "description": "",
    "tags": null,
    "title": "Exercises",
    "uri": "/react-lsn3/exercises/index.html"
  },
  {
    "content": "The following exercises walk you through the process of modifying existing components and creating new ones.\nStarter Code For this set of exercises, you will need a copy of the LaunchCode React projects repository. If you haven’t done so already,\nFork the react-exercises-and-studios repository on GitHub. Clone your fork. Navigate into the exercises now:\n$ pwd react-projects $ ls part1 part2 part3 $ cd part1 $ cd exercises You should be able to run npm start, but the page will not look pretty. Time to fix that!\nNote If the exercises app doesn’t run at first, try running npm install. Once that process has completed, you should be able to run npm start again to get the development server going.\nPart 1: Modify the CSS The MovieList and ChoresList components have been created, but so far they appear pretty bland. Let’s change that.\nChange the movie list text by adjusting the code in MovieList.module.css to accomplish the following:\nThe text for the heading and list items can be any color EXCEPT black. (HINT: Take advantage of the movieText class). The movie list should have heading that aligns to the left. The font size should be large enough to easily read. Check Your Solution .movieText { color: purple; font-size: 1.3vw; text-align: left; } .movieHeading { text-align: left; } Change the chore list text by adjusting the code in ChoresList.module.css to accomplish the following:\nUse a different font, with a size large enough to easily read. The text color should be different from the movie list, but not black. The chores list should have an underlined heading. The chores in the list should be italicized. Add More Movies The list of movies is built using an array defined in MovieList.js.\nAdd two more items to the movies array.\nCheck Your Solution const movies = [\"Pride and Prejudice\", \"Howl's Moving Castle\", \"Legally Blonde\", \"Star Wars\"]; Add two more \u003cli\u003e\u003c/li\u003e elements to the component and use JSX to reference the new movies in the array.\nComplete the BookList Component The BookList component has been generated, but it is incomplete. The page needs more images, which also need to be smaller in size.\nIn the BookList function, assign a better section heading to the pageTitle variable.\nThe book variables should hold URLs for images, but only one is is filled in and it isn’t a valid link. Update the three variables to include valid link addresses for three new book releases. To copy the URL for an image on the web, right-click (or control-click) on the image and select the “Copy Image Address” menu option.\nIn the return statement for this component, use JSX in the img tags to display your chosen images and update the alt text to reflect what book you are linking.\n\u003cimg src={book1} alt=\"Appropriate text for the book\"\u003e Refresh the webpage to check the updated content.\nCheck Your Solution This solution includes three books from the latest releases the week we were working on this book. Your code will have different books!\n\u003cdiv\u003e \u003ch3\u003e{pageTitle}\u003c/h3\u003e \u003cimg src={book1} alt=\"Romantic Comedy by Curtis Sittenfield\" /\u003e \u003cimg src={book2} alt=\"Tress of the Emerald Sea by Brandon Sanderson\" /\u003e \u003cimg src={book3} alt=\"The London Seance Society by Sarah Penner\" /\u003e \u003c/div\u003e Before moving on, save and commit your work.\nPart 2: Add Another Component The page needs a set of links for the websites you use to keep track of or shop for your favorite hobbies.\nCreate a new file called HobbyLinks for a new functional component called HobbyLinks.\nIn the HobbyLinks() function, define the variable hobbyLinks and assign it an array that contains two or more URLs for websites that pertain to your hobbies.\nIn the return statement for this component, add a set of \u003ca\u003e tags for the web links. Each link should be on its own line.\nInside each \u003ca\u003e tag, set the href attribute equal to a placeholder for an element in the hobbyLinks array:\n\u003ca href = {hobbyLinks[0]}\u003eLink text...\u003c/a\u003e Add \u003cHobbyLinks /\u003e to App.js. Save all of your changes, then refresh the page to see your new content.\nCheck Your Solution \u003cdiv className=\"App\"\u003e \u003cMovieList /\u003e \u003cChoresList /\u003e \u003cBookList /\u003e \u003cHobbyLinks /\u003e \u003c/div\u003e Part 3: Rearrange the Components The content on the page appears quite jumbled, since we gave you no guidance on where to put the components in App.js. Fortunately, templates allow us to easily move items around the framework.\nRearrange the components etc. to create a specific page layout:\nYou now have three components that could be grouped together and one that doesn’t belong with the others. Put the odd one out at the top of the page. In App.css, you will find a class called similarComponents. Wrap the three components that go together in a \u003cdiv\u003e and assign it this class. Check Your Solution \u003cdiv className=\"App\"\u003e \u003cChoresList /\u003e \u003cdiv className=\"similarComponents\"\u003e \u003cMovieList /\u003e \u003cBookList /\u003e \u003cHobbyLinks /\u003e \u003c/div\u003e \u003c/div\u003e Your final page should have this format:\nOptional Final Touches To boost your practice, complete one or more of the following:\nChange the background of one element of a component to a decent color, image or pattern. Add a border around one or more of the components on the page. Sanity Check The react-exercises-and-studios repository contains two branches:\nA main branch with all the starter code for lessons 1, 2, and 3. A solutions branch with completed code. If you get stuck on a particular exercise:\nTry again. Ask your TA, instructor, classmates, or Google for tips. Try again. Take a break and give your brain a chance to rest. Try again. Feel completely justified in switching to the solutions branch to check the code. Note If you jumped right to step 6, you missed out on a stellar learning opportunity.\n",
    "description": "",
    "tags": null,
    "title": "Exercises: Chores vs. Hobbies",
    "uri": "/react-lsn1/exercises/index.html"
  },
  {
    "content": "Components are the building blocks of React applications. Components are reusable, independent, and are responsible from individual elements of the webpage. For example, take a look at Instacart and make note of elements of the webpage. You might see:\nA button for logging into your account. A button for signing up for a new account. A section full of local to you stores so that you can select one you would like delivery from. Each store and vital information about them such as when items can be delivered by and a short byline about what the store sells. Common questions have their own section that expands when the user clicks on it to reveal the answer. Each of these elements might be a component in their React application. Components can be either functional components or class components. While there are no hard-and-fast rules on where components live in the application, best practice that we will be using in this class is placing each component in its own file and all of those files should live in a folder inside src called components. Components are then called in an App component where we would like them to appear on the page.\nFunctional Components Functional components are simply functions that return HTML. Later versions of React lean more on functional components than class components. Let’s make a functional component that returns HTML about a local store.\nfunction SchnucksInfo() { return( \u003cdiv\u003e \u003ch1\u003eSchnucks\u003c/h1\u003e \u003cp\u003eGrocery store\u003c/p\u003e \u003cp\u003eDelivering within an hour\u003c/p\u003e \u003c/div\u003e ); } If we have a functional component called SchnucksInfo in a separate file within the components directory, we have to export it and then import it in App.jsx.\nfunction App() { return ( \u003cdiv className=\"App\"\u003e \u003cSchnucksInfo /\u003e \u003c/div\u003e ); } Then we can run the application to see the rendered HTML of the SchuncksInfo component.\nNote Upon closer inspection, you may notice that App is also a functional component.\nSince your functional components are just functions, you can pass data to that component using props. Props is short for properties and are just the arguments passed to the components. We can write another functional component called FavoriteFoodItem and pass it an argument called props. Props are objects, so we need to access the data by the key you need. You can name your key whatever makes most sense given the context of your application, but that key is what you will use when calling your component to pass data with an HTML attribute. In the case of FavoriteFoodItem, we will need to use the value of props.foodItem.\nfunction FavoriteFoodItem(props) { return( \u003cdiv\u003e \u003ch2\u003eYour favorite food item is {props.foodItem}!\u003c/h2\u003e \u003c/div\u003e ); } Then when calling FavoriteFoodItem in App, let’s pass \"butter\" to FavoriteFoodItem. To do so, we will add an HTML attribute called foodItem to our code.\nfunction App() { return ( \u003cdiv className=\"App\"\u003e \u003cFavoriteFoodItem foodItem = \"butter\" /\u003e \u003c/div\u003e ); } If we ran the app, we would have a heading that said “Your favorite food item is butter!”.\nClass Components Class components are classes that contain a render() method that returns the HTML we need and extend React.Component. This means when writing a class component, you have to import React from 'react';. Earlier versions of React rely on class components. While later versions make use of more functional components, you will still see class components in React codebases. Let’s look at a class component for another local grocery store we want to get some groceries delivered from.\nclass DierbergsInfo extends React.Component { render() { return( \u003cdiv\u003e \u003ch1\u003eDierbergs\u003c/h1\u003e \u003cp\u003eGrocery store\u003c/p\u003e \u003cp\u003eDelivering within an hour\u003c/p\u003e \u003c/div\u003e ); } } While SchnucksInfo and DierbergsInfo are structured differently, we can call DierbergsInfo the same way in App.jsx that we did SchnucksInfo.\nfunction App() { return ( \u003cdiv className=\"App\"\u003e \u003cDierbergsInfo /\u003e \u003c/div\u003e ); } Check Your Understanding Question True/False: Functional components are functions that return HTML.\nQuestion True/False: Class components do not need a render() method.\n",
    "description": "",
    "tags": null,
    "title": "React Components",
    "uri": "/react-lsn1/reading/components/index.html"
  },
  {
    "content": "Getting Started: Check out the starter code for the exercises-2 in the part2 directory on the main branch of react-exercises-and-studios Code Review App is returning 2 components: Profile and Banner. Open the components directory to see what it contains. You should see the following files:\nBanner.jsx Creates a banner for the application Button.jsx Creates a button for the application that uses the alert Window method. oceans.json holds multiple objects, which we will use in our application Profile.jsx Will become a list template that holds an image, name, facts, and a button for each json object in oceans.json. styles.css contains the styling we will add to our application. These are the files we will be working with for this project.\nPart 1: The Banner Component We would like to update the Banner.jsx to fit the application better.\nUpdate the Banner function to return an level header that says “The Amazing Ocean” instead of “Hello World!”. Apply the CSS styling for header. Check your solution 4 5 6 return( \u003ch1 className=\"header\"\u003eThe Amazing Ocean\u003c/h1\u003e ); Part 2: Button.jsx We would like the button to do something. Right now, when you click on it nothing happens. For this application, we will create an alert method that will share a message with a water or ocean theme.\nInside the Button function, create a new function called onLearnMore. This function will hold the alert method. Your method should display a message like “Slipsh Splash” or something related to the ocean or water. Update the return statement of the Button function. It should activate the onLearnMore alert when clicked. Check your solution 3 4 5 6 7 8 9 10 11 12 13 14 function Button() { function onLearnMore(){ alert(\"Splish Splash!\"); }; return ( \u003cbutton onClick={onLearnMore}\u003e Learn More \u003c/button\u003e ); } Part 3: Profiles Component This last component will create a list of profile objects. Each profile object will contain headers, an image, a list, and a button. We will use the map function to help us create this list.\nThere are a lot of steps to make these profile objects. We are going to work on each part separately.\nA. Create the listItems function\nOpen the oceans.json file. It contains 7 JSON objects. Each object has multiple key/value pairs, such as a name and image. We will use these key/value pairs to create our list. Import the oceans.json file. Give it a meaningful alias, such as oceans. In the Profile function, remove the \u003ch3\u003e placeholder, but keep the \u003cButton /\u003e. Check your solution 3 4 5 6 7 8 9 10 11 12 13 14 import oceans from './oceans.json'; function Profile() { return( \u003c\u003e \u003cButton /\u003e \u003c/\u003e ); } export default Profile; B. Add the Profile Image\nEach profile object will have an emoji to represent it.\nWe will use map to help us iterate through the image values in the JSON file. Declare a variable called listItem and instantiate it equal to oceans.map(). Set the callback parameter of listItem to ocean =\u003e. The map function should return ocean which will include all elements required to create a profile object. Each profile will be contained in its own \u003cdiv\u003e. To keep each \u003cdiv\u003e unique, we will need to add a key which is set to the id property of each JSON object. We are working with JSON objects, so you will need curly braces. Using an image tag, set the src attribute equal to the image’s url. This is stored in the JSON file. The alt attribute should be set to the name property. The starter code contains some CSS styling for the image called img. Apply the styling to the image by using the className attribute. Make sure we have all the correct closing tags. The Profile function needs to return an list of listItems and the \u003cButton /\u003e. Check your solution 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const listItem = oceans.map(ocean =\u003e \u003cdiv key={ocean.id}\u003e \u003cimg src={ocean.image} alt={ocean.name} className=\"img\"/\u003e \u003c/div\u003e ); function Profile() { return( \u003c\u003e \u003cul\u003e {listItem} \u003c/ul\u003e \u003cButton /\u003e \u003c/\u003e ); } export default Profile; C. Background Colors\nBefore we start adding more details, let’s add some styling to help us visualize our list.\nIn the same \u003cdiv\u003e where you declared the key, add the styling “profile”.\nYou should see a small window of color for each emoji. There should be space between each block.\nCheck your solution 7 8 9 10 11 const listItem = oceans.map(ocean =\u003e \u003cdiv key={ocean.id} className=\"profile\" \u003e \u003cimg src={ocean.image} alt={ocean.name} className=\"img\"/\u003e \u003c/div\u003e ); Check your output Quick sanity check for your application.\nHere is a peek at the first 2 profile objects.\nThere should be 7 total. You should have a background color and an emoji. You will find the button at the very bottom of the browser window. Let’s use the background colors to help organize ocean creatures by type. If the creature is a fish, apply the isAFish styling. Else, keep the profile styling. Use the fishCheck property of the JSON file to add conditional rendering to this project.\nCheck your solution 8 \u003cdiv key={ocean.id} className={`${ocean.fishCheck === \"true\" ? \"isAFish\" : \"profile\"}`}\u003e Check your output Quick sanity check for your application.\nHere is a peek at the first 2 profile objects.\nThe shark’s background is blue, the crab background is that purple-blue. The fish’s background should be blue in your browser. D. Names\nLet’s add names to the profile objects.\nCreate an \u003ch1\u003e tag to display the name property of the JSON file.\nCheck your solution 11 \u003ch1\u003e{ocean.name}\u003c/h1\u003e E. Fun Facts\nInside the JSON file, you will see that each JSON object has 3 facts. We are going to share those facts in a list within the profile.\nCreate a new header for the name of your list. Make sure that is smaller than the name.\nYou decide if you want an ordered list or unordered list.\nEach list element should be a fact property.\nCheck your solution Notice that the example is using an \u003ch3\u003e header and an unordered list. These are aesthetic choices only. Your header and list may differ.\n13 14 15 16 17 18 \u003ch3\u003eFun Facts:\u003c/h3\u003e \u003cul\u003e \u003cli\u003e{ocean.fact1}\u003c/li\u003e \u003cli\u003e{ocean.fact2}\u003c/li\u003e \u003cli\u003e{ocean.fact3}\u003c/li\u003e \u003c/ul\u003e F. Learn More\nLet’s move the button into each profile object.\nRelocate \u003cButton /\u003e inside listItems below the list of fun facts. Check your solution 17 18 19 20 //…fun facts list \u003c/ul\u003e \u003cButton /\u003e \u003c/div\u003e G. OPTIONAL Code Clean Up\nSince Profile is no longer returning multiple elements, you can remove the unnecessary fragment tags.\nCheck your solution 22 23 24 25 26 return( \u003cul\u003e {listItem} \u003c/ul\u003e ); Final Steps Congrats you have used the map function to iterate through a collection of JSON objects to create small profiles of various creatures found in the ocean.\nCheck your output Quick sanity check for your application.\nHere is a peek at the first profile object and the Banner.\nThe Banner should cross the entire browser window. There should be 7 profiles total. If the profile is for a fish, it will have a blue background. Else it will have a more purple background. Each profile will have a name, emoji, and list of 3 fun facts The Learn More button will be contained within each profile. ",
    "description": "",
    "tags": null,
    "title": "Exercises",
    "uri": "/react-part-2/exercises/index.html"
  },
  {
    "content": "In the JavaScript landscape, we can use a JavaScript syntax extension. A syntax extension adds new syntax rules that are not a regular feature of the base programming language. Adding new syntax features to programming languages is a large lift and can lead to frustration and confusion amongst the developer community. However, if there is a specific use case that would benefit from new syntax rules, language developers may create a syntax extension to allow a small set of developers to access that beneficial syntax without impacting the base language. One such extension for JavaScript is JSX or JavaScript XML. JSX syntax allows developers to write HTML elements inside JavaScript code without having to handle any of the rendering themselves. React developers use JSX because it efficiently renders components of web applications.\nFor example, with JSX, we can assign some HTML to a variable like so:\nlet newElement = \u003ch1\u003eThis is a new element!\u003c/h1\u003e; Behind the scenes, our React app will use this line of code to create a new HTML element that can be passed on to the browser. You will notice that we didn’t have to handle any of this rendering. All we had to do was write a small heading!\nRendering data in JSX One task that we will need to take on as JavaScript developers is rendering data values in our application. If we turn our attention back to our hiking application, we may want to create a customized welcome page for the users after they log in to their accounts. We can store the value of a user’s name in a variable called hikersName. Let’s try and write some JSX.\nlet hikersName = \"Mo\"; let greeting = \u003ch1\u003eWelcome, hikersName!\u003c/h1\u003e If we ran this code in our browser, it would just say “Welcome, hikersName!”. We want to render the value of the hikersName variable not the name of the variable. To do so, we need to wrap JavaScript expressions in HTML in curly braces to ensure that when the page is rendered, we are clear on what is HTML and what is JavaScript.\nlet hikersName = \"Mo\"; let greeting = \u003ch1\u003eWelcome, {hikersName}!\u003c/h1\u003e Now if we were to run this code, the value of hikersName, “Mo”, would be passed to greeting so when the page rendered, you would have an h1 element that said “Welcome, Mo!”. Wrapping the variable in curly braces gives our hiking application the flexibility to display a custom welcome page for the hiker once they log into their account. If hikersName had a different value than the h1 element would render with that value instead.\nComments Now you might be wondering what comments look like in JSX. You can start a comment with {/* and then end a comment with */}.\n{/* Pass value of hiker's name to welcomePage element */} let hikersName = \"Mo\"; let greeting = \u003ch1\u003eWelcome, {hikersName}!\u003c/h1\u003e Limitations Because you have to wrap your JavaScript expressions when writing JSX, there are some things you cannot write the way you used to when you are writing something inside {}:\nLoops Variable declaration Function declaration if/else conditions objects However, there are some workarounds that you will learn more about as we dive into React further.\nCheck Your Understanding Question True/False: I can write a loop wrapped in a JavaScript expression in JSX.\nQuestion True/False: I cannot write HTML with JSX. JSX is just JavaScript but with a cooler name.\n",
    "description": "",
    "tags": null,
    "title": "JavaScript Syntax Extensions",
    "uri": "/modern-js/reading/extensions/index.html"
  },
  {
    "content": "Explore the Starter Code Fork and Clone the starter code repo.\nRun npm install Run npm start to run the starter code. Open the project and examine the following parts:\ncomponents directory satData.jsx contains the data used for this assignment. It is an array of objects. Note the key/value pairs. Buttons.jsx contains two \u003cbutton\u003e tags. The both \u003cbutton\u003e tags are placeholders. We will be updating these buttons as we work in this component. When the project is complete, it will render 4 buttons. Table.jsx contains a very basic table structure. You will expand the table so that it displays the required data for each satellite. “TBD” stands for “To Be Determined” styling.css contains CSS stylings. Styling is optional for this assignment. If you want to use the styling provided, read the Optional Styling section to see where to import this file. If you have not started the project yet, run npm start in the terminal. You should see the following:\nNext ",
    "description": "",
    "tags": null,
    "title": "Task 1: Getting Started",
    "uri": "/assignments/orbit-report/getting-started/index.html"
  },
  {
    "content": "With all the different coding languages in the world, it can be difficult to choose which one to learn first. JavaScript is a programming language that has many different applications. Programmers can use JavaScript to make websites, visualize data, and even create art! This class will start with JavaScript for several reasons.\nThe main reason is that JavaScript has become a key language for web development. Understanding how the internet works and being able to create web applications are important skills in today’s landscape. With JavaScript, you can work on your own web applications and support current applications for a company.\nAnother reason is that JavaScript is very much like other programming languages. Throughout the course and your career, you will hear that once you learn one programming language, it is easier to learn another. Programmers have found this to be true, especially if the new language closely matches the first.\n",
    "description": "",
    "tags": null,
    "title": "Why Learn JavaScript?",
    "uri": "/introduction/reading/why-learn-javascript/index.html"
  },
  {
    "content": "The general syntax for this method is:\nlet element = document.getElementById(\"element-id\"); Searches the HTML document for an element that has an id attribute that matches the string parameter. Returns a reference to the matching element object if match found. If NO matching element is found, null is returned.\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eDOM Examples\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003egetElementById Example\u003c/h1\u003e \u003cp id=\"description\"\u003e This will be turned blue. \u003c/p\u003e \u003cscript\u003e let paragraph = document.getElementById(\"description\"); console.log(\"paragraph contents:\", paragraph.innerHTML.trim()); paragraph.style.color = \"blue\"; \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output\nparagraph contents: This will be turned blue. Tip Because getElementById returns null if an element with a matching id can NOT be found, you could see a message like TypeError: paragraph is null. Be sure to double check the id you are using in JavaScript and in the HTML.\n",
    "description": "",
    "tags": null,
    "title": "getElementById Examples",
    "uri": "/appendices/dom-method-examples/get-element-examples/index.html"
  },
  {
    "content": ".includes() Example The general syntax for this method is:\narrayName.includes(item) This method checks if an array contains the item specified in the parentheses (), and returns true or false.\nExample let charles = [1, 7, 5, 9, 5]; let otherArr = ['hello', 'world!']; console.log(charles.includes(5)); console.log(otherArr.includes('hi')); Output\ntrue false ",
    "description": "",
    "tags": null,
    "title": "includes Example",
    "uri": "/appendices/array-method-examples/includes-examples/index.html"
  },
  {
    "content": "Math.ceil The general syntax for this method is:\nMath.ceil(number) This method rounds a decimal value UP to the next integer (hence the ceiling reference in the name). Integer values remain the same.\nceil also operates on arrays.\nNumerical strings can also be evaluated, but should be avoided as a best practice.\nExample 1 2 3 4 5 6 7 console.log(Math.ceil(8.88)); console.log(Math.ceil(8.1)); console.log(Math.ceil(-3.9)); console.log(Math.ceil(5)); Console Output\n9 9 -3 5 Math.floor The general syntax for this method is:\nMath.floor(number) This method is the opposite of Math.ceil. It rounds a decimal value DOWN to the previous integer. Integer values remain the same.\nfloor also operates on arrays.\nNumerical strings can also be evaluated, but should be avoided as a best practice.\nExample 1 2 3 4 5 6 7 console.log(Math.floor(8.88)); console.log(Math.floor(8.1)); console.log(Math.floor(-3.9)); console.log(Math.floor(5)); Console Output\n8 8 -4 5 Math.trunc The general syntax for this method is:\nMath.trunc(number) This method removes any decimals and returns only the integer part of number.\ntrunc also operates on arrays.\nNumerical strings can also be evaluated, but should be avoided as a best practice.\nExample 1 2 3 console.log(Math.trunc(8.88)); console.log(Math.trunc(10.000111)); Console Output\n8 10 Note At first glance, Math.floor and Math.trunc appear to do exactly the same thing. However, a closer look shows that the two methods treat negative numbers differently.\n1 2 3 console.log(Math.floor(-15.88)); console.log(Math.trunc(-15.88)); Console Output\n-16 -15 Combine with map When combined with the map array method, ceil, floor, and trunc will operate on each entry in an array. The syntax for this is:\narrayName.map(Math.method) Example 1 2 3 4 5 let numbers = [-2, 3.33, -4.44, 8.88]; console.log(numbers.map(Math.ceil)); console.log(numbers.map(Math.floor)); console.log(numbers.map(Math.trunc)); Console Output\n[ -2, 4, -4, 9 ] [ -2, 3, -5, 8 ] [ -2, 3, -4, 8 ] ",
    "description": "",
    "tags": null,
    "title": "Math.ceil, floor, and trunc Examples",
    "uri": "/appendices/math-method-examples/ceilfloortrunc-examples/index.html"
  },
  {
    "content": "In this studio, you will make a second Pinterest-inspired application. This studio will add conditional rendering and the map function to the project.\nThe app you complete in this studio will have the following functionality:\nA star rating component that can be updated to display 0 - 5 stars. The ability to mimic the Save vs Saved button on a Pinterest pin using conditional rendering. Displaying specific recipe information using the map function, if necessary, and a JSON file. CSS styling has been created for this project. The instructions will let you know what and how to style elements. Getting Started Check out the application in the part2/studio directory from the exercises and studio repo.\nExplore the codebase.\nLook at the App function.\nYou can see the list of components.\n9 10 11 12 13 14 15 16 17 18 19 20 export default function App() { return ( \u003c\u003e \u003cRecipeImage /\u003e \u003cRecipeName /\u003e \u003cRateARecipe rating={5} /\u003e \u003cButton saveButton={true} /\u003e \u003cAuthorInfo /\u003e \u003cIngredientList /\u003e \u003c/\u003e ); } Notice that both RateARecipe and Button have variables. RateARecipe takes a number and Button takes a boolean.\nWe will be providing the code (hard coding) for this app to render conditionally. Keep that in mind as you work on this studio. Test things by changing these variables here.\nIn the components folder:\nOpen the recipe.json file and populate the values with data from a recipe you find online. This can be the same recipe you used in Part 1 or a new recipe. Save the file. Part 1: RateARecipe Desired Output: The RateARecipe function should return 0-5 stars. The number of stars rendered will be determined by passing the function an argument.\nOpen the RateARecipe.jsx file inside the components folder. You will see an array of star emojis. These will be our rating system for the Pin.\nInside RateARecipe create a new function, that will also take props.\nLet’s name it GiveRating. This function will return the number of stars passed to RateARecipe.\nGiveRating will use the number passed to RateARecipe to index through the stars array. You will need to apply some math to make the array output match the number of stars rendered.\nReturn the rating at least an \u003ch3\u003e level header.\n4 5 6 function GiveRating() { return \u003ch3\u003e{stars[props.rating - 1]}\u003c/h3\u003e; } GiveRating is nested inside RateARecipe and is returning the number of stars. Next, let’s add a conditional to make sure a user only provides a number between 1-5.\nCreate a ternary that checks the value of props. If the number is between 1 and 5, then render GiveRating else render null.\nTest this in the App function by updating the value of rating.\nPart 2: Buttons Let’s explore the buttons! A Pinterest pin has a red button with the word “Save” printed on it. When a user clicks that button, it switches to black with the word “Saved”.\nThere are 3 components for the buttons.\nSaveButton and ClickedButton render the buttons in the browser. Both of these components contain an alert to verify we can click each button. The Button component will render either button based on a conditional. We will be using a boolean in the App function to serve as our “click” SaveButton Desired Output: A Red button with rounded corners which reads “Save” in white letters. If you hover over it, the red changes to a darker red. When you click the button, a pop appears that reads “You are saving this pin!”.\nThis button has already been created. You can use its code to help you create ClickedButton component.\nOpen the SaveButton file and explore the code. An alert has been added to demonstrate that you clicked the button. When you click the Save button on a Pinterest pin, it will share a notification that you Saved the pin to a board. The button class contains an id for the CSS needed to make the button red. The CSS has already been created in the styling.css. The styling also changes when you hover over the button. It’s unique to this button. Tip for Testing If you want to check how SaveButton works, you can nest it inside the App function. You can try this with any of the components you are creating.\nBe sure to remove it once you have a working Button component.\nClickedButton Desired Output: A black button with rounded corners. The word has changed to “Saved”. When you click on this button a message about removing the pin appears.\nMove into ClickedButton.jsx. It should function like the Save button, but it should display “Saved” instead of “Save”, and be black instead of red. For the styling, you can apply clickedButton as the id. This is found in the CSS styling which will need to be imported. It should also have an alert that lets a user know that when you click it the pin is removed from the board. Button Desired Output: Returns either SaveButton or ClickedButton based on the boolean value.\nThis function will hold the logic that will determine which button will appear in the browser.\nYou will need to create a conditional that will render SaveButton or ClickedButton.\nButton function should take an argument, such as props.\nCreate a variable that defines the props. Name the variable saveButton.\n5 const saveButton = props.saveButton; Create a conditional that does the following:\nIf the saveButton variable is true, then SaveButton will render else ClickedButton will appear. In the App function, the Button component has saveButton equal to true.\nTest the conditional by changing saveButton in the App function to false.\nPart 3: Add the Recipe Data The remaining components will be using the recipe.json file. You will need to import this file into each component. We can also use the map function to find the desired keys if it makes sense to you.\nRecipe Name Desired Output: This function needs to return the recipe name as an \u003ch1\u003e level header.\nOpen the RecipeName component. Render the recipe’s name as an \u003ch1\u003e level header. return the recipeName variable. Image Desired Output: Returns the image of the recipe from the JSON.\nImport the recipe JSON file. Find the recipeImage. Use the \u003cimg\u003e tag. You can pass the recipe name to the alt text value. Styling has been created for the image. If you would like to apply it set the className equal to recipeImage. Return recipeImage inside its own \u003cdiv\u003e. Ingredient Lists Desired Output: Create an unordered list of ingredients.\nThis component will map over a list of ingredients. The ingredients are contained within an array inside our JSON object. We will create a map function to iterate through the array of ingredients.\nImport the recipe. IngredientsList will return a single \u003cdiv\u003e that holds an \u003ch3\u003eIngredients\u003c/h3\u003e header. Create a list object by placing our map inside curly braces. In the other components, we used a variable to hold our map output. In this component, we will return the list as we render it. The map function will iterate through the ingredients using id as a key. Author Info Desired Output: A single component that returns the author’s name, image, and URL. There is CSS for the image that you can set if you desire.\nImport the recipe and styling.\nLet’s start by creating a variable that will return the author’s name. Create a \u003cdiv\u003e that returns the value of the author. You can set the key equal to the name.\nCreate a second variable that will use the map function to return the author’s image.\nSet the alt text equal to the author’s name. Apply the authorImage as the className. Finally, create the final variable that will host the URL. Return the link using the \u003ca\u003e tag. The URL can be the context between the opening and closing tags.\nReturn all variables in a final \u003cdiv\u003e.\n18 19 20 21 22 23 24 return ( \u003cdiv\u003e {recipeAuthorImage} {recipeAuthor} {recipeWebsite} \u003c/div\u003e ); Wrapping Up Congrats! You’ve finished the studio! Make sure that you stage, commit, and push your work up to GitHub.\n",
    "description": "",
    "tags": null,
    "title": "Studio",
    "uri": "/react-part-2/studio/index.html"
  },
  {
    "content": "Attention sports fans! Embrace your favorite quote(s):\nSport Quote Baseball “There may be people who have more talent than you, but there’s no excuse for anyone to work harder than you do.” - Derek Jeter Basketball “I’ve missed more than 9000 shots in my career. I’ve lost almost 300 games. 26 times I’ve been trusted to take the game winning shot… and missed. I’ve failed over and over and over again in my life. That is why I succeed.” - Michael Jordan Gymnastics “I’d rather regret the risks that didn’t work out than the chances I didn’t take at all.” - Simone Biles Football “I was always willing to work. I was not the fastest or biggest player, but I was determined to be the best football player I could be on the football field, and I think I was able to accomplish that through hard work.” - Jerry Rice Soccer “The backbone of success is…hard work, determination, good planning, and perseverance.” - Mia Hamm Tennis “If I don’t get it right, I don’t stop until I do.” - Serena Williams Rocky How can you listen to this and NOT be inspired? ( Gonna Fly now ) Optional Imagine your favorite motivational phrase here. - Some admired person Marathon Analogy Pretend you are not a runner (complete with the “0.0” sticker on your car), but you decide to compete in a marathon. You cannot just drive to the starting line, put on your running shoes and go.\nYou have to train:\nBegin by getting good at running 1 mile. Then get good at running 3 miles. Then get good at running 6, then 8, then 10 miles. By now you could try a half-marathon, and proudly slap a “13.1” sticker on your car. Continue training and increasing your distance. You WILL earn that “26.2” sticker, which will look GREAT when placed in line with 0.0 and 13.1. Your stickers demonstrate your commitment and might even inspire other non-runners. They will see how you started “just like them” and notice how your effort spurred personal growth. Learning to code follows the same idea:\nBegin with “Hello world!” Then learn variables, strings and arrays. Then learn if/else statements and loops, followed by functions and modules. Then code your first “half-marathon”. Continue practicing to increase your skills. You WILL earn that marathon.js sticker as you build solid demo projects and complete more interviews. Welcome, fellow coder. Don’t forget to inspire others. And don’t forget:\nYour heros worked really hard, so should you. Do your homework.\n",
    "description": "",
    "tags": null,
    "title": "Let's Play Ball",
    "uri": "/booster-rockets/sportsstuff/index.html"
  },
  {
    "content": "Now you are ready to take on fetch! Before going on to the next chapter, if you would like to review JSON, here are a few of our favorite resources.\nJSON Introduction Working with JSON ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/json/next-steps/index.html"
  },
  {
    "content": "HTTP requests must conform to the structure outlined by the World Wide Web Consortium (W3C) . We’ll discuss the most important and most commonly-used aspects of HTTP request structure.\nA generic HTTP request looks like this:\nGET /blog/ HTTP/1.1 Host: www.launchcode.org User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:67.0) Gecko/20100101 Firefox/67.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br DNT: 1 Connection: keep-alive Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Request Body The structure has these components:\nRequest line: The first line is the request line. It specifies the request method, path, and HTTP version being used. Request headers: From line 2 until the first blank line, request headers are included as a series of key-value pairs, one per line. Blank line: This signifies the end of the request headers. Request body (Optional): Below the blank line, the request body takes up the remainder of the HTTP request. Request Methods The request line is minimal. We have already discussed the path, which specifies the resource being requested. The first part of the request line, the request method, is new to us.\nA request method specifies the type of action to be carried out on the requested resource. HTTP defines 8 methods , of which we will only need to use 2: GET and POST.\nThe GET Method Using the GET method tells the server that we want to simply retrieve the resource. This is the most commonly used method. It is used for requests for HTML pages, CSS and JS files, and images. When you click on a link in a web page, you are triggering a GET request for the linked page.\nGET requests generally do not have a body, since they are asking rather than sending for information.\nExample GET requests are usually used for:\nLoading a page after typing an address into the browser’s address bar Conducting a search via a search engine Loading a page after clicking on a link The POST Method Using the POST method tells the server that we want to create new data on the server. As you will learn in the next chapter, POST is used when submitting a form.\nPOST requests usually have a body, which contains data that the server processes and stores in some fashion.\nExample Some common situations that use POST are:\nSigning into a web site Sending an email via a web-based email client Making an online purchase Headers There are quite a few request headers , but only a few will be useful to us.\nHeader Purpose Example Host The domain name or IP address of the server the request should be sent to. www.launchcode.org User-Agent Information about the client (usually a browser) making the request. The example is for a version of Firefox on a Mac. Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:67.0) Gecko/20100101 Firefox/67.0 Accept The types of data that the client is willing to accept in the response body. text/html,image/jpeg Content-Type The type of data included in the request body. Usually only used for POST requests. application/json,application/xml Body The optional request body may contain any data whatsoever, though it often includes form data submitted via a POST request. For example, when signing into a web site, the request body will contain your username and password. We will later learn that it can contain other data formats such as XML and JSON.\nAs mentioned above, GET requests generally do not have a body.\nCheck Your Understanding Question Visit Wikipedia\u0026rsquo;s article on HTTP request headers . Which request header is used to set cookies? (Cookies are small pieces of data related to your interaction with a web site.)\n",
    "description": "",
    "tags": null,
    "title": "Requests",
    "uri": "/http/reading/http-requests/index.html"
  },
  {
    "content": "Local, Remote, GitHub, Oh My! So far, this chapter has covered how to setup a Git repository on the local machine. However, one of the benefits of using a VCS is to store backups. If something bad happens to a coder’s machine, they might lose all of the code for their projects! This is where remote repositories come in. Instead of keeping a Git repository only on a local machine, the code base is also saved in a remote repository. Any team members working on the project keep copies of the code on their local machine.\nCollaborating with Colleagues What if a programmer wants to start collaborating with their colleagues on a new project? They might need to start with the work that one of their colleagues has already done. In this particular case, the programmer has to import the work from an online repository onto their local machine.\nThey can clone a remote repository by using the git clone \u003curl\u003e command. Github and other online Git systems give users the option to clone the repository through HTTPS or SSH depending on how their Github profile is set up. The \u003curl\u003e of the command is where the programmer adds the url to the repository that they are cloning.\nNote You have already cloned remote repositories before when working on your code. Collaborating with colleagues is one of the key reasons companies use Git to manage their code bases. The rest of this chaper will focus on these aspects of Git.\nRenaming the Default Branch When we run git init to start a new repository, part of the process creates a single, default branch. We can see its name by running the command git branch.\n$ git branch * main For the examples in this book, we refer to the default branch as main. However, depending on the Git settings on your computer, you might see a different one. This won’t affect the performance of your project in any way. That said, GitHub defaults to main for all new repositories. To keep our work clear, we should match our local and remote branch names.\nExample If your installed version of Git names the default branch something other than main, change it with the command:\n$ git branch -m old-branch-name main In this case, old-branch-name becomes main.\nContributing to a Remote Repository After they create a new feature, it is time to make a commit. When working with a remote repo, you may remember that the commit process includes five steps:\ngit status git add git commit git push origin main git log The fourth step uses the new command git push, where the commit is pushed to the remote from the local. origin indicates that the commit does indeed go to the remote, and main is the name of the branch that receives the commit.\nCheck Your Understanding Question What is the new command for making a commit to a remote repository?\n",
    "description": "",
    "tags": null,
    "title": "Remote Repositories",
    "uri": "/git/reading/remote-repositories/index.html"
  },
  {
    "content": " Task 1: Getting Started Task 2: Time to Communicate! ",
    "description": "",
    "tags": null,
    "title": "Studio: Communication Log",
    "uri": "/git/studio/index.html"
  },
  {
    "content": "Time to dive into learning about all the different tags for creating content! This page contains a helpful table of tags to know for beginning programmers to bookmark. This is by no means an exhaustive list of all HTML tags, but it is a good place to start.\nTags to Know Tag Name Code Definition Bold \u003cb\u003e When surrounding text, makes that text bold. Emphasis \u003cem\u003e When surrounding text, makes that text italic. Hyperlink \u003ca\u003e Creates hyperlinks. Image \u003cimg\u003e Denotes images. Break \u003cbr\u003e A single line break. Paragraph \u003cp\u003e Creates a paragraph in text. Section \u003cspan\u003e Makes a section in text. Division \u003cdiv\u003e Defines an area of the page. Form \u003cform\u003e Creates a form for user input. Unordered List \u003cul\u003e Creates an unordered list. Ordered List \u003col\u003e Creates an ordered list. List element \u003cli\u003e Denotes an element of the list. This tag is used for both ordered and unordered lists. Table \u003ctable\u003e Creates a table on the page. Heading Level One \u003ch1\u003e Creates a heading in the text. Note There are multiple headings in HTML going from h1 to h6. h1 is the top-level heading, h2 is a sub-heading of an h1, and so on. By default, the headings get progressively smaller as the heading level goes up.\nA good rule of thumb is to have only one h1 in a web page and to not skip a level as you add sub-headings. Resist the temptation to use the heading level to change the size of a given heading. The appearance of a heading should be changed using CSS. We will learn how to do this in the next chapter.\nTag Example Here is an example of a basic web page utilizing some of the tags above with the HTML used to make the site.\n1 2 3 4 5 6 7 8 9 10 11 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003ePlant-Loving Astronauts\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eSpace Plants Are Cool\u003c/h1\u003e \u003cp\u003eNASA discovers that plants can live in \u003cb\u003eouter space\u003c/b\u003e. More innovations from this discovery to follow.\u003c/p\u003e \u003c!-- add images from NASA of these space plants --\u003e \u003c/body\u003e \u003c/html\u003e Attributes Programmers can add extra information beyond element type to HTML tags. Programmers add attributes to HTML tags for further specification about the element’s appearance. Examples of attributes include the alignment of the element or alternate text to an image.\nProgrammers add attributes before the closing bracket in the opening tag, like so:\n\u003celement attribute = \"value\"\u003econtent\u003c/element\u003e Attributes Example Here is an example of a basic web page utilizing some of the tags above and appropriate attributes with the HTML used to make the site.\n1 2 3 4 5 6 7 8 9 10 11 12 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003ePlant-Loving Astronauts\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eSpace Plants Are Cool\u003c/h1\u003e \u003cp\u003eNASA discovers that plants can live in \u003cb\u003eouter space\u003c/b\u003e. More innovations from this discovery to follow.\u003c/p\u003e \u003cimg src = \"space-flower.jpg\" alt = \"Flower floating in space.\"\u003e \u003c!-- This image was taken by NASA and is in the Public Domain --\u003e \u003c/body\u003e \u003c/html\u003e The \u003cimg\u003e tag has two attributes that you will see a lot. src gives the location of the image that is being used and alt gives alternate text for screen reader users. For that reason, alt should be a concise description of what is going on in the image.\nCheck Your Understanding Question Which tag is used to make text italicized?\nb i em br ",
    "description": "",
    "tags": null,
    "title": "HTML Tags",
    "uri": "/html/reading/tags/index.html"
  },
  {
    "content": "Getting Ready: Developer Tools Firefox’s developer tools contain a lot of functionality, and we will only begin to touch on it here, learning more of its functionality later in the unit. In this class, we’ll learn about the tools available for working with HTML elements.\nAs you’ve learned, debugging is an essential part of coding. When it comes to debugging web pages, browser developer tools are indispensable.\nThis studio requires you to use Firefox’s developer tools. In particular, you should be able to:\nOpen Firefox’s dev tools Inspect an HTML element Modify an element’s HTML Explain the difference between the content displayed when using View Source and what you see in the Inspector tab Note The full documentation for Firefox’s developer tools covers these items, and much more.\nStudio Pick a news site ( The New York Times , for example), and use your browser’s developer tools to modify one of the main articles to use a picture and text of your choosing.\nHave fun with this, but be respectful of others and avoid overtly critical political or social commentary.\nYou might do something like this:\nImage URLs When linking to an image, pay attention to the protocol of both the site you are modifying and of the image you are including. The protocol will be either http or https.\nIf the site loads over https and your image uses http then the image may not load properly due to browser security restrictions. You should try to add s to the image protocol, and if that doesn’t work, look for another image.\nResources Using Firefox Page Inspector Firefox DevTools Documentation Bonus Mission Try adding your own image! If you want to use an image of your own that is not already available via the internet, here’s how:\nUpload the photo to a Dropbox account. You can use Dropbox Basic for this!\nView the photo on Dropbox and select Share, then Get link, then Go to link\nYou should now be viewing the image on the Dropbox site. If the URL contains ?dl=0, remove it. Add ?raw=1 to the end of the URL in the location bar of your browser and hit Enter. The URL should look something like this:\nhttps://www.dropbox.com/sc/qc3htnhv7fb3i2x/AAC5OzECOyBynstMDWawCZhxa?raw=1 Copy the URL of the loaded image. You can use this URL within any HTML.\n",
    "description": "",
    "tags": null,
    "title": "Studio: Making Headlines",
    "uri": "/html/studio/index.html"
  },
  {
    "content": "Just as with objects, we may want to add methods to our classes in addition to properties. So far, we have learned how to set the values of the class’s properties inside the constructor.\nWhen assigning methods in classes, we can either create them outside or inside the constructor.\nAssigning Methods Outside constructor When assigning methods outside of the constructor, we simply declare our methods the same way we would normally do for objects.\n1 2 3 4 5 6 7 8 9 class ClassName { constructor(parameters) { //assign properties with this.key = value } methodName(parameters) { //function code } } Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Astronaut { constructor(name, age, mass){ this.name = name; this.age = age; this.mass = mass; } reportStats() { let stats = `${this.name} is ${this.age} years old and has a mass of ${this.mass} kg.`; return stats; } } let fox = new Astronaut('Fox', 7, 12); console.log(fox.reportStats()); Console Output\nFox is 7 years old and has a mass of 12 kg. We declared our method, reportStats() outside of the constructor. When we declare a new instance of the Astronaut class, we can use the reportStats() method to return a concise string containing all of the info we would need about an astronaut.\nAssigning Methods Inside constructor When declaring methods inside the constructor, we need to make use of the this keyword, just as we would with our properties.\n1 2 3 4 5 6 7 class ClassName { constructor(parameters) { this.methodName = function(parameters) { //function code } } } Example Let’s consider the Astronaut class that we have been working with. When assigning the method, reportStats(), inside the constructor, we would do so like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Astronaut { constructor(name, age, mass){ this.name = name; this.age = age; this.mass = mass; this.reportStats = function() { let stats = `${this.name} is ${this.age} years old and has a mass of ${this.mass} kg.`; return stats; } } } let fox = new Astronaut('Fox', 7, 12); console.log(fox.reportStats()); Console Output\nFox is 7 years old and has a mass of 12 kg. Initially, this may seem to produce the same result as assigning reportStats() outside of the constructor. We will weigh the pros and cons of both methods below.\nWhich Way is Preferred? Example Try comparing the outputs of fox and hippo to see the effect of assigning a method inside the constructor versus outside the constructor. Open ClassMethods.js in javascript-projects/classes/chapter-examples to explore.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // Here we assign the method inside the constructor class AstronautI { constructor(name, age, mass){ this.name = name; this.age = age; this.mass = mass; this.reportStats = function() { let stats = `${this.name} is ${this.age} years old and has a mass of ${this.mass} kg.`; return stats; } } } // Here we assign the method outside of the constructor class AstronautO { constructor(name, age, mass){ this.name = name; this.age = age; this.mass = mass; } reportStats() { let stats = `${this.name} is ${this.age} years old and has a mass of ${this.mass} kg.`; return stats; } } let fox = new AstronautI('Fox', 7, 12); let hippo = new AstronautO('Hippo', 25, 1000); console.log(fox); console.log(hippo); In the case of assigning the method inside the constructor, each Astronaut object carries around the code for reportStats(). With today’s computers, this is a relatively minor concern. However, each Astronaut has extra code that may not be needed. This consumes memory, which you need to consider since today’s businesses want efficient code that does not tax their systems.\nBecause of this, if a method is the same for ALL objects of a class, define that method outside of the constructor. Each object does not need a copy of identical code. Therefore, the declaration of a method outside of the constructor will not consume as much memory.\nCheck Your Understanding Question What is the assignment for the grow method missing?\n1 2 3 4 5 6 7 8 9 10 class Plant { constructor(type, height) { this.type = type; this.height = height; } grow { this.height = this.height + 1; } } ",
    "description": "",
    "tags": null,
    "title": "Assigning Class Methods",
    "uri": "/classes/reading/class-methods/index.html"
  },
  {
    "content": "Getting Started Let’s create a class to handle new animal crew candidates!\nOpen up ClassStudio.js in javascript-projects/classes/studio and edit the file as you complete the studio activity.\nPart 1 - Add Class Properties Declare a class called CrewCandidate with a constructor that takes three parameters—name, mass, and scores. Note that scores will be an array of test results.\nCreate objects for the following candidates:\nBubba Bear has a mass of 135 kg and test scores of 88, 85, and 90. Merry Maltese has a mass of 1.5 kg and test scores of 93, 88, and 97. Glad Gator has a mass of 225 kg and test scores of 75, 78, and 62. Use console.log for each object to verify that your class correctly assigns the key/value pairs.\nPart 2 - Add First Class Method As our candidates complete more tests, we need to be able to add the new scores to their records.\nCreate an addScore method in CrewCandidate. The function must take a new score as a parameter. Code this function OUTSIDE of constructor. (If you need to review the syntax, revisit Assigning Class Methods). When passed a score, the function adds the value to this.scores with the push array method. Test out your new method by adding a score of 83 to Bubba’s record, then print out the new score array with objectName.scores. Part 3 - Add More Methods Now that we can add scores to our candidates’ records, we need to be able to evaluate their fitness for our astronaut program. Let’s add two more methods to CrewCandidate—one to average the test scores and the other to indicate if the candidate should be admitted.\nCalculating the Test Average Add an average() method outside constructor. The function does NOT need a parameter. To find the average, add up the entries from this.scores, then divide the sum by the number of scores. To make the average easier to look at, round it to 1 decimal place, then return the result from the function. Verify your code by evaluating and printing Merry’s average test score (92.7).\nDetermining Candidate Status Candidates with averages at or above 90% are automatically accepted to our training program. Reserve candidates average between 80 - 89%, while probationary candidates average between 70 - 79%. Averages below 70% lead to a rejection notice.\nAdd a status() method to CrewCandidate. The method returns a string (Accepted, Reserve, Probationary, or Rejected) depending on a candidate’s average. The status method requires the average test score, which can be called as a parameter OR from inside the function. That’s correct - methods can call other methods inside a class! Just remember to use the this keyword. Once status has a candidate’s average score, evaluate that score, and return the appropriate string. Test the status method on each of the three candidates. Use a template literal to print out '___ earned an average test score of ___% and has a status of ___.'. Part 4 - Play a Bit Use the three methods to boost Glad Gator’s status to Reserve or higher. How many tests will it take to reach Reserve status? How many to reach Accepted? Remember, scores cannot exceed 100%.\nTip Rather than adding one score at a time, could you use a loop?\n",
    "description": "",
    "tags": null,
    "title": "Studio: Classes",
    "uri": "/classes/studio/index.html"
  },
  {
    "content": "LaunchCode’s Marketing Team needs your help! To make the website more maintainable, they thought an object called launchcode that contains important facts and functions they need would be helpful. This way if they need to make a change to one of the facts, they just have to change the object in one place as opposed to going through pages of code to make the change in every place.\nHere is what they need the launchcode object to contain:\nA key called organization with a value of \"nonprofit\". A key called executiveDirector with a value of \"Jeff\". A key called percentageCoolEmployees with a value of 100. A key called programsOffered with a value of [\"Web Development\", \"Data Analysis\", \"Liftoff\"]. And a method called launchOutput(). This method will return a string. Let’s use Test-Driven Development to write this code! Rather than complete the code and then test it, TDD flips the process:\nWrite a test first - one that checks the program for a specific outcome. Run the test to make sure it fails. Write a code snippet that passes the test. Repeat steps 1 - 3 for the remaining features of the program. Examine the code and test scripts, and refactor them to increase efficiency. Remember the DRY idea (Don’t Repeat Yourself). Source Code Open up the studio directory in javascript-projects/unit-testing and note the files:\nindex.js holds the object we want to design. tests/launchcode.test.js holds the testing script. The files are mostly empty. Only a framework has been provided for you. Run npm install in the terminal to get everything ready to go.\nStart With the Properties Let’s start our work with the properties we need to add to the object.\norganization Inside the describe function in launchcode.test.js, write a test that will check that the value of organization is \"nonprofit\". Run your test. With your test complete, turn your attention to index.js and add the organization property to launchcode. Run your tests to make sure that everything works as expected. executiveDirector Write a new test that will check that the value of executiveDirector is \"Jeff\". Run your test. Add the executiveDirector property to launchcode. Run your tests! percentageCoolEmployees Write another test that will check that the value of percentageCoolEmployees. Run your test. Add percentageCoolEmployees to launchcode. Run your tests! programsOffered Write a fourth test that will check the value of programsOffered. You should have four expect statements within your test. Three of them should check that the array contains the appropriate values and the final one should check that the array is the appropriate size. Before moving on, take a moment either individually or with a classmate, to reflect on why you would need these four expect statements. Run your test. Add the programsOffered property to launchcode. Run your tests! You now have the properties set up for the launchcode object. Time to move on to creating the launchOutput() method.\nlaunchOutput() launchOutput() needs to meet the following conditions:\nWhen passed a number that is ONLY divisible by 2, return 'Launch!' When passed a number that is ONLY divisible by 3, return 'Code!' When passed a number that is ONLY divisible by 5, return 'Rocks!' When passed a number that is divisible by 2 AND 3, return 'LaunchCode!' When passed a number that is divisible by 3 AND 5, return 'Code Rocks!' When passed a number that is divisible by 2 AND 5, return 'Launch Rocks!' When passed a number that is divisible by 2, 3, AND 5, return 'LaunchCode Rocks!' When passed a number that is NOT divisible by 2, 3, or 5, return 'Rutabagas! That doesn't work.' To make sure that you meet all of these conditions, you need to take it one test at a time.\nWrite the First Test In launchcode.test.js, complete the describe function by adding a test for condition #1:\nWhen passed a number that is ONLY divisible by 2, launchOutput() returns 'Launch!'\nRun the test. It should fail because there is no code inside launchOutput() yet!\nWrite Code to Pass the First Test In index.js, use an if statement inside the launchOutput() function to check if the parameter is evenly divisible by 2, and then return an output. (Hint: modulus).\nRun the test script again to see if your code passes. If not, modify launchOutput() until it does.\nWrite the Next Two Tests In launchcode.test.js, add tests for the conditions:\nWhen passed a number that is ONLY divisible by 3, launchOutput() returns 'Code!' When passed a number that is ONLY divisible by 5, launchOutput() returns 'Rocks!' Run the tests. The two new ones should fail, but the first should still pass. Modify the it statements as needed if you see a different result.\nWrite Code to Pass the New Tests Add more code inside launchOutput() to check if the parameter is evenly divisible by 2, 3, or 5, and then return an output based on the result.\nRun the test script again to see if your code passes all three tests. If not, modify launchOutput() until it does.\nHmmm, Tricky In launchcode.test.js, add a test for the condition:\nWhen passed a number that is divisible by 2 AND 3, launchOutput() returns 'LaunchCode!' (not 'Launch!Code!').\nRun the tests. Only the new one should fail.\nModify launchOutput() until the function passes all four of the tests.\nMore Tests and Code Snippets Continue adding ONE test at a time for the remaining conditions. After you add EACH new test, run the script to make sure it FAILS, while the previous tests still pass.\nModify launchOutput() until the function passes the new test and all of the old ones.\nPresto! By starting with the testing script, you constructed launchOutput() one segment at a time. The result is complete, valid code that has already been checked for accuracy.\nNew Condition Now that your function passes all 8 tests, let’s change one of the conditions. For the case where a number is divisible by both 2 and 5, instead of returning 'Launch Rocks!', we want the function to return 'Launch Rocks! (CRASH!!!!)'.\nModify the testing and function code to deal with this new condition.\nBonus Missions DRYing the Code Examine launchOutput() and the describe functions. Notice that there is quite a bit of repetition in the code.\nTry adding arrays, objects, and/or loops to refactor the code into a more efficient structure.\n",
    "description": "",
    "tags": null,
    "title": "Studio: Unit Testing",
    "uri": "/unit-testing/studio/index.html"
  },
  {
    "content": "Testing is a bit of an art; there are no hard and fast rules about how to go about writing good tests. That said, there are some general principles that you should follow. In this section, we explore some of these.\nIn particular, we focus on identifying good test cases by working through a specific example. A test case is a single situation that is being tested.\nWhat to Test When writing tests for your code, what should you test? You can’t test every possible situation or input. But you also don’t want to leave out important cases. A function or program that isn’t well-tested might have bugs lurking beneath the surface.\nNote Since we are focused on unit testing, in this chapter we will generally use the term “unit” to refer to the function or program under consideration.\nRegardless of the situation, there are three types of test cases that you should consider: positive, negative, and edge cases.\nA positive test verifies expected behavior with valid data. A negative test verifies expected behavior with invalid data. An edge case is a subset of positive tests, which checks the extreme edges of valid values. Example Imagine a function named setTemperature that accepts a number between 50 and 100.\nPositive test values: 56, 75, 80 Negative test values: -1, 101, \"70\" Edge case values: 50, 100 Considering positive, negative, and edge tests will go a long way toward helping you create well-tested code.\nLet’s see these in action, by writing tests for a familiar function, isPalindrome().\nSetting Up Here’s the function we want to test:\n1 2 3 4 5 6 7 function reverse(str) { return str.split('').reverse().join(''); } function isPalindrome(str) { return reverse(str) === str; } Open up the palindrome-example directory in javascript-projects/unit-testing/chapter-examples.\nNote that we have exported the isPalindrome function:\nmodule.exports = isPalindrome; You have become used to testing your code by running it and printing output with console.log(). When testing code with unit tests, we no longer need to take this approach.\nTip If you find yourself tempted to add a console.log() statement to your code, write a unit test instead! You would mostly likely remove that console.log() after getting your code to work, while the test will remain for you and other developers to use in the future.\nFinally, create a tests directory and inside, make a new file called palindrome.test.js. This file should include imports and a describe block:\n1 2 3 4 5 const isPalindrome = require('../palindrome.js'); describe(\"testing isPalindrome\", function(){ }); Okay, let’s review the tests!\nPositive and Negative Test Cases Positive Test Cases We’ll start with positive and negative tests. For isPalindrome, some positive tests have inputs:\n\"a\" \"aaaa\" \"aba\" \"racecar\" Calling isPalindrome with these inputs should return true in each case. Notice that these tests are as simple as possible. Keeping test inputs simple, while still covering your desired test cases, will make it easier to fix a bug in the event that a unit test fails.\nLet’s add tests for these inputs to tests/palindrome.test.js:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const isPalindrome = require('../palindrome.js'); describe(\"isPalindrome\", function(){ test(\"should return true for a single letter\", function() { expect(isPalindrome(\"a\")).toBe(true); }); test(\"should return true for a single letter repeated\", function() { expect(isPalindrome(\"aaa\")).toBe(true); }); test(\"should return true for a simple palindrome\", function() { expect(isPalindrome(\"aba\")).toBe(true); }); test(\"should return true for a longer palindrome\", function() { expect(isPalindrome(\"racecar\")).toBe(true); }); }); Note the clear test case descriptions (for example, “should return true for a single letter repeated”), which will help us easily identify the expected behavior of our code later.\nAfter adding the positive tests to your file, run them to make sure they all pass using the command npm test.\nNegative Test Cases For isPalindrome, some negative tests have inputs:\n\"ab\" \"launchcode\" \"abA\" \"so many dynamos\" Calling isPalindrome with these inputs should return false in each case. The last two of these negative tests deserve a bit more discussion.\nWhen writing our isPalindrome function initially, we made two important decisions:\nCase should be considered, and whitespace should be considered. The definition of a palindrome differs sometimes on these two matters, so it’s important to test them.\nTesting with input \"abA\" ensures that case is considered, since the lowercase version of this string, \"aba\", is a palindrome. Testing with \"so many dynamos\" ensures that whitespace is considered, since the version of this string with whitespace removed, \"somanydynamos\", is a palindrome.\nNote It’s important to isolate your test cases. For example, \"So Many Dynamos\" is a poor choice of input for a negative test, since it contains two characteristics that are being tested for - case and whitespace. If a test with this input failed, it would NOT be clear why it failed.\nIncluding specific tests that demonstrate how our isPalindrome function behaves in these situations helps make our code self-documenting. Someone can read our tests and easily see that we do consider case and whitespace.\nLet’s add some test for these negative cases. Add these within the describe call.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 test(\"should return false for a longer non-palindrome\", function() { expect(isPalindrome(\"launchcode\")).toBe(false); }); test(\"should return false for a simple non-palindrome\", function() { expect(isPalindrome(\"ab\")).toBe(false); }); test(\"should be case-sensitive\", function() { expect(isPalindrome(\"abA\")).toBe(false); }); test(\"should consider whitespace\", function() { expect(isPalindrome(\"so many dynamos\")).toBe(false); }); Now run the tests to make sure they pass. Your code now includes a set of tests that considers a wide variety of positive and negative cases.\nEdge Cases Recall our definition of edge case:\nAn edge case is a test case that provides input at the extreme edge of what the unit should be able to handle.\nEdge cases can look very different for different units of code. Most of the examples we provided above dealt with numerical edge cases. However, edge cases can also be non-numeric.\nIn the case of isPalindrome, the most obvious edge case would be that of the empty string, \"\". This is the smallest possible string that we can use when calling isPalindrome. Not only is it the smallest, but it is essentially different from the next longest string, \"a\"—one has characters and one doesn’t.\nShould the empty string be considered a palindrome? That decision is up to us, the programmer, and there is no right or wrong answer. In our case, we decided to take a very literal definition of the term “palindrome” by considering case and whitespace. In other words, our definition says that a string is a palindrome exactly when it equals its reverse. Since the reverse of \"\" is also \"\", it makes sense to consider the empty string a palindrome.\nLet’s add this test case to our spec:\n1 2 3 test(\"should consider the empty string a palindrome\", function() { expect(isPalindrome(\"\")).toBe(true); }); Now run the tests, which should all pass.\nYou might think that another edge case is that of the longest possible palindrome. Such a palindrome would be as long as the longest possible string in JavaScript. This case is not worth considering for a couple of reasons:\nThe length of the longest string can vary across different JavaScript implementations . The most recent JavaScript specification states that the maximum allowed length of a string should be 2^53 - 1 characters. This is a LOT of characters, and it is unrealistic to expect that our function will ever be given such a string. Toward a Better Testing Workflow In this case, we had a well-written function to write tests for, so it was straightforward to create tests that pass. Most situations will not be this simple. Your tests will often uncover bugs, forcing you to go back and update your code. That’s okay! This is precisely what tests are for.\nThe workflow for this situation is:\nWrite code Write tests Fix any bugs found while testing The rest of the chapter focuses on a programming technique that allows you to completely eliminate the third step, by reversing the order of the first two:\nWrite tests Write code As you will soon learn, writing your tests before the code is a great way to enhance your programming efficiency and quality.\nCheck Your Understanding Let’s assume we updated isPalindrome to be case-insensitive (e.g. isPalindrome('Radar') returns true).\nQuestion Which of the following is an example of positive test case for checking if isPalindrome is case-insensitive?\naa aBa Mom Taco Cat AbAb Question Which of the negative test cases listed above are no longer valid for our case-insensitive isPalindrome?\nab launchcode abA so many dynamos ",
    "description": "",
    "tags": null,
    "title": "Unit Testing in Action",
    "uri": "/unit-testing/reading/unit-testing-in-action/index.html"
  },
  {
    "content": "Booleans and Objects Objects are not stored by their properties or by value, but by reference. Storing something by reference means that it is stored based on its location in memory. This can lead to some confusion when comparing objects.\nExample Let’s see how this affects our zoo software! Surely, the zoo has more than one tortoise. The second tortoise is named Patricia!\n1 2 3 4 5 6 7 8 9 10 let tortoiseTwo = { species: \"Galapagos Tortoise\", name: \"Patricia\", weight: 800, age: 85, diet: [\"pumpkins\", \"lettuce\", \"cabbage\"], sign: function() { return this.name + \" is a \" + this.species; } }; Because Pete and Patricia are members of the same species, are the same age, and have the same diet, you might notice that many of their properties are equal, but some are not. Pete weighs more than Patricia and of course, they have different names!\nFor this example, we will only keep the species and diet properties.\n1 2 3 4 5 6 7 8 9 10 11 let tortoiseOne = { species: \"Galapagos Tortoise\", diet: [\"pumpkins\", \"lettuce\", \"cabbage\"] }; let tortoiseTwo = { species: \"Galapagos Tortoise\", diet: [\"pumpkins\", \"lettuce\", \"cabbage\"] }; console.log(tortoiseOne === tortoiseTwo); Console Output\nfalse The objects contain properties that have the same keys and equal values. However, the output is false.\nEven though tortoiseOne and tortoiseTwo have the same keys and values, they are stored in separate locations in memory. This means that even though you can compare the properties in different objects for equality, you cannot compare the objects themselves for equality.\nIterating Through Objects We can iterate through all of the values in an object, much like we would do with an array. We will use a for loop to do that, but with a slightly different structure. for...in loops are specifically designed to loop through the properties of an object. Each iteration of the loop accesses a key in the object. The loop stops once it has accessed every property.\nExample 1 2 3 4 5 6 7 8 9 10 11 let giraffe = { species: \"Reticulated Giraffe\", name: \"Cynthia\", weight: 1500, age: 15, diet: \"leaves\" }; for (item in giraffe) { console.log(item + \", \" + giraffe[item]); } Console Output\nspecies, Reticulated Giraffe name, Cynthia weight, 1500 age, 15 diet, leaves In this example, item is a variable that holds the string for each key. It is updated with each iteration of the loop.\nNote Inside a for..in loop, we can only use bracket syntax to access the property values.\nExample Open the chapter-examples directory in the javascript-projects/objects-and-math directory. Inside ForInLoop.js, write a for..in loop to print to the console the values in the tortoiseOne object.\nObjects and Functions Programmers can pass an object as the input to a function, or use an object as the return value of the function. Any change to the object within the function will change the object itself.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 let giraffe = { species: \"Reticulated Giraffe\", name: \"Cynthia\", weight: 1500, age: 15, diet: \"leaves\" }; function birthday(animal) { animal.age = animal.age + 1; return animal; } console.log(giraffe.age); birthday(giraffe); console.log(giraffe.age); Console Output\n15 16 On line 16, when the birthday function is called, giraffe is passed in as an argument and returned. After the function call, giraffe.age increases by 1.\nCheck Your Understanding Question What type of loop is designed for iterating through the properties in an object?\nQuestion Given the following object definitions, which statement returns true?\n1 2 3 4 5 6 7 8 9 10 11 let tortoiseOne = { age: 150, species: \"Galapagos Tortoise\", diet: [\"pumpkins\", \"lettuce\", \"cabbage\"] }; let tortoiseTwo = { age: 150, species: \"Galapagos Tortoise\", diet: [\"pumpkins\", \"lettuce\", \"cabbage\"] }; tortoiseOne == tortoiseTwo tortoiseOne === tortoiseTwo tortoiseOne.age === tortoiseTwo.age ",
    "description": "",
    "tags": null,
    "title": "Coding with Objects",
    "uri": "/objects-and-math/reading/coding-with-objects/index.html"
  },
  {
    "content": "In the exercises, you created objects to store data about the candidates for our animal astronaut corps. For this studio, we provide you with a ready-made set of candidates.\nYou must create code to:\nSelect the crew. Perform critical mission calculations. Determine the fuel required for launch. Select the Crew To access the code for the first part, open ObjectsStudio01.js in javascript-projects/objects-and-math/studio.\nRandomly Select ID Numbers Each candidate was assigned an ID number, which is stored in the candidate’s data file and in the idNumbers array.\nWrite a selectRandomEntry function to select a random entry from the idNumbers array. Review the Combining Math Methods section if you need a reminder on how to do this. Call the function three times to select three ID numbers. Store these selections in a new array, making sure to avoid repeated numbers. No animal can be selected more than once! Tip arrayName.includes(item) can be used to check if the array already contains item. A while loop can keep the selection process going until the desired number of entries have been added to the array.\nBuild a crew Array Design a function that takes two arrays as parameters. These hold the randomly selected ID numbers and the candidate objects.\nUse one or more loops to check which animals hold the lucky ID numbers. They will be going on the space mission! Store these animals in a crew array, and then return that array.\nUse a template literal to print, '____, ____, and ____ are going to space!' Fill in the blanks with the names of the selected animals.\nOrbit Calculations Open ObjectStudio02.js in javascript-projects/objects-and-math/studio to work on the next section.\nSpacecraft orbits are not circular, but we will assume that our mission is special. The animals will achieve a circular orbit with an altitude of 2000 km.\nDefine a function that returns the circumference (C = 2πr) of the orbit. Round the circumference to an integer. Define the missionDuration function to take three parameters - the number of orbits completed, the orbit radius, and the orbital speed. Set the default radius to 2000 km and the default orbital speed to 28000 km/hr. Calculate how long it will take our animals to complete a certain number of orbits (time = distance/speed). Round the answer to 2 decimal places, then return the result. For example, with the default radius and speed, 5 orbits will take about 2.24 hours. Print, 'The mission will travel ____ km around the planet, and it will take ____ hours to complete.' Time for an excursion! Code an oxygenExpended function to accomplish the following:\nThe function should take a candidate object as a parameter and NOT the crew array. Note When you call oxygenExpended, feel free to use your selectRandomEntry to pick the crew member to pass into the function.\nThe spacewalk will last for three orbits around the earth. Use missionDuration to calculate how many hours the spacewalk will take. Use the candidate’s o2Used method to calculate how much oxygen (O :sub:2) they consume during the spacewalk. Round the answer to 3 decimal places. Return the string, '__ will perform the spacewalk, which will last __ hours and require __ kg of oxygen.' Fill in the blanks with the animal’s name, the spacewalk time, and the amount of O :sub:2 used. We should not restrict our mission to the default values for orbital radius and orbital speed. Refactor oxygenExpended to accept values for these items. Remember to include the values in the missionDuration call. Bonus Missions Conserve O :sub:2 Instead of randomly selecting a crew member for the spacewalk, have your program select the animal with the smallest oxygen consumption.\nFuel Required for Launch Open ObjectsStudio03.js in javascript-projects/object-and-math/studio.\nA general rule of thumb states that it takes about 9 - 10 kg of rocket fuel to lift 1 kg of mass into low-earth orbit (LEO). For our mission, we will assume a value of 9.5 kg to calculate how much fuel we need to launch our crew into space.\nWrite a crewMass function that returns the total mass of the selected crew members rounded to 1 decimal place. The mass of the un-crewed rocket plus the food and other supplies is 75,000 kg. Create a fuelRequired function to combine the rocket and crew masses, then calculate and return the amount of fuel needed to reach LEO. Our launch requires a safety margin for the fuel level, especially if the crew members are cute and fuzzy. Add an extra 200 kg of fuel for each dog or cat on board, but only an extra 100 kg for the other species. Update fuelRequired to account for this, then round the final amount of fuel UP to the nearest integer. Print 'The mission has a launch mass of ____ kg and requires ____ kg of fuel.' Fill in the blanks with the calculated amounts. ",
    "description": "",
    "tags": null,
    "title": "Studio: Objects and Math",
    "uri": "/objects-and-math/studio/index.html"
  },
  {
    "content": "One of the most common uses of a for loop is to carry out a task once for each item in a collection. We have learned about two types of collections, strings and arrays. When using a loop with a collection in this way, we say that the loop iterates over the collection.\nIterating Over Strings The following example prints each of the characters of the string \"LaunchCode\" on a separate line.\nExample 1 2 3 4 5 let name = \"LaunchCode\"; for (let i = 0; i \u003c name.length; i++) { console.log(name[i]); } Console Output\nL a u n c h C o d e Since name.length is 10, the loop executes once each for the values of i from 0 to 9. The loop body, console.log(name[i]);, will print name[i] each time. In each case, name[i] is one of the characters of name.\nExample In your copy of javascript-projects, open up loops/chapter-examples. Inside you will find for-Loop-Practice-With-Strings.js. In this file, try writing a program that prints each character of your name on a different line.\n// create a string variable containing your name // write a for loop that prints each character in your name on a different line Iterating Over Arrays The following example prints each of the programming languages in the array languages on a separate line.\nExample 1 2 3 4 5 let languages = [\"JS\", \"Java\", \"C#\", \"Python\"]; for (let i = 0; i \u003c languages.length; i++) { console.log(languages[i]); } Console Output\nJS Java C# Python Similar to the string example, this loop executes 4 times because languages.length is 4. For each iteration, languages[i] is one of the items in the array and the given language is printed.\nExample Inside chapter-examples in the loops directory in javascript-projects, you will find for-Loop-Practice-With-Arrays.js. In this file, try writing a program that prints the name of each member of your family on a different line.\n1 2 3 // create an array variable containing the names // write a for loop that prints each name on a different line ",
    "description": "",
    "tags": null,
    "title": "Iterating Over Collections",
    "uri": "/loops/reading/iterating-over-collections/index.html"
  },
  {
    "content": "Now that we’ve launched our shuttle, let’s use loops (iteration) to automate some tasks.\nOpen loops/studio in javascript-projects. Before you dive in, you might notice that we have several files and folders inside. Your work will go into solution.js, but please feel free to explore the program and please don’t edit anything outside solution.js. To get started, run the command. npm install, in your terminal.\nPart A: Put dinner together First, inside solution.js, use the variables provided to store the following arrays.\nProtein options: ['chicken', 'pork', 'tofu', 'beef', 'fish', 'beans'] Grain options: ['rice', 'pasta', 'corn', 'potato', 'quinoa', 'crackers'] Vegetable options: ['peas', 'green beans', 'kale', 'edamame', 'broccoli', 'asparagus'] Beverage options: ['juice', 'milk', 'water', 'soy milk', 'soda', 'tea'] Dessert options ['apple', 'banana', 'more kale', 'ice cream', 'chocolate', 'kiwi'] Inside of mealAssembly(), write a for loop to assemble numMeals meals.\nThe meals must include one item from each category in the pantry array. Tip The computer needs to know how many crew members to prepare food for and what ingredients. Consider creating a nested loop that will create a meal for each crew member and then add it into a larger collection of meals.\nEach ingredient can only be used ONCE. Add each meal to the meals array once it is assembled. To test your own solution, scroll down to another function defined in this file called runProgram(). Uncomment the lines that call the mealAssembly function and print the result. Run the command node index to see how your work is progressing. Part B: Collect User Input Update askForNumber() to add user input and validation.\nUsing a while loop, ask the user to select the number of meals to assemble. Validate the input to make sure it is an integer from 1 - 6. Save the result to the numMeals variable returned by the function. Test your solution to this part by returning to the runProgram() function in the file and uncommenting the section labelled for testing Part B. Run node index to see the result. Checking Your Work If you want to make sure that you have checked all the boxes, run the following command in your terminal.\nnpm test This command runs the Jest tests that are checking your work for you. If you have a test that fails, check out the name of the test to get a hint as to what you are missing. If you need a refresher on how running the tests works, check out the article on testing your code.\nBonus Mission Working and living aboard this amazing space shuttle requires you to pay the utmost attention to cybersecurity. Once you are done working on the meal system, you are prompted to create a new password that will be used for the next 24 hours. Having run out of strong password ideas, your shuttle captain has encouraged you to make a password generator for yourself.\nWrite your code inside generatePassword().\nConstruct a for loop that combines the two strings together, alternating the characters from each source, and saves the combined string to the code variable.\nExample If string1 = \"1234\" and string2 = \"5678\", then the output will be “15263748”. If string1 = \"ABCDEF\" and string2 = \"notyet\", then the output will be “AnBoCtDyEeFt”. If string1 = \"LoOt\" and string2 = \"oku!\", then the output will be “LookOut!”. ",
    "description": "",
    "tags": null,
    "title": "Studio: Loops",
    "uri": "/loops/studio/index.html"
  },
  {
    "content": "Syntax and runtime errors always produce error messages. Reading and understanding error messages is a crucial first step in fixing these types of bugs.\nError messages are your friends. This idea can seem foreign to new programmers, because an error message is a signal that your program is broken. When we are working with a broken program, we might feel frustrated, like we do not fully understand the concepts at hand.\nHowever, the reality is that all programmers, no matter how experienced, regularly make simple mistakes. If you run your program and it produces an error message, your first reaction should be, “Great! My program has an error, but I have a helpful message to help me fix it.”\nLet’s consider a small program with a couple of syntax errors.\nExample let name = Julie; console.log(\"Hello, name); While you can spot one or more errors just by looking at the code, let’s examine the error messages produced.\nA Syntax Error Running the program at this stage results in the message:\n/Users/chris/dev/sandbox/js/syntax.js:2 console.log(\"Hello, name); ^^^^^^^^^^^^^^ SyntaxError: Invalid or unexpected token at new Script (vm.js:85:7) at createScript (vm.js:266:10) at Object.runInThisContext (vm.js:314:10) at Module._compile (internal/modules/cjs/loader.js:698:28) at Object.Module._extensions..js (internal/modules/cjs/loader.js:749:10) at Module.load (internal/modules/cjs/loader.js:630:32) at tryModuleLoad (internal/modules/cjs/loader.js:570:12) at Function.Module._load (internal/modules/cjs/loader.js:562:3) at Function.Module.runMain (internal/modules/cjs/loader.js:801:12) at internal/main/run_main_module.js:21:11 While there is a lot of text in this message, the first few lines tell us everything we need to know.\nThe first portion identifies where in our code the error exists:\nconsole.log(\"Hello, name); ^^^^^^^^^^^^^^ For many simple syntax errors, we will quickly be able to spot the mistake once JavaScript points out its location to us.\nIf knowing the location of the error isn’t enough, the next line provides more information:\nSyntaxError: Invalid or unexpected token This line identifies that actual issue that JavaScript found. It makes it clear that we are dealing with a SyntaxError, and it provides a message that describes the issue.\nIf you are scratching your head at the message, “Invalid or unexpected token,” don’t worry. Programming languages often report errors in ways that are not always easy to decipher at first glance. However, a second look at the line in question helps us make sense of this message.\nconsole.log(\"Hello, name); ^^^^^^^^^^^^^^ JavaScript is telling us that in the area of \"Hello, name); it encountered an invalid token. Token is a fancy word that means a symbol, variable, or other atomic element of a program. In this case, the invalid token is \"Hello, name);. JavaScript sees the double-quote character and expects a string. However, the string does not have a closing \", making it invalid.\nFixing this error gives us a program with correct syntax:\n1 2 let name = Julie; console.log(\"Hello\", name); Note Error messages may differ depending on where you run your code. The same program run in an online code editor, like Replit, and Node.js on your computer will generate slightly different error messages. However, these differences are minor and generally unimportant. The main cause of the error will be reported in the same way.\nSyntax Errors and Code Highlighting Most code editors provide a feature known as syntax highlighting. Such editors highlight different types of tokens in different ways. For example, strings may be red, while variables may be green. This useful feature gives you a quick, visual way to identify syntax errors.\nFor example, here is a screenshot of our flawed code taken within Visual Studio Code.\nNotice that the string Hello is colored red, while most of the symbols (=, ;, ., and () are colored black. At the end of line 2, however, the final ) and ; are both red rather than black. Since we haven’t closed the string, the editor assumes that these two symbols are part of the string. Since we expect ); to be black in this editor, the difference in color is a clue that something is wrong with our syntax.\nA Runtime Error Having fixed the syntax error, we can now run our program again. Doing so displays yet another error.\nHello /Users/chris/dev/sandbox/js/syntax.js:1 let name = Julie; ^ ReferenceError: Julie is not defined at Object.\u003canonymous\u003e (/Users/chris/dev/sandbox/js/syntax.js:1:74) at Module._compile (internal/modules/cjs/loader.js:738:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:749:10) at Module.load (internal/modules/cjs/loader.js:630:32) at tryModuleLoad (internal/modules/cjs/loader.js:570:12) at Function.Module._load (internal/modules/cjs/loader.js:562:3) at Function.Module.runMain (internal/modules/cjs/loader.js:801:12) at internal/main/run_main_module.js:21:11 We have a new error message, this time involving line 1 of our code. We didn’t see this error before because it is a runtime error. Due to the syntax error on line 2, the program stopped during the parsing phase. Even though the current error involves the line before the original syntax error, the syntax error still gets reported first.\nOnce again, we are told where the error occurs:\nlet name = Julie; ^ There appears to be an issue with the assignment statement. You might be able to see what it is, but let’s inspect the error message anyway. Doing so will help us understand JavaScript errors more generally.\nThe message is:\nReferenceError: Julie is not defined The type of error is ReferenceError. If we search the web for “JS ReferenceError” then one of the first results is the MDN documentation for ReferenceError . No need to read the entire document, however. The first sentence on this page tells us what we need to know:\nThe ReferenceError object represents an error when a variable that doesn’t exist (or hasn’t yet been initialized) in the current scope is referenced.\nThis information, along with the rest of the message, “Julie is not defined,” makes it clear what JavaScript is complaining about. The error message is saying, Hey, check your variables!\nTo us, we see that we forgot to enclose the string Julie in quotes, because we know that we intended to assign the variable name a string value. However, to JavaScript there is nothing in the program to indicate that Julie should be a string. In fact, JavaScript sees Julie as a variable. Since there is no such defined variable in our program, it returns a ReferenceError.\nThis is one of many examples when we, as humans, describe the same error slightly differently than JavaScript. Usually, neither description is better than the other. Humans and computers simply view information differently.\n",
    "description": "",
    "tags": null,
    "title": "Diagnosing Error Messages",
    "uri": "/errors-and-debugging/reading/diagnosing-error-messages/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nWrite console.log statements Understand what syntax, comments and debugging are when you are coding Key Terminology Here is a list of the key terms throughout this chapter based on the page they first appear on. You should make note of these.\nWhat is Code? code Syntax Rules syntax Comments comment Output with console.log console newline Fixing Errors in Your Code debugging Content Links Reading Welcome, Novice Coder ",
    "description": "",
    "tags": null,
    "title": "Chapter 3: How to Write Code",
    "uri": "/how-to-write-code/index.html"
  },
  {
    "content": "This textbook will often reference the javascript-projects Github repository as you are working your way through. This repository contains code for most, but not all code snippets, exercises, and studios throught the book. However, it does not contain any graded assignments.\nBefore moving on to the next section you will need to fork and clone the javascript-projects repository. You have already completed this same process during the Your First Program section of the previous chapter.\nFork Repository For a refresher on forking please revisit this section Fork the javascript-projects repository to your own personal Github account.\nClone Forked Repository Open your terminal and clone the forked repository to the desired location.\nNote Depending on how you set up your github account the url you are cloning will look slightly different. Regardless of which method you are using (HTTPS or SSH) you can find the correct link to copy if you click on the Code button within your repository:\nCloning with HTTPS: git clone https://github.com/\u003cyour-github-username\u003e/javascript-projects.git Cloning with SSH: git clone git@github.com:\u003cyour-github-username\u003e/javascript-projects.git Updates to javascript-projects Repository As mentioned in this section , there will be occasional updates to the javascript-projects repository. That means you will need to update your own forked copy periodically so that you are up to date! Please reference back to the above mentioned section anytime you need to do so.\nOnce you have completed the above steps you are ready to move on!\n",
    "description": "",
    "tags": null,
    "title": "JavaScript Projects Repository",
    "uri": "/how-to-write-code/reading/javascript-projects-repo/index.html"
  },
  {
    "content": "JavaScript is one of many programming languages, each of which serves different purposes. Programmers mainly use JavaScript for web development, and it is currently the most popular language that runs inside a web browser. Running inside the browser means that the code loads at the same time as a web page and can modify the content of that page. JavaScript can add or remove text, change colors, produce animations, and react to mouse and keyboard clicks. This makes the web page dynamic—it responds to user actions in real-time, and changes occur without having to refresh the page.\nThis cool feature allows immediate updates to your profile when you post a status, changes to the color of the “Submit” button after you complete a form, generation of a map when you request directions, or the creation of a sparkly trail that follows the mouse pointer. All of the changes to what you see on the web page are part of front-end development. They are present on your computer.\nBack-end development involves passing data between web pages and servers. JavaScript can be used for back-end development, but other languages like Java and C# are industry standards. When you fill out a form online and click “Submit”, the back-end code transfers the information you entered to the company that posted the form. Your information now exists on the company’s servers.\nThe ins and outs of how the internet works will be covered throughout this book. While important to understand why we are learning JavaScript, we won’t quiz you on servers and front-end development now!\nClient Machine vs. Web Server ",
    "description": "",
    "tags": null,
    "title": "The JavaScript Language",
    "uri": "/how-programs-work/reading/the-js-language/index.html"
  },
  {
    "content": "For Task 2, you’ll get comfortable with using CSS selectors and rules to dictate display, while keeping your styles separate from your content.\nGetting Started Open the file named styles.css in your html-me-something/ directory.\nGetting to Work Go ahead and start adding styles in your styles.css file!\nRequirements Your CSS must:\nUse margin and padding to space your elements in a visually pleasing manner.\nUse at least one of each of the following types of selectors:\nelement class id Follow these rules:\nUse the element selector to give the \u003cbody\u003e element a margin value of 8px and a display type of block. Give a heading on your page the id of mainHeading and use the id selector in styles.css to make the color red and apply any additional styling of your choosing. Give a paragraph on your page the id of testP and a class name of funParagraph. Use the class selector in styles.css and make the color green and give it any additional styling of your choosing. We ask that you implement the styling as requested. You will be asked to explain and point out your additional styling choices to your TA during your code review. Have fun with creating your assignment. If any of the styling requirements do not suit your personal tastes and you want to share your work on this assignment as part of a portfolio, you can change it after the end of the unit.\nNotes In order to see any visible change, make sure to link the stylesheet to your main document.\nFeel free to check out our styled example to see how we did things. Use “View Source” (by right-clicking anywhere on the page and selecting View Source).\nAnother thing you might find useful is your browser’s developer tools .\nAnd be sure to use the Resources section below as you go.\nResources General CSS Examples and References:¶ w3schools CSS Reference : Great site for syntax examples CSS Zen Garden : This site provides multiple examples of what you can do with CSS in a browser. (Advanced) Specifics on CSS Specificity (Advanced) Specificity (MDN) (Advanced) CSS Design Awards : Showcase for CSS designers to share their work. Tip Once you finish your adding your stylings, be sure to stage and commit your changes.\nNow that you have applied your stylings, you are ready to test your work and submit your final project. Move on over to Task 3 to work on these final steps.\n",
    "description": "",
    "tags": null,
    "title": "Task 2: Styling",
    "uri": "/assignments/html-me-something/part-2/index.html"
  },
  {
    "content": "Now that your small app is working, expand it to deal with multiple questions. This time, you only have one TODO item in the starter code. You will need to determine which lines need to be modified.\nDefine questions and correctAnswers variables as arrays. Use the table below to fill these arrays.\nReplace your code from TODO 1.2b with a loop that programmatically asks each question in the array and stores the user’s responses.\nReplace the basic feedback from TODO 1.2c with a template literal that displays each of the candidate’s responses in addition to the corresponding correct answers.\nQuestion Answer Who was the first American woman in space? “Sally Ride” True or false: 5 kilometer == 5000 meters? “true” (5 + 3)/2 * 10 = ? “40” Given the array [8, 'Orbit', 'Trajectory', 45], what entry is at index 2? “Trajectory” What is the minimum crew size for the ISS? “3” Warning Keep the questions and correct answers stored in this exact order.\nNote Make sure your loops work properly before moving on to task 3.\nRun the following command to make sure the app is running without errors:\nnode index.js This is also a great time to save, commit, and push up your work.\nTesting Task 2 In the terminal run npm test. This will run the autograding tests. The results will display in the terminal.\nTo pass Task 2, you need to pass tests 7-10.\nYou should still pass tests 1-6 from Task 1.\nMove on to Task 3 ",
    "description": "",
    "tags": null,
    "title": "Task 2: Multiple Questions",
    "uri": "/assignments/candidate-testing/task-2/index.html"
  },
  {
    "content": "As with strings, JavaScript provides us with useful methods for arrays. These methods will either alter an existing array, return information about the array, or create and return a new array.\nCommon Array Methods Here is a sample of the most frequently used array methods. More complete lists can be found here:\nW3 Schools Array Methods . MDN Web Docs . To see detailed examples for a particular method, control-click (or right-click) on its name to open the view in a new tab.\nMethods That Return Information About The Array Method Syntax Description .includes() arrayName.includes(item) Checks if an array contains the specified item. .indexOf() arrayName.indexOf(item) Returns the index of the first occurrence of an item in the array. If the item is not in the array, -1 is returned. Methods That Rearrange The Entries In The Array Method Syntax Description .reverse() arrayName.reverse() Reverses the order of elements in an array. .sort() arrayName.sort() Arranges elements of an array in increasing order (kinda). Methods That Add Or Remove Entries From An Array Method Syntax Description .pop() arrayName.pop() Removes and returns the LAST element in an array. .push() arrayName.push(item1, item2, ...) Adds one or more items to the END of an array and returns the new length. .shift() arrayName.shift() Removes and returns the FIRST element in an array. .splice() arrayName.splice(index, number, ...) Adds, removes, or replaces one or more elements anywhere in the array. .unshift() arrayName.unshift(item1, item2, ...) Adds one or more items to the START of an array and returns the new length Methods that Create New Arrays Method Syntax Description .concat() arr.concat(otherArray1, ...) Combines two or more arrays into a new array. .join() arr.join('connecter') Combines all elements of an array into a string. .slice() arr.slice(start index, end index) Copies selected entries of an array to a new array. .split() stringName.split('delimiter') Divides a string into smaller pieces stored in a new array. Check Your Understanding Follow the links in the table above for the sort, slice, split and join methods. Review the content and then answer the following questions.\nQuestion What is printed by the following code?\nlet charles = ['coder', 'Tech', 47, 23, 350]; charles.sort(); console.log(charles); [350, 23, 47, 'Tech', 'coder'] ['coder', 'Tech', 23, 47, 350] [23, 47, 350, 'coder', 'Tech'] [23, 350, 47, 'Tech', 'coder'] Question Which statement converts the string str = 'LaunchCode students rock!' into the array ['LaunchCode', 'students', 'rock!']?\nstr.join(\" \"); str.split(\" \"); str.join(\"\"); str.split(\"\"); Question What is printed by the following program?\nlet groceryBag = ['bananas', 'apples', 'edamame', 'chips', 'cucumbers', 'milk', 'cheese']; let selectedItems = []; selectedItems = groceryBag.slice(2, 5).sort(); console.log(selectedItems); ['chips', 'cucumbers', 'edamame'] ['chips', 'cucumbers', 'edamame', 'milk'] ['cheese', 'chips', 'cucumbers'] ['cheese', 'chips', 'cucumbers', 'edamame'] ",
    "description": "",
    "tags": null,
    "title": "Array Methods",
    "uri": "/arrays/reading/array-methods/index.html"
  },
  {
    "content": "While using the functions built into JavaScript is useful, the most powerful aspect of functions is the ability of programmers to create their own.\nThere are several ways to define functions in JavaScript. We will introduce one technique in this chapter and a second technique in the next.\nFunction Syntax To create a function, use the following syntax:\nfunction myFunction(parameter1, parameter2,..., parameterN) { // function body } Here, function is a keyword that instructs JavaScript to create a new function using the definition that follows. Since function is a keyword, it may not be used elsewhere, for example as the name of a variable.\nFollowing function is the function name, which is myFunction in the generic example above. The function name is determined by you, the programmer, and should therefore follow best practices. In particular, function names should use camel case and have descriptive names. We will have more to say about naming functions near the end of this chapter.\nFollowing the function name, we define parameters within the parentheses. Think of parameters as variables that can be used only within the function itself. The number and names of the parameters are determined by the programmer, based on what they want the function to do. A function may be defined with several parameters, or no parameters at all.\nNote Many programming languages require you to state which data type each parameter should be (for example, string or number). In such languages, if you try to call a function with a parameter of incorrect type, an error results.\nJavaScript does not allow you to specify the types of parameters, though the JavaScript extension TypeScript does. We will learn a bit of TypeScript later on.\nAfter the parameters and closing parenthesis, within curly brackets, { }, is the function body. This is where the actions that the function should carry out are defined. The function body can consist of any amount of code.\nAn Example Let’s see function syntax in action. We first consider a program that prints an array of names.\nlet names = [\"Lena\", \"James\", \"Julio\"]; for (let i = 0; i \u003c names.length; i++) { console.log(names[i]); } Following this pattern, we can create a function that prints any array of names.\nfunction printNames(names) { for (let i = 0; i \u003c names.length; i++) { console.log(names[i]); } } Breaking down the components of a function using our new terminology gives us:\nFunction name: printNames Parameter(s): names Body: for (let i = 0; i \u003c names.length; i++) { console.log(names[i]); } Notice that there is nothing about this function that forces names to actually contain names, or even strings. The function will work the same for any array it is given. Therefore, a better name for this function would be printArray.\nOur function can be used the same way as each of the built-in functions, such as console.log, by calling it. Remember that calling a function triggers its actions to be carried out.\nfunction printArray(names) { for (let i = 0; i \u003c names.length; i++) { console.log(names[i]); } } printArray([\"Lena\", \"James\", \"Julio\"]); console.log(\"---\"); printArray([\"orange\", \"apple\", \"pear\"]); Console Output\nLena James Julio --- orange apple pear This example illustrates how functions allow us to make our code abstract. Abstraction is the process of taking something specific and making it more general. In this example, a loop that prints the contents of a specific array variable (something specific) is transformed into a function that prints the contents of any array (something general).\nDefining and Calling When we define a function, we are making it available for later use. The function does not execute when it is defined; it must be called in order to execute. This is not only a common point of confusion for new programmers, but can also be the source of logic errors in programs.\nLet’s see how this works explicitly.\nTry it! What happens if we define a function without calling it?\nfunction sayHello() { console.log(\"Hello, World!\"); } Question What is printed when this program runs?\nIn order for a function to run, it must be explicitly called.\nExample function sayHello() { console.log(\"Hello, World!\"); } sayHello(); Console Output\nHello, World! ",
    "description": "",
    "tags": null,
    "title": "Creating Functions",
    "uri": "/functions/reading/creating-functions/index.html"
  },
  {
    "content": "Below are some examples of common CSS properties and what they do. It is by no means an exhaustive list of CSS properties, but it is a good place to start.\nGood CSS Properties to Know CSS Property Definition Default Value font-size Changes the size of the font. medium or 20px color Changes the text color. black font-family Changes the font types. Depends on the browser background-color Sets the color of the background of an element. transparent text-align Aligns the text within an element. left CSS Example Adding CSS to the HTML page about Space Plants is the logical next step in building a website about this cool discovery. The astronauts building the site used the body, h1, and p selectors to change some of the styling of those elements.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003ePlant-Loving Astronauts\u003c/title\u003e \u003cstyle\u003e body { background-color: cornflowerblue; } h1 { color: green; } p { font-size: 18px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eSpace Plants Are Cool\u003c/h1\u003e \u003cp\u003eNASA discovers that plants can live in \u003cb\u003eouter space\u003c/b\u003e. More innovations from this discovery to follow.\u003c/p\u003e \u003cimg src = \"space-flower.jpg\" alt = \"Flower floating in space.\"\u003e \u003c!-- This image was taken by NASA and is in the Public Domain --\u003e \u003c/body\u003e \u003c/html\u003e Check Your Understanding Question Find a CSS property and give its name, definition, and default value. Please do NOT use one of the ones above.\n",
    "description": "",
    "tags": null,
    "title": "CSS Rules",
    "uri": "/styling-css/reading/rules-css/index.html"
  },
  {
    "content": "Runtime errors occur as the program runs, and they are also called exceptions. Exceptions are caused by referencing undeclared variables and invalid or unexpected data.\nControl Flow The control flow of a program is the order in which the statements are executed. Normal control flow runs from top to bottom of a file. An exception breaks the normal flow and stops the program. A stopped program can no longer interact with the user. Luckily JavaScript provides a way to anticipate and handle exceptions.\nCatching an Exception JavaScript provides try and catch statements that allow us to keep our programs running even if there is an exception. We can tell JavaScript to try to run a block of code, and if an exception is thrown, to catch the exception and run a specific block of code. Anticipating and catching the exception makes the exception now part of the control flow.\nNote Catching an exception is also known as handling an exception.\nExample In this example there is an array of animals. The user is asked to enter the index for the animal they want to see. If the user enters an index that does NOT contain an animal, the code will throw a TypeError when name is referenced on an undefined value.\nThere is a try block around the code that will throw the TypeError. There is a catch block that catches the error and contains code to inform the user that they entered an invalid index.\n1 2 3 4 5 6 7 8 9 10 11 12 13 const input = require('readline-sync'); let animals = [{name: 'cat'}, {name: 'dog'}]; let index = Number(input.question(\"Enter index of animal:\")); try { console.log('animal at index:', animals[index].name); } catch(err) { console.log(\"We caught a TypeError, but our program continues to run!\"); console.log(\"You tried to access an animal at index:\", index); } console.log(\"the code goes on...\"); Console Output\nIf the user enters 9:\nEnter index of animal: 9 We caught a TypeError, but our program continues to run! You tried to access an animal at index: 9 the code goes on... If the user enters 0:\nEnter index of animal: 0 animal at index: cat the code goes on... On line 8 of the above code sample, a variable called err is passed to catch. err can be any type of error object in JavaScript. For the above example, that is a TypeError, but we could have had a ReferenceError or EvalError. If necessary, we could output different statements based on what kind of error err is.\nTip catch blocks only execute if an exception is thrown\nFinally JavaScript also provides a finally block which can be used with try and catch blocks. A finally block code runs after the try and catch. What is special about finally is that finally code block ALWAYS runs, even if an exception is NOT thrown.\nExample Let’s update the above example to print out the index the user entered. We want this message to be printed EVERY time the code runs. Notice the console.log statement on line 11.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 const input = require('readline-sync'); let animals = [{name: 'cat'}, {name: 'dog'}]; let index = Number(input.question(\"Enter index of animal:\")); try { console.log('animal at index:', animals[index].name); } catch(err) { console.log(\"We caught a TypeError, but our program continues to run!\"); } finally { console.log(\"You tried to access an animal at index:\", index); } console.log(\"the code goes on...\"); Console Output\nIf the user enters 7:\nEnter index of animal: 7 We caught a TypeError, but our program continues to run! You tried to access an animal at index: 7 the code goes on... If the user enters 1:\nEnter index of animal: 1 animal at index: dog You tried to access an animal at index: 1 the code goes on... Check Your Understanding Question What statement do we use if we want to attempt to run code, but think an exception might be thrown?\ncatch try throw finally Question How do you handle an exception that is thrown?\nWith code placed within the try block. With code placed within the catch block. With code placed within a throw statement. With code placed within the finally block. Question What statement do you use to ensure a code block is executed regardless if an exception was thrown?\nthrow catch try finally ",
    "description": "",
    "tags": null,
    "title": "Exceptions as Control Flow",
    "uri": "/exceptions/reading/exceptions-control-flow/index.html"
  },
  {
    "content": "Navigating the Terminal Window Moving from a GUI to a CLI can be difficult when we are so used to dragging our files from one folder to another. One of the difficulties is simply figuring out where we are in the filesystem! Here are some key indicators that the terminal gives us to show where we are:\nLaunchCode-Super-Computer:~ lcstaffmember$ This line is called the prompt. The prompt lets us know that the terminal is ready to accept commands. LaunchCode-Super-Computer is the name of the computer. The ~ tells us we are currently in the Home directory. The Home directory is the folder that contains everything in the computer. lcstaffmember is the username of the person who has logged onto the terminal. We will be typing all of our commands after the $.\nAs we navigate through our filesystem, the terminal will rarely output a line to let us know that the change has occurred. We have to keep our eye out on our prompt as we enter our commands. The name of the computer and the username will not change, however, the space where the ~ is, will. That indicates our current directory.\nBasic Commands There are many commands you can use in the terminal to move through the filesystem of your computer and projects.\nCommand Result ls Lists all files and folders in the current directory. cd \u003cnew-directory\u003e cd stands for change directory. Navigates from the current directory to new-directory. pwd Print working directory. Prints the path of the current directory. mkdir \u003cnew-folder\u003e Make directory. Creates new-folder inside the current directory. touch \u003cnew-file\u003e Creates a file called new-file in the current directory. rm \u003cold-file\u003e Removes old-file from the current directory. man \u003ccommand\u003e Manual. Prints to the screen the manual pages for the command. This includes the proper syntax and a description of how that command works. clear Empties the terminal window of previous commands and output. cp \u003csource-path\u003e \u003ctarget-path\u003e Copies the file or directory at source-path and puts it in the target-path. mv \u003csource-path\u003e \u003ctarget-path\u003e Moves the file or directory at source-path from its current location to target-path. Note rm will permanently remove items from the computer and cannot be undone. Git bash does not support man. Instead, \u003ccommand\u003e --help provides a scaled down alternative. Beyond these basic commands, there are some shortcuts if you don’t want to type out the full name of a directory or simply can’t remember it.\nShortcut Where it goes ~ The Home directory . The current directory .. The parent directory of the current directory For an in-depth tutorial of how to use a CLI to move through your daily life, refer to the terminal commands tutorial .\nCheck Your Understanding Question What line in a CLI indicates that the terminal is ready to accept commands?\nprompt command shell There isn’t a line that does that. Question Which shortcut takes you to the parent directory?\n. ~ .. ",
    "description": "",
    "tags": null,
    "title": "How to Do Stuff in the Terminal",
    "uri": "/terminal/reading/how-to-do-stuff/index.html"
  },
  {
    "content": "Recall that an operator is one or more characters that carries out an action on its operand(s). In Data and Variables we learned about three types of operators:\nArithmetic operators, such as +, -, *, /, and %. The string operator +. Compound assignment operators, such as += and -=. Arithmetic and string operators take number and string operands, respectively, returning values of the same type. Compound assignment operators work similarly with numbers or strings while also reassigning the value of the first, variable operand.\nBoolean Operators In addition to these operators, we learned about comparison operators like ===, \u003c, and others. These operators are part of a larger class known as boolean operators, so-called because they return a boolean value (true or false).\nThree additional boolean operators allow us to create more complex expressions. These are described below.\nLogical AND A compound boolean expression is a boolean expression built out of smaller boolean expressions. JavaScript allows us to create a compound boolean expression using the logical AND operator, \u0026\u0026.\nThe operator takes two operands, and the resulting expression is true if both operands are true individually. If either operand is false, the overall expression is false.\nExample In English, the \u0026\u0026 operator mirrors the use of the word “and” (hence the name “logical AND”). A sentence like “Roses are red and violets are blue,” is true as a whole precisely because roses are actually red, and violets are actually blue.\nOn the other hand, the sentence “Roses are red and violets are green,” is false as a whole. While roses are indeed red, violets are not green.\nLets see how this works in code.\nExample 1 2 3 console.log(7 \u003e 5 \u0026\u0026 5 \u003e 3); console.log(7 \u003e 5 \u0026\u0026 2 \u003e 3); console.log(2 \u003e 3 \u0026\u0026 'dog' === 'cat'); Console Output\ntrue false false In line 1, 7 \u003e 5 \u0026\u0026 5 \u003e 3 evaluates to true because both 7 \u003e 5 and 5 \u003e 3 are true individually.\nThe expression 7 \u003e 5 \u0026\u0026 2 \u003e 3 evaluates to false because one of the two expressions, 2 \u003e 3, is false.\nLike line 2, line 3 returns false because both sub-expressions are false. Notice that we can mix and match data types however we like, as long as both sides of the \u0026\u0026 expression are themselves boolean expressions.\nLogical OR JavaScript’s logical OR operator, ||, also creates compound boolean expressions. This operator takes two operands, and the resulting expression is true if either of the operands are true individually. If both operands are false, the overall expression is false.\nExample As with logical AND, logical OR mirrors our experience of English language truth values. The sentence “Pigs can fly or dogs can run,” is true as a whole. Joining the two clauses by “or” requires that only one of them is true in order for the full sentence to be true.\nWhen both of the clauses joined by “or” are false, the statement as a whole is false. For example, “Pigs can fly or dogs can speak Spanish,” is a false statement.\nLet’s look at some examples in JavaScript.\nconsole.log(7 \u003e 5 || 5 \u003e 3); console.log(7 \u003e 5 || 2 \u003e 3); console.log(2 \u003e 3 || 'dog' === 'cat'); Console Output\ntrue true false Warning The single symbols \u0026 and | are themselves valid JavaScript operators, so accidentally leaving off one symbols when typing \u0026\u0026 or || will not result in an error message.\nThe operators \u0026 and | are bitwise operators , which are beyond the scope of this course.\nMost programmers rarely use \u0026 and |, and it is not important for you to understand them at this point. However, you should never use them in place of \u0026\u0026 and ||.\nLogical NOT The logical NOT operator, !, takes only a single operand and reverses its boolean value.\nExample console.log(!true); console.log(!false); Console Output\nfalse true The operator ! (sometimes called a “bang”) has the same semantic role as the word “not” in English.\nExample console.log( !(5 \u003e 7) ); console.log( !('dog' === 'cat') ); Console Output\ntrue true Operator Precedence We now have a number of operators in our toolkit. It is important to understand how these operators relate to each other with respect to operator precedence. Operator precedence is the set of rules that dictate in which order the operators are applied.\nJavaScript will always apply the logical NOT operator, !, first. Next, it applies the arithmetic operators, followed by the comparison operators. The logical AND and OR are applied last.\nThis means that the expression x * 5 \u003e= 10 \u0026\u0026 y - 6 \u003c= 20 will be evaluated so as to first perform the arithmetic and then check the relationships. The \u0026\u0026 evaluation will be done last. The order of evaluation is the same as if we were to use parentheses to group, as follows:\n((x * 5) \u003e= 10) \u0026\u0026 ((y - 6) \u003c= 20) While parentheses are not always necessary due to default operator precedence, they make expressions much more readable. As a best practice, we encourage you to use them, especially for more complicated expressions.\nThe following table lists operators in order of precedence, from highest (applied first) to lowest (applied last). A complete table for the entire language can be found in the MDN JavaScript Documentation .\nPrecedence Category Operators (highest) Logical NOT ! Exponentiation ** Multiplication and division *, /, % Addition and subtraction +, - Comparison \u003c=, \u003e=, \u003e, \u003c Equality ===, !==, ==, != Logical AND \u0026\u0026 (lowest) Logical OR ` Truth Tables Truth tables help us understand how logical operators work by calculating all of the possible return values of a boolean expression. Let’s look at the truth table for \u0026\u0026, which assumes we have two boolean expressions, A and B, joined by \u0026\u0026.\nExample Truth Table for \u0026\u0026:\nA B A \u0026\u0026 B true true true true false false false true false false false false Consider the first row of the truth table. This row states that if A is true and B is true, then A \u0026\u0026 B is true. This is a fact, regardless of what boolean expressions A and B might actually be. The two middle rows demonstrate that if either A or B is false, then A \u0026\u0026 B is false. (If this idea is hard to grasp, try substituting actual expressions for A and B.)\nCheck Your Understanding Question Complete the table below.\nTruth Table for ||:\nA B A OR B true true true false false true false false Question Which of the following properly expresses the order of operations (using parentheses) in the following expression?\n5*3 \u003e 10 \u0026\u0026 4 + 6 === 11 ((5*3) \u003e 10) \u0026\u0026 ((4+6) === 11) (5*(3 \u003e 10)) \u0026\u0026 (4 + (6 === 11)) ((((5*3) \u003e 10) \u0026\u0026 4)+6) === 11 ((5*3) \u003e (10 \u0026\u0026 (4+6))) === 11 Question What is returned by the following boolean expression?\n4 \u003c 3 || 2 \u003c 3 true false \"true\" \"false\" ",
    "description": "",
    "tags": null,
    "title": "Logical Operators",
    "uri": "/decisions-with-conditionals/reading/logical-operators/index.html"
  },
  {
    "content": "The following sections are a summary of some DOM classes, methods, and properties. A more complete list can be found in the reference links below. You do NOT need to memorize everything on these reference pages. We are providing them to you as a guide for your future studies of the DOM.\nW3Schools DOM reference . MDN DOM reference . Window The global variable window is an instance of the Window class. The Window class represents the browser window. In the case of multi-tabbed browsers, the global window variable represents the specific tab in which the JavaScript code is running.\nMethod or Property Syntax Description alert window.alert(\"String message\") Displays a dialog box with a message and an “ok” button to close the box. confirm window.confirm(\"String message\") Displays a dialog box with a message and returns true if the user clicks “ok” and false if the user clicks “cancel”. location window.location Object that represents and alters the web address of the window or tab. console window.console Represents the debugging console. Most common and basic use is window.console.log(). Note When using JavaScript in the browser environment, methods and properties defined on the Window class are exposed as global functions and variables. An example of this is window.console.log() is accessible by referencing console.log() directly.\nDocument The global document variable is an instance of the Document class. The Document class represents the HTML web page that is read and displayed by the browser. The Document class provides properties and methods to find, add, remove, and alter HTML elements inside on the web page.\nMethod or Property Syntax Description title document.title Read or set the title of the document. getElementById document.getElementById(\"example-id\") Returns a reference to the element whose id attribute matches the given string value. querySelector document.querySelector(\"css selector\") Returns the first element that matches the given CSS selector. querySelectorAll document.querySelectorAll(\"css selector\") Returns a list of elements that match the given CSS selector. Note querySelector and querySelectorAll use the CSS selector pattern to find matching elements. The pattern passed in must be a valid CSS selector. Elements will be found and returned the same way that elements are selected to have CSS rules applied.\nElement HTML documents are made up of a tree of elements. The Element class represents an HTML element.\nMethod or Property Syntax Description getAttribute element.getAttribute(\"id\") Returns the value of the attribute. setAttribute element.setAttribute(\"id\", \"string-value\") Sets the attribute to the given value. style element.style.color Object that allows reading and setting INLINE CSS properties. innerHTML element.innerHTML Reads or sets the HTML inside an element. Check Your Understanding Question What value will response have if the user clicks Cancel?\nlet response = window.confirm(\"String message\"); Question Which of these are TRUE about selecting DOM elements?\nYou can select elements by CSS class name You can select elements by id attribute value You can select elements by tag name All of the above ",
    "description": "",
    "tags": null,
    "title": "More DOM Methods and Properties",
    "uri": "/dom-and-events/reading/more-dom-methods/index.html"
  },
  {
    "content": "NPM, Node Package Manager, is a tool for finding and installing Node modules. NPM has two major parts:\nA registry of modules. Command line tools to install modules. NPM Registry The NPM registry is a listing of thousands of modules that are stored on a remote server. These can be required and downloaded to your project. The modules have been contributed by other developers just like you.\nThere is an online version of the registry where you can search for a module by name or desired functionality.\nExample Go to online NPM registry and enter “readline-sync” into the search packages input box.\nAn exact match appears as the first result. That is the readline-sync module we required. Clicking on the first result leads to the NPM page that describes the readline-sync module.\nOn the details page you will see:\nUsage statistics (how often the module is used) Instructions on how to use the module (example code) Version information The author(s) Sourcecode repository NPM Command Line Interface (CLI) The NPM command line tool, CLI, is installed with Node. The NPM CLI is used in a computer’s terminal to install modules into a Node project.\nFor now, recall that we coded many Node projects inside of Visual Studio Code.\nExample Even though we added the readline-sync dependency to existing package.json files, our code still required additional configuration because input (or whatever you may decide to name your variable) is not defined automatically. The final step of requiring readline-sync is to assign it to a variable in addition to the require command. You may have noticed the following line or something very similar in previous chapters within your starter code for exercises, studios, or assignments.\nconst input = require(\"readline-sync\"); Example Use Case const input = require(\"readline-sync\"); const name = input.question(\"What is your name?\"); console.log(`hello ${name}`); Once dependencies are installed into a project there may need to be additional configuration done on the user’s behalf within their project.\n",
    "description": "",
    "tags": null,
    "title": "NPM",
    "uri": "/modules/reading/npm/index.html"
  },
  {
    "content": "Functions are objects, and therefore can be passed around just like other values. This means a function can be passed to another function as an argument. This allows the function being called to use the function argument to carry out its action. This turns out to be extremely useful.\nExamples best illustrate this technique, so let’s look at a couple now.\nExample: setTimeout The built-in function setTimeout allows a programmer to pass a function, specifying that it should be called at a later point in time. Its basic syntax is:\nsetTimeout(func, delayInMilliseconds); Example Suppose we want to log a message with a 5 second delay. Since five seconds is 5000 milliseconds (1 second = 1000 milliseconds), we can do so like this:\nfunction printMessage() { console.log(\"The future is now!\"); } setTimeout(printMessage, 5000); Console Output\n\"The future is now!\" Try It! Is the call to printMessage actually delayed? Don’t just take our word for it, try this yourself. Play with our example to change the delay.\nThe function printMessage is passed to setTimeout the same as any other argument.\nA common twist often used by JavaScript programmers is to use an anonymous function as an argument.\nExample This program has the same behavior as the one above. Instead of creating a named function and passing it to setTimeout, it creates an anonymous function within setTimeout’s argument list.\nsetTimeout(function () { console.log(\"The future is now!\"); }, 5000); Examples like this look odd at first. However, they become easier to read over time. Additionally, code that passes anonymous functions is ubiquitous in JavaScript.\nExample: The Array Method map The array method map allows for every element in an array to be mapped or translated, using a given function. Here’s how to use it:\nlet mappedArray = someArray.map(functionName); When the map method executes, the following actions occur:\nThe first element in someArray is passed into functionName as an argument. functionName executes and returns a new value. The return value is added to mappedArray. Steps 1 - 3 repeat for each element in someArray. When complete, mappedArray, contains each of the individual return values from the mapping function, functionName.\nExample let nums = [3.14, 42, 4811]; let timesTwo = function (n) { return n*2; }; let doubled = nums.map(timesTwo); console.log(nums); console.log(doubled); Console Output\n[3.14, 42, 4811] [ 6.28, 84, 9622 ] Notice that map does not alter the original array.\nWhen using map, many programmers will define the mapping function anonymously in the same statement as the method call map.\nExample This program has the same output as the one immediately above. The mapping function is defined anonymously within the call to map.\nlet nums = [3.14, 42, 4811]; let doubled = nums.map(function (n) { return n*2; }); console.log(doubled); Console Output\n[ 6.28, 84, 9622 ] Check Your Understanding Question Similar to the map example above, finish the program below to halve each number in an array.\nlet nums = [3.14, 42, 4811]; // TODO: Write a mapping function // and pass it to .map() let halved = nums.map(); console.log(halved); Question Use the map method to map an array of strings. For each name in the array, map it to the first initial.\nlet names = [\"Chris\", \"Jim\", \"Sally\", \"Blake\", \"Paul\", \"John\", \"Courtney\", \"Carly\"]; // TODO: Write a mapping function // and pass it to .map() let firstInitials = names.map(); console.log(firstInitials); ",
    "description": "",
    "tags": null,
    "title": "Passing Functions as Arguments",
    "uri": "/more-on-functions/reading/pass-function-as-arguments/index.html"
  },
  {
    "content": "Form Submission Using POST Instead of using GET and query parameters to submit form data, we can use POST. To submit a form using a POST request, set the form’s method attribute to \"POST\". Form data submitted via POST will be submitted in the body of the HTTP request. Data submitted by GET requests is less secure than POST because GET request URLs and the query parameters are cached and logged, possibly leaking sensitive data.\nExample Form with method=\"POST\"\n\u003cform action=\"\" method=\"POST\"\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"\u003e\u003c/label\u003e \u003clabel\u003eTeam Name \u003cinput type=\"text\" name=\"team\"\u003e\u003c/label\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e Send Form Submission to a Server The action and method attributes allows us to choose where the form request will be sent and what type of request will be sent. How do we configure what happens in response to a form submission?\nForm handlers are web server actions that receive, inspect, and process requests. They then send a response to the client. For this unit we are going to use form handlers that have already been created for us.\nExample When submitted, this form will send a POST request to the form handler defined by the action attribute.\n\u003cform action=\"https://handlers.education.launchcode.org/request-parrot\" method=\"POST\"\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"\u003e\u003c/label\u003e \u003clabel\u003eTeam Name \u003cinput type=\"text\" name=\"team\"\u003e\u003c/label\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e Try It! Open the javascript-projects/user-input-with-forms/chapter-examples/form-post.html file in a browser. Open the network tab of the developer tools Enter data into the inputs Type tracking into Username input Type Requests into Team Name input Click Submit button Firefox browser with request handler loaded and network tab showing requests\nInspect the data sent in the POST request Warning Using POST for form submissions adds a very low level of security. Using HTTPS instead of HTTP adds a higher level of security. Configuring HTTPS is beyond the scope of this class.\nCheck Your Understanding Question What attribute on \u003cform\u003e determines if the form is submitted with GET or POST?\nQuestion What attribute on \u003cform\u003e determines where the request is sent?\n",
    "description": "",
    "tags": null,
    "title": "POST Form Submission",
    "uri": "/user-input-with-forms/reading/post-form-submission/index.html"
  },
  {
    "content": "Beyond bracket notation, there are many other tools we can use to work with strings. Talking about these tools requires some new terminology.\nObject Terminology In JavaScript, strings are objects, so to understand how we can use them in our programs, we must first understand some basics about objects.\nAn object is a collection of related data and operations. An operation that can be carried out on an object is known as a method. A piece of data associated with an object is known as a property.\nExample Suppose we had a square object in JavaScript. (While no such object is built into JavaScript, we will learn how we could make one in a later chapter.)\nSince a square has four sides of the same length, it should have a property to represent this length. This property could be called length. For a given square, it will have a specific value, such as 4.\nSince a square has an area, it should have a method to calculate the area. This method could be called area, and it should calculate the area of a square using its length property.\nYou can think of methods and properties as functions and variables, respectively, that “belong to” an object. Properties and methods are accessed using dot notation, which dictates that we use the object name, followed by a ., followed by the property or method name. When using a method, we must also use parentheses as we do when calling regular functions.\nExample Returning to the square example, we can access its length by typing square.length.\nWe can calculate the area by calling square.area().\nReferencing length or area by itself in code does not give you the value of square.length or carry out the calculation in square.area(). It does not make sense to refer to a property or method without also referring to the associated object. Typing simply length or area() is ambiguous. There might be multiple squares, and it would be unclear which one you were asking about.\nExample We have already encountered one object, the built-in object console, which we use to output messages.\nconsole.log(typeof console); Console Output\nobject JavaScript reports that the type of console is indeed object.\nWhen calling console.log, we are calling the log method of the console object.\nWe will learn quite a bit more about objects in this course, including how to use objects to create your own custom data types. This powerful JavaScript feature allows us to bundle up data and functionality in useful, modular ways.\nStrings Are Objects The fact that strings are objects means that they have associated data and operations, or properties and methods as we will call them from now on.\nEvery string that we work with will have the same properties and methods. The most useful string property is named length, and it tells us how many characters are in a string.\nExample 1 2 3 4 5 let firstName = \"Grace\"; let lastName = \"Hopper\"; console.log(firstName, \"has\", firstName.length, \"characters\"); console.log(lastName, \"has\", lastName.length, \"characters\"); Console Output\nGrace has 5 characters Hopper has 6 characters Every string has a length property, which is an integer.\nThe length property is the only string property that we will use, but there are many useful string methods. We will explore these in depth in the section :ref:string-methods, but let’s look at one now to give you an idea of what’s ahead.\nThe toLowerCase() string method returns the value of its string in all lowercase letters. Since it is a method, we must precede it with a specific string in order to use it.\nExample let nonprofit = \"LaunchCode\"; console.log(nonprofit.toLowerCase()); console.log(nonprofit); Console Output\nlaunchcode LaunchCode Notice that toLowerCase() does not alter the string itself, but instead returns the result of converting the string to all lowercase characters. In fact, it is not possible to alter the characters within a string, as we will now see.\nCheck Your Understanding Question Given word = 'Rutabaga', why does word.length return the integer 8, but word[8] is undefined?\nQuestion What is the length of location?\ncityName = \"Vienna\"; stateName = \"Virginia\"; location = cityName + \", \" + stateName; console.log(location.length); 16 17 15 14 ",
    "description": "",
    "tags": null,
    "title": "Strings as Objects",
    "uri": "/stringing-characters-together/reading/string-objects/index.html"
  },
  {
    "content": "At this point in your learning journey, it’s normal to have doubts about your progress. This class can be challenging. In this studio, we’re spending time as a group to discuss our experiences, as well as build our confidence in our coding abilities.\nDoubting progress is normal and common. Supreme court justice Sonia Sotomayor, Serena Williams, Tom Hanks, and multiple CEOs have all questioned their success.\nThe struggle is real, and an open conversation often helps.\nYou CAN First, a little perspective. Identify which of the following tasks you have already done or know that you can accomplish:\nUse code to print “Hello, World” to the screen. Define, initialize, change, and use variables. Convert the string '1234' into a number. Construct a for loop to repeat a task 100 times. Construct if/else if/else statements to decide which of three tasks to perform. Build, modify, and access an array. Design and call a function. Call one function from within another function. Find and fix bugs in a segment of non-working code. How many of the 9 items listed above did you indicate? There is no ‘passing’ score for this. Whether you checked all 9 or only 1 or 2, simply saying, I can do that, means you have more coding skill than the bulk of the world’s population.\nOn your own, spend two minutes gathering your own thoughts and writing down a skill area not related to coding that you have some experience in? Share this with the studio group.\nSome examples from your home life:\nAre you an avid home cook? Do you know more about how your car runs than your family? Are you so good at needlepoint that your friends are asking you to start an Etsy site? Or examples from your work life:\nAre your presentations so beautiful that your CEO weeps? Is your calendar so organized that your coworkers blush when they see it? Can you turn any grumpy customer’s frown upside down? Doubt and uncertainty are normal, especially when exploring a new career. However, with the skills you already know, you can legitimately say, I am a coder. Combined with the skills you will learn during the rest of the course, there can be no doubt. You ARE NOT pretending.\nDiscussion Take a few moments in the studio to consider, share, and discuss the following with your group and your TA(s):\nSince joining the course, have you ever felt unsure about your future in the tech workforce? Have you ever responded to a compliment by diminishing the work that earned you the praise? If so, why did you answer in that way? Have you ever compared yourself to the students around you? Do you think that this was an objective comparison? What are you most proud of from your time working with this course? What are your strengths? What gives you confidence? How can you use your effort and strengths to boost your confidence? Helpful Tips Here are some tips that we recommend to help boost your confidence:\nAcknowledge the thoughts, especially when you enter a new point in your life. Recognize that your feelings are normal. Put it into perspective. You have been in this course for a short period of time. It is OK if you do not understand everything on Stack Overflow or recognize all the details about the latest technology. Review your accomplishments. Think about your life prior to programming when string, object and function all meant something much simpler. Your learning has been real! Share with a trusted friend, teacher or mentor. Other people with more experience can provide reassurance, and they probably felt similar doubts when they started. Accept compliments. Luck will not earn you your tech job. There will be LOTS of candidates, and you will shine enough to set you apart. When someone compliments your effort or the quality of your work, graciously accept! Voice your worth. Many people use daily exercises to affirm their abilities. Here is an example. . Teach. This is a great way to reinforce your learning, and it helps you recognize how much you know. Remember the power of ‘Yet’. You are not the master of all skills, of course, but you do know how to learn. With more practice, you will fill in any gaps in your knowledge. Other Resources 5 Steps To Shake The Feeling That You are An Impostor . Stop Telling Women They Have Imposter Syndrome . ",
    "description": "",
    "tags": null,
    "title": "Studio: Boosting Confidence",
    "uri": "/modules/studio/index.html"
  },
  {
    "content": "Your task is to build a website that shows astronauts fetched from an API.\nGet Started Take a look at the starter code for the following studio located here: javascript-projects/fetch/studio Requirements Add code that runs on the window load event.\nThis is done because we can’t interact with the HTML elements until the page has loaded. Make a GET request using fetch to the astronauts API \u003chttps://handlers.education.launchcode.org/static/astronauts.json\u003e__\nDo this part inside the load event handler. Add each astronaut returned to the web page.\nUse the HTML template shown below. Be sure to use the exact HTML including the CSS classes. (starter code contains CSS definitions) Example JSON Notice that it’s an array of objects, due to the outer [ and ]. That means you will have to use a loop to access each object inside the JSON array.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 [ { \"id\": 1, \"active\": false, \"firstName\": \"Mae\", \"lastName\": \"Jemison\", \"skills\": [ \"Physician\", \"Chemical Engineer\" ], \"hoursInSpace\": 190, \"picture\": \"mae-jemison.jpg\" }, { \"id\": 2, \"active\": false, \"firstName\": \"Frederick\", \"lastName\": \"Gregory\", \"skills\": [ \"Information Systems\", \"Shuttle Pilot\", \"Fighter Pilot\", \"Helicopter Pilot\", \"Colonel USAF\" ], \"hoursInSpace\": 455, \"picture\": \"frederick-gregory.jpg\" }, { \"id\": 3, \"active\": false, \"firstName\": \"Ellen\", \"lastName\": \"Ochoa\", \"skills\": [ \"Physics\", \"Electrical Engineer\" ], \"hoursInSpace\": 979, \"picture\": \"ellen-ochoa.jpg\" }, { \"id\": 4, \"active\": false, \"firstName\": \"Guion\", \"lastName\": \"Bluford\", \"skills\": [ \"Aerospace Engineer\", \"Philosophy\", \"Physics\", \"Colonel USAF\", \"Fighter Pilot\" ], \"hoursInSpace\": 686, \"picture\": \"guion-bluford.jpg\" }, { \"id\": 5, \"active\": false, \"firstName\": \"Sally\", \"lastName\": \"Ride\", \"skills\": [ \"Physicist\", \"Astrophysics\" ], \"hoursInSpace\": 343, \"picture\": \"sally-ride.jpg\" }, { \"id\": 6, \"active\": true, \"firstName\": \"Kjell\", \"lastName\": \"Lindgren\", \"skills\": [ \"Physician\", \"Surgeon\", \"Emergency Medicine\" ], \"hoursInSpace\": 15, \"picture\": \"kjell-lindgren.jpg\" }, { \"id\": 7, \"active\": true, \"firstName\": \"Jeanette\", \"lastName\": \"Epps\", \"skills\": [ \"Physicist\", \"Philosophy\", \"Aerospace Engineer\" ], \"hoursInSpace\": 0, \"picture\": \"jeanette-epps.jpg\" } ] HTML Template Create HTML in this exact format for each astronaut, but include data about that specific astronaut. For example the HTML below is what should be created for astronaut Mae Jemison. All HTML created should be added to the \u003cdiv id=\"container\"\u003e tag.\nDo NOT copy and paste this into your HTML file. Use this as a template to build HTML dynamically for each astronaut returned from the API.\n\u003cdiv class=\"astronaut\"\u003e \u003cdiv class=\"bio\"\u003e \u003ch3\u003eMae Jemison\u003c/h3\u003e \u003cul\u003e \u003cli\u003eHours in space: 190\u003c/li\u003e \u003cli\u003eActive: false\u003c/li\u003e \u003cli\u003eSkills: Physician, Chemical Engineer\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003cimg class=\"avatar\" src=\"images/mae-jemison.jpg\"\u003e \u003c/div\u003e Expected Results After your code loads the data and builds the HTML, the web page should look like:\nBonus Missions Display the astronauts sorted from most to least time in space. Make the “Active: true” text green, for astronauts that are still active (active is true). Add a count of astronauts to the page. ",
    "description": "",
    "tags": null,
    "title": "Studio: Fetch \u0026 JSON",
    "uri": "/fetch/studio/index.html"
  },
  {
    "content": "The reverse method flips the order of the elements within an array. However, reverse does not affect the digits or characters within those elements.\nNote The following studio can be found within the javascript-projects/functions/studio directory.\nExample let arr = ['hello', 'world', 123, 'orange']; arr.reverse() console.log(arr); Console Output\n['orange', 123, 'world', 'hello'] What if we wanted the reversed array to be ['egnaro', 321, 'dlrow', 'olleh']?\nLet’s have some fun by creating a process that reverses BOTH the order of the entries in an array AND the order of characters within the individual elements.\nRemember that a function should perform only one task. To follow this best practice, we will solve the array reversal by defining two functions - one that reverses the characters in a string (or the digits in a number) and one that flips the order of entries in the array.\nPart One: Reverse Characters In the composing functions section, we examined a function that reverses characters in a string using the split and join methods. Let’s rebuild that function now.\nDefine the function as reverseCharacters. Give it one parameter, which will be the string to reverse. Within the function, split the string into an array, then reverse the array. Use join to create the reversed string and return that string from the function. Below the function, define and initialize a variable to hold a string. Use console.log(reverseCharacters(myVariableName)); to call the function and verify that it correctly reverses the characters in the string. Optional: Use method chaining to reduce the lines of code within the function. Tip Use these sample strings for testing:\n'apple' 'LC101' 'Capitalized Letters' 'I love the smell of code in the morning.' Part Two: Reverse Digits The reverseCharacters function works great on strings, but what if the argument passed to the function is a number? Using console.log(reverseCharacters(1234)); results in an error, since split only works on strings (TRY IT). When passed a number, we want the function to return a number with all the digits reversed (e.g. 1234 converts to 4321 and NOT the string \"4321\").\nAdd an if statement to reverseCharacters to check the typeof the parameter. If typeof is ‘string’, return the reversed string as before. If typeof is ’number’, convert the parameter to a string, reverse the characters, then convert it back into a number. Return the reversed number. Be sure to print the result returned by the function to verify that your code works for both strings and numbers. Do this before moving on to the next exercise. Tip Use these samples for testing:\n1234 'LC101' 8675309 'radar' Part Three: Complete Reversal Now we are ready to finish our complete reversal process. Create a new function with one parameter, which is the array we want to change. The function should:\nDefine and initialize an empty array. Loop through the old array. For each element in the old array, call reverseCharacters to flip the characters or digits. Add the reversed string (or number) to the array defined in part ‘a’. Return the final, reversed array. Be sure to print the results from each test case in order to verify your code. Tip Use this sample data for testing.\nInput Output ['apple', 'potato', 'Capitalized Words'] ['sdroW dezilatipaC', 'otatop', 'elppa'] [123, 8897, 42, 1138, 8675309] [9035768, 8311, 24, 7988, 321] ['hello', 'world', 123, 'orange'] ['egnaro', 321, 'dlrow', 'olleh'] Bonus Missions Define a function with one parameter, which will be a string. The function must do the following:\nHave a clear, descriptive name like funPhrase. Retrieve only the last character from strings with lengths of 3 or less. Retrieve only the first 3 characters from strings with lengths larger than 3. Use a template literal to return the phrase We put the '___' in '___'. Fill the first blank with the modified string, and fill the second blank with the original string. Test your function: Outside of the function, define the variable str and initialize it with a string (e.g. 'Functions rock!'). Call your function and print the returned phrase. The area of a rectangle is equal to its length x width. Define a function with the required parameters to calculate the area of a rectangle. The function should return the area, NOT print it. Call your area function by passing in two arguments - the length and width. If only one argument is passed to the function, then the shape is a square. Modify your code to deal with this case. Use a template literal to print, “The area is ____ cm^2.” Tip Use these test cases.\nlength = 2, width = 4 (area = 8) length = 14, width = 7 (area = 98) length = 20 (area = 400) ",
    "description": "",
    "tags": null,
    "title": "Studio: Functions",
    "uri": "/functions/studio/index.html"
  },
  {
    "content": "During this studio, we will ask you to think about your mindset when it comes to facing challenges. Do challenges deter you or delight you? If challenges are something you delight in, you might have a growth mindset.\nA growth mindset can be powered by one word, “yet”. The word “yet” allows us to acknowledge that we don’t know something AND that we are capable of learning it. With “yet”, the sentence “I don’t understand booleans” becomes “I don’t understand booleans yet.”\nGrowth must occur over an entire career. As technology evolves, even the most senior developers have to learn new skills. Creating a framework for learning, which includes setting achievable goals, is important for being a developer. Technology will change and adapt, and we should learn to do the same!\nWhen setting goals, those goals should be SMART. SMART stands for:\nSpecific Measurable Attainable Relevant Time Bound We will be discussing your goals for this class and your career. While you don’t have to do any prior goal setting or preparation to make the most of this activity, please take the time to write down some goals before class if it would make you more comfortable.\nNote: If you have a place where you like to write down your goals and inspiration, such as a journal, feel free to bring it to class!\nActivity After your TA reviews the relevant topics, we will have a discussion covering the following:\nYour goals for taking this class.\nYou probably have many reasons why this class is something you want to complete. Please share 1 to 2 of your goals and keep them SMART! Your goals for your career.\nHow does this class assist you in your career and where do you want to go? Please share 1 to 2 goals for your career. Your inspirational statements.\nThis can be anything that motivates you from stories to quotes to ideas. Please share 1 to 2. After the studio, make sure to write your goals and inspirational statements somewhere where you will regularly see them!\nResources Best Practices: Learning to Code The Power of Believing that You can Improve What Having a Growth Mindset Actually Means Golden Rules of Goal Setting ",
    "description": "",
    "tags": null,
    "title": "Studio: Goal Setting and Getting into the Right Mindset",
    "uri": "/data-and-variables/studio/index.html"
  },
  {
    "content": "Introduction This chapter taught you that forms submit data in HTTP requests. This studio uses form and HTTP concepts to build a search engine selector, that is, a search form that allows a user to choose which search engine they would like to use. It will look like this:\nMost search engines work the same way. The have a single text input, and they submit data using a GET request. Additionally, many of the most popular search engines also use the same name for the search parameter, q.\nTry It! Use 2-3 different search engines to search for the same term. On the results page, look at the URL. Did the search happen via GET or POST? If a GET request was made, what is the name of the parameter containing your search term?\nNote: You may have to copy/paste the URL into a text editor to find the search parameter. Some engines add other parameters to the URL, causing it to extend past the end of the browser’s address bar.\nNote We remarked previously that most forms use POST because they cause data to be changed on the server. A web search only retrieves data. It does not change data. Therefore it’s safe to use a GET request for searches.\nThe fact that most search engines use the name q for their search boxes will allow us to easily create a form that is capable of sending a search request to several search engines.\nThe form will send a request with query parameter q to the selected engine. Since this request looks essentially the same as requests coming from the search engine’s own form (for example, at google.com ) it will give us back the results the same as if we had searched via those sites.\nGetting Started Open the javascript-projects/user-input-with-forms/studio directory to get started. Create Form Inputs Let’s build out the form in index.html. We will need some data for the search engines we want to work with.\nSearch Engine Options Label Value Search URL Google google https://www.google.com/search DuckDuckGo duckDuckGo https://duckduckgo.com/ Bing bing https://www.bing.com/search Ask ask https://www.ask.com/web Create a text input within the form and set its name attribute to the value \"q\". Create a radio group with one radio button for each search engine. Recall that radio buttons with the same name are grouped, so use the same value for this attribute, \"engine\", on each radio button. Create a label element for each radio button. Finally, add a submit button to the form and set it’s value to \"Go!\". Question How is the value attribute of a submit button used?\nSubmit Event Handler Pop quiz:\nQuestion What happens if you try to submit the form at this point? Why?\nQuestion Which HTTP method will be used when submitting the form?\nWe now have a form with inputs that has nowhere to send its data. The action attribute determines where a form submits data, but we can’t set the action attribute on the form in our HTML. Our form needs to submit data to a different site based on the selected search engine.\nTo make this happen, we need to set the value of the form’s action after the user hits the submit button, but before the form request is sent. Forms trigger a submit event at precisely this moment. Therefore, we can create an event handler to solve this problem. Our handler will:\nRetrieve the selected value from the radio group. Use this value to determine the action URL, based on the selected search engine. Set the action attribute of the form. Create and Register the Handler Within the \u003cscript\u003e element near the top of the file, create a function named setSearchEngine. We will code this function later, so for now just add a console.log statement so we can see when it runs.\nNear the bottom of the \u003cscript\u003e element is the stub:\nwindow.addEventListener('load', function(){ // TODO: register the handler }); Replace the TODO with code to add setSearchEngine as a handler to the form’s submit event. You will first need to get the form element using one of the DOM methods.\nNote The event handler can be added only after the form has been built, so we do so by adding a load event handler to the window. This ensures that the event is registered after the page has loaded.\nBefore moving on, make sure the code you just wrote works. Submit the form and look for a message in the console to verify that setSearchEngine ran.\nSet the action Our event handler now runs when the form is submitted, but it doesn’t do anything. We would like it to set the action on the form based on the user’s choice of search engine.\nAdd code to setSearchEngine to get the selected radio button element, using document.querySelector. The selector you’ll need is a little complicated, so we’ll give it to you here:\ninput[name=engine]:checked This compound CSS selector combines an attribute selector with a pseudo selector. The attribute selector input[name=engine] matches all input elements with the attribute name equal to \"engine\". The pseudo selector :checked specifies that we only want the selected element from that group of matches. Combined, the selector gives us the selected element in the radio group.\nOnce you have the selected radio button, get its value using .value. The value tells us which search engine the user has chosen.\nAt this stage, we could use a large if/else if/else statement to determine the URL for the selected search engine.\nlet actionURL; if (engine === \"google\") { actionURL = \"https://www.google.com/\"; } else if (engine === \"bing\") { actionURL = \"https://duckduckgo.com/\"; } // ... and so on ... This is ugly and inefficient. A better approach is to create an object to store the engine values and URLs as key/value pairs. For a single engine, the object would look like:\nlet actions = { \"google\": \"https://www.google.com/\" }; Add this to your code, and fill it out to include the other three engines.\nNow, you can get the action URL using action, bracket notation, and the value of the selected radio button. Once you have the action URL, find the form element and set its action using setAttribute.\nIf everything went well, your search engine selector page should now work! If not, that’s okay. Switch to debugging mode and figure out what needs fixing.\nBonus Missions Add validation to your submit handler to make sure that the user has both selected a search engine and entered a (non-empty) search term. Add some CSS rules to your page to make it look nice. ",
    "description": "",
    "tags": null,
    "title": "Studio: HTTP and Forms",
    "uri": "/user-input-with-forms/studio/index.html"
  },
  {
    "content": " Note Work on the following studio within your javascript-projects/more-on-functions/studio directory.\nSort Numbers For Real Recall that using the sort method on an array of numbers produced an unexpected result , since JavaScript converts the numbers to strings by default. Let’s fix this!\nHere is one approach to sorting an array:\nFind the minimum value in an array, Add that value to a new array, Remove the entry from the old array, Repeat steps 1 - 3 until the numbers are all in order. Part 1: Find the Minimum Value Create a function with an array of numbers as its parameter. The function should iterate through the array and return the minimum value from the array.\nHint: Use what you know about if statements to identify and store the smallest value within the array.\nTip Use this sample data for testing.\n[ 5, 10, 2, 42 ] [ -2, 0, -10, -44, 5, 3, 0, 3 ] [ 200, 5, 4, 10, 8, 5, -3.3, 4.4, 0 ] Part 2: Create a New Sorted Array Create another function with an array of numbers as its parameter. Within this function:\nDefine a new, empty array to hold the final sorted numbers. Use your function from the previous exercise to find the minimum value in the old array. Add the minimum value to the new array, and remove the minimum value from the old array. Repeat parts b \u0026 c until the old array is empty. Return the new sorted array. Be sure to print the results in order to verify your code. Tip Either a for or while loop will work inside this function, but one IS a better choice. Consider what the function must accomplish vs. the behavior of each type of loop. Which one best serves if the array has an unknown length?\nWhich type of loop?\nMore on Sorting Numbers The sorting approach used above is an example of a selection sort. The function repeatedly checks an array for the minimum value, then places that value into a new container.\nSelection sorting is NOT the most efficient way to accomplish the task, since it requires the function to pass through the array once for each item within the array. This takes way too much time for large arrays.\nFortunately, JavaScript has an elegant way to properly sort numbers.\nTip Here is a nice, visual comparison of different sorting methods .\nFeel free to Google “bubble sort JavaScript” to explore a different way to order numbers in an array.\nPart 3: Number Sorting the Easy Way If you Google “JavaScript sort array of numbers” (or something similar), many options appear, and they all give pretty much the same result. The sites just differ in how much detail they provide when explaining the solution.\nOne reference is here: W3Schools .\nEnd result: the JavaScript syntax for numerical sorting is arrayName.sort(function(a, b){return a-b});.\nHere, the anonymous function determines which element is larger and swaps the positions if necessary. This is all that sort needs to order the entire array.\nUsing the syntax listed above:\nSort each sample array in increasing order. Sort each sample array in decreasing order. Does the function alter arrayName? Did your sorting function from part B alter arrayName? So Why Write A Sorting Function? Each programming language (Python, Java, C#, JavaScript, etc.) has built-in sorting methods, so why did we ask you to build one?\nIt’s kind of a programming rite of passage - design an efficient sorting function. Also, sorting can help you land a job.\nAs part of a tech interview, you will probably be asked to do some live-coding. One standard, go-to question is to sort an array WITHOUT relying on the built in methods. Knowing how to think though a sorting task, generate the code and then clearly explain your approach will significantly boost your appeal to an employer.\nBonus Mission Refactor your sorting function from Part 2 to use recursion.\n",
    "description": "",
    "tags": null,
    "title": "Studio: More Functions",
    "uri": "/more-on-functions/studio/index.html"
  },
  {
    "content": "In this studio, you are going to write code to verify that your Space Shuttle is prepared for LiftOff! This activity will combine knowledge you have gained from this chapter and the Data and Variables Chapter Note The starter code for this studio can be found inside of the following repository: javascript-projects within the booleans-and-conditionals directory.\nThis studio activity will consist of 3 parts:\nInitializing variables with shuttle specifications. Writing conditional statements to check if your shuttle meets specific requirements and is cleared for LiftOff. Verify that all conditional statements have passed in order to launch the shuttle, otherwise aborting the launch sequence. Initialize Variables Start out by creating the below variables with the given values. Remember to account for different data types.\nVariable Value date Monday 2019-03-18 time 10:05:34 AM astronautCount 7 astronautStatus ready averageAstronautMassKg 80.7 crewMassKg astronautCount * averageAstronautMassKg fuelMassKg 760,000 shuttleMassKg 74842.31 totalMassKg crewMassKg + fuelMassKg + shuttleMassKg maximumMassLimit 850000 fuelTempCelsius -225 minimumFuelTemp -300 maximumFuelTemp -150 fuelLevel 100% weatherStatus clear preparedForLiftOff true Conditional Statements We want to make sure that the following conditions are met in order for our shuttle to launch. Create a statement for each condition:\nif astronautCount is no greater than 7 if astronautStatus is ready if the totalMassKg is less than the maximumMassLimit of 850000 if the fuelTempCelsius is no less than -300 OR no greater than -150 if fuelLevel is at 100% if weatherStatus is clear Verify the Shuttle is Cleared for LiftOff Once you have completed the above conditions, print out the following shuttle information below and wish your astronauts a safe flight! If the above conditions are not met, shut down the launch operations.\ndate time astronautCount crewMassKg fuelMassKg shuttleMassKg totalMasskg fuelTempCelsius weatherStatus Wish your astronauts a safe flight! Example Output ",
    "description": "",
    "tags": null,
    "title": "Studio: Shuttle Launch",
    "uri": "/decisions-with-conditionals/studio/index.html"
  },
  {
    "content": "Summary At this point, we have seen a lot of different types of errors. We have possibly created logic errors or syntax errors and now, we have just learned about the Error object in JavaScript. The goal of this studio is for us to develop strategies for debugging so that we can get rid of the bugs and get back to coding!\nActivity Think of a bug you have seen in your code. This could be the time you dropped a keyword when initializing a variable or misused a method.\nTake some time to discuss with the group what your error was and how you solved it. Did you talk to a TA to get it? Did you find a great resource online that was helpful? Your TA will go over the pros and cons of different resources that can help you resolve the error. You will then go over a general strategy to start debugging your errors.\nDebugging Process Your TA will go over this process with you and how it could help you debug more strategically. This process reflects what we have found works best for us and many students, however, as you grow as a programmer, you may find something works better for you. That is fine! Every programmer has their own process for debugging based off of their experiences and how their mind works.\nCheck the stacktrace to read the error message and see where it occurred. If you see the error, fix it on that line and recompile. If you cannot see the error, Google the error message. Check any relevant StackOverflow posts in the results. If the error is related to built-in methods or objects, also search for those in the official documentation. If the error is related to something that cannot be done in that particular language, look at the responses to each comment before trying to replicate proposed solutions. Solutions can oftentimes go out of date and responses will tell you if that is the case or simply if it is a bad solution. ",
    "description": "",
    "tags": null,
    "title": "Studio: Strategic Debugging",
    "uri": "/exceptions/studio/index.html"
  },
  {
    "content": "Strings are ordered collections of characters, which are strings of length 1. The characters in a string can be accessed using bracket notation.\nArrays are ordered collections of items, which can be strings, numbers, other arrays, etc. The items/elements/entries stored in an array can be accessed using bracket notation.\nStrings are immutable, whereas arrays can be changed.\nStrings and arrays have properties and methods that allow us to easily perform some useful actions.\nString Modification Note This portion of the studio can be found at the following location: javascript-projects/arrays/studio/string-modification.js.\nDont forget to run npm i or npm install within your studio directories.\nUse string methods to convert a word into pseudo-pig latin.\nRemove the first three characters from a string and add them to the end. Ex: 'LaunchCode' becomes 'nchCodeLau'. Use a template literal to print the original and modified string in a descriptive phrase. Modify your code to accept user input. Query the user to enter the number of letters that will be relocated. Add validation to your code to deal with user inputs that are longer than the word. In such cases, default to moving 3 characters. Also, the template literal should note the error. Array and String Conversion Note The starter code for this section contains unit tests. You will see a lot of new code in the starter code. The directions will tell you which function to work in. Look for the TODO and NOTE comments for guidance and direction. The Autograding Your Tests page provides more information and tips for working inside code like this.\nOpen the javascript-projects/arrays/studio/array-string-conversion directory and run npm i to install the required dependences.\nThe split and join methods convert back and forth between strings and arrays. Use delimiters as reference points to split a string into an array, then modify the array and convert it back to a printable string.\nFor a given string, use the includes method to check to see if the words are separated by commas (,), semicolons (;), or just spaces.\nUse the reverseCommas() function to code the following. If the string uses commas to separate the words, split it into an array, reverse the entries, and then join the array into a new comma-separated string. For example, \"up,to,code,fun\" becomes \"fun,code,to,up\".\nUse the semiDash() function to code the following. If the string uses semicolons to separate the words, split it into an array, alphabetize the entries, and then join the array into a new hyphen-separated string. For example, \"up;to;code;fun\" becomes \"code-fun-to-up\".\nUse the reverseSpace() function to code the following. If the string uses spaces to separate the words, split it into an array, reverse alphabetize the entries, and then join the array into a new space-separated string. For example, \"to code up fun\" becomes \"up to fun code\".\nUse the commaSpace() function to code the following. Consider: What if the string uses ‘comma spaces’ (, ) to separate the list? Modify your code to produce the same result as #2, making sure that the extra spaces are NOT part of the final string.\nBonus Mission: Multi-dimensional Arrays Note This portion of the studio can be found at the following location: javascript-projects/arrays/studio/multi-dimensional-arrays.js\nArrays can store other arrays!\nThe cargo hold in our shuttle contains several smaller storage spaces. Use split to convert the following strings into four cabinet arrays. Alphabetize the contents of each cabinet. \"water bottles, meal packs, snacks, chocolate\" \"space suits, jet packs, tool belts, thermal detonators\" \"parrots, cats, moose, alien eggs\" \"blankets, pillows, eyepatches, alarm clocks\" Initialize a cargoHold array and add the cabinet arrays to it. Print cargoHold to verify its structure. Query the user to select a cabinet (0-3) in the cargoHold. Use bracket notation and a template literal to display the contents of the selected cabinet. If the user entered an invalid number, print an error message instead. Bonus to the Bonus: Modify the code to query the user for BOTH a cabinet in cargoHold AND a particular item. Use the include method to check if the cabinet contains the selected item, then print \"Cabinet ____DOES/DOES NOT contain ____.\" ",
    "description": "",
    "tags": null,
    "title": "Studio: Strings and Arrays",
    "uri": "/arrays/studio/index.html"
  },
  {
    "content": "Now that we can build a basic flight simulator, we want to add more controls for the staff at our space station. The HTML, CSS, and JavaScript files are provided. For each event, the requirements and desired effect is listed.\nGetting Started Open the starter code within your javascript-projects/dom-and-events/studio directory.\nThe Requirements Use the window load event to ensure all elements have loaded before attaching event handlers. When the “Take off” button is clicked, the following should happen: A window confirm should let the user know “Confirm that the shuttle is ready for takeoff.” If the shuttle is ready for liftoff, then add the points below: The flight status should change to “Shuttle in flight.” The background color of the shuttle flight screen (id = \"shuttleBackground\") should change from green to blue. The shuttle height should increase by 10,000 miles. Note When you are moving the shuttle, you want to use absolute positioning in CSS. Absolute positioning means positioning the object based on its location in the parent object. In the case of our flight simulator, the parent object is a div with the id, shuttleBackground. Relative positioning means positioning the object based on its fellow child objects. We might use relative positioning if there were planet objects within our shuttleBackground div.\nWhen setting the position of an object in CSS, you use a string that ends in “px”. So the position of 10 pixels is “10px”. To add a number of pixels to the position, you may first have to use parseInt to convert the current position to a number.\nWhen the “Land” button is clicked, the following should happen:\nA window alert should let the user know “The shuttle is landing. Landing gear engaged.” The flight status should change to “The shuttle has landed.” The background color of the shuttle flight screen should change from blue to green. The shuttle height should go down to 0. When the “Abort Mission” button is clicked, the following should happen:\nA window confirm should let the user know “Confirm that you want to abort the mission.” If the user wants to abort the mission, then add the points below: The flight status should change to “Mission aborted.” The background color of the shuttle flight screen should change from blue to green. The shuttle height should go to 0. When the “Up”, “Down”, “Right”, and “Left” buttons are clicked, the following should happen:\nThe rocket image should move 10 px in the direction of the button that was clicked. If the “Up” or “Down” buttons were clicked, then the shuttle height should increase or decrease by 10,000 miles. Bonus Mission If you are done with the above and have some time left during class, there are a few problems that you can tackle for a bonus mission.\nKeep the rocket from flying off of the background. Return the rocket to its original position on the background when it has been landed or the mission was aborted. ",
    "description": "",
    "tags": null,
    "title": "Studio: The DOM and Events",
    "uri": "/dom-and-events/studio/index.html"
  },
  {
    "content": "Up to this point, you have got a copy of the starter code and taken an initial dive into how the Command class works. Now let’s turn our focus to the Message class!\nMessage Recall, the role of a message object is to bundle commands to send to the rover.\nRemember with TDD, first read through the description of the class. Then read through the given tests and think about what each test means for the desired behavior of the class. Only then should you start coding the Message class.\nMessage Class Description This class builds an object with two properties. constructor(name, commands) name is a string that is the name of the message. commands is an array of Command objects. Example let commands = [new Command('MODE_CHANGE', 'LOW_POWER'), new Command('STATUS_CHECK')]; let message = new Message('Test message with two commands', commands); Message Tests At the same level as command.spec.js, look for a file called message.spec.js and read the unit tests for the Message class as described below. After reading about the tests, add the necessary code to the Message class.\nTest 4\nThis test description is “throws error if a name is NOT passed into the constructor as the first parameter”. Review the first test in command.spec.js for an example of how this test works.\nLook at the code in command.js. Use that to help you write the Message class in message.js so that your test passes. Refer to the Message Class description above for more details. Test 5\nThe description is “constructor sets name”. The test confirms that the constructor in the Message class correctly sets the name property in a new message object.\nTest 6\nThe description reads “contains a commands array passed into the constructor as the 2nd argument”. This test confirms that the commands property of a new message object contains the data passed in from the Message(name, commands) call.\nWarning You are moving onto the red planet now. Be prepared for fewer instructions.\nThe final class we need to work on is Rover. Let’s check it out in the Rover Class section .\n",
    "description": "",
    "tags": null,
    "title": "Task 3: Message Class",
    "uri": "/assignments/mars-rover/message-class/index.html"
  },
  {
    "content": "Test Code Locally Run the following command to test your newly updated code to see if it passes the tests:\nnpm test If your tests fail, please revisit the previous section and double check that your hello.js file is formatted as expected. The test expects the output to be “Hello world!” precisely.\nCommit Your Changes Now that your program prints \"Hello world!\" and the tests pass, you’ll commit your code. Committing your code is part of a process called version control, which we’ll get into in a later lesson. For now, open up your terminal and type in the following commands to follow along:\nNote You will notice in the below commands that we are also running the git status command to check the current status of git after running commands. It is not required that we run a git status command but it does help illustrate what is happening.\ngit status git add . git commit -m \"Commit message\" git push origin main Check Your Solution Note The following section covers GitHub Actions. If you would like to visit the documentation provided by GitHub you can find that documentation here Once you’ve committed your work, head to your Github repository associated with this assignment to see if your solution passes the tests.\nThe easiest way to do this is to click on the actions tab located near the top of your repository.\nOnce inside of the actions tab your view should look similar to the following:\nNote In the above image you may notice that the circle icon next to Hello world! is yellow. Your tests may have already completed by the time you navigate to this page and the circle may appear as green if the tests passed, or red if they have failed.\nYou can click on the Hello world! workflow run and view the steps that the GitHub Action is completing and receive more details:\nClick the build button:\nIf your solution passes the grading requirements, you will notice a check mark next to each step within the build process. You will also notice a green check mark next to your most recent commit id on the main page of your repository.\nIf your solution does not pass, you will see a red x in its place.\nA red x can always be corrected by repeating the previous steps. These are:\nOpen the Actions tab. Select the failed test and select the rerun all failed jobs option. Change the string, Run the program to visually ensure that \"Hello world!\" is printed, Commit and push your changes. You may make any number of commits to your solution. You won’t lose points for pushing commit and push many times. In fact, each assignment is worth only 1 point. In most cases, you won’t need to commit and push more than once, however. You can verify that your code runs the way we expect by running it and seeing the proper \"Hello world!\" message printed.\nIn some cases, you may see a yellow dot grading status instead of the green check or red x. This is fine and just means that GitHub is currently building your solution. It will often resolve to either a check or x after a few moments.\nWhen you see a green check, your code passes and you are all finished with the assignment.\nNote If your program is outputting “Hello world!”, but you are still not seeing a green check mark, make sure you did not edit any file other than hello.js. An accidental space or extra character can cause problems with the tests. To double check that you have not done so, you can click on the 7-digit code next to the check mark or x. This will bring up which files have been changed and any changes made. If any other files other than hello.js were changed, make sure to undo the changes and commit to Github.\n",
    "description": "",
    "tags": null,
    "title": "Task 3: Test and Commit",
    "uri": "/assignments/hello-world/test-and-commit/index.html"
  },
  {
    "content": "Currently, the software contains the data structure below for the traditional Scrabble scoring algorithm. Take a few moments to review how the oldPointStructure object relates a point value to a letter.\n1 2 3 4 5 6 7 8 9 const oldPointStructure = { 1: ['A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T'], 2: ['D', 'G'], 3: ['B', 'C', 'M', 'P'], 4: ['F', 'H', 'V', 'W', 'Y'], 5: ['K'], 8: ['J', 'X'], 10: ['Q', 'Z'] }; The keys of oldPointStructure are the Scrabble points, and the values are arrays of letters. All letters in the array have the Scrabble point value equal to the key. For example, 'A' and 'R' are worth 1, 'K' is worth 5, and 'J' is worth 8.\nTo find the point value for a letter with the old format, the program must iterate over each key in oldPointStructure and then check if the letter is inefficient*.\nTip Think about this for a second. The scoring action takes in letters in a word as input and outputs numerical point values.\nWe can improve our program by rewriting the data structure to better fit the action we want to take. Keep this idea in mind as you go on to code your own applications.\nIt would improve the performance of the program to create a newPointStructure object that has 26 keys, one for each letter. The value of each key will be the Scrabble point value.\nNote The newPointStructure object will be created and tested during Task 4. Below are examples of what the new object storage will look like, in addition to testing the new object itself. You will not be able to test the newPointStructure object until Task 4!\nExamples of the new key storage:\na is worth 1 b is worth 3 c is worth 3 j is worth 8 In newPointStructure, the letters themselves are keys, so a single search will identify a point value.\nExample Example of newPointStructure object usage.\nconsole.log(\"Scrabble scoring values for\"); console.log(\"letter a: \", newPointStructure.a); console.log(\"letter j: \", newPointStructure.j); console.log(\"letter z: \", newPointStructure[\"z\"]); Console Output\nScrabble scoring values for letter a: 1 letter j: 8 letter z: 10 ",
    "description": "",
    "tags": null,
    "title": "Task 3: Transform Scrabble Scoring",
    "uri": "/assignments/scrabble-scorer/scoring-transform/index.html"
  },
  {
    "content": "One of the most powerful features of a programming language is the ability to manipulate variables. A variable is a name that refers to a value. Recall that a value is a single, specific piece of data, such as a specific number or string. Variables allow us to store values for later use.\nA useful visual analogy for how a variable works is that of a label that points to a piece of data.\nIn this figure, the name programmingLanguage points to the string value \"JavaScript\". This is more than an analogy, since it also is representative of how a variable and its value are stored in a computer’s memory.\nWith this analogy in mind, let’s look at how we can formally create variables in JavaScript.\nDeclaring and Initializing Variables With let To create a variable in JavaScript, create a new name for the variable and precede it with the keyword let:\nlet programmingLanguage; This creates a variable named programmingLanguage. The act of creating a variable is referred to as variable declaration, or simply declaration.\nOnce a variable has been declared, it may be given a value using an assignment statement, which uses = to give a variable a value.\nlet programmingLanguage; programmingLanguage = \"JavaScript\"; The act of assigning a variable a value for the first time is called initialization.\nThe first line creates a variable that does not yet have a value. The variable is a label that does not point to any data.\nThe second line assigns the variable a value, which connects the name to the given piece of data.\nIt is possible to declare and initialize a variable with a single line of code. This is the most common way to create a variable.\nlet programmingLanguage = \"JavaScript\"; Warning You will see some programmers use var to create a variable in JavaScript, like this:\nvar programmingLanguage = \"JavaScript\"; While this is valid syntax, you should NOT use var to declare a variable. Using var is old JavaScript syntax, and it differs from let in important ways that we will learn about later. When you see examples using var, use let instead.\nIf you’re curious, read about the differences between var and let .\nTo give a variable a value, use the assignment operator, =. This operator should not be confused with the concept of equality, which expresses whether two things are the “same” (we will see later that equality uses the === operator). The assignment statement links a name, on the left-hand side of the operator, with a value, on the right-hand side. This is why you will get an error if you try to run:\n\"JavaScript\" = programmingLanguage; An assignment statement must have the name on the left-hand side and the value on the right-hand side.\nTip To avoid confusion when reading or writing code, say to yourself:\nprogrammingLanguage is assigned 'JavaScript'\nor\nprogrammingLanguage gets the value 'JavaScript'.\nDon’t say:\nprogrammingLanguage equals 'JavaScript'.\nWarning What if, by mistake, you leave off let when declaring a variable?\nprogrammingLanguage = \"JavaScript\"; Contrary to what you might expect, JavaScript will not complain or throw an error. In fact, creating a variable without let is valid syntax, but it results in very different behavior. Such a variable will be a global variable, which we will discuss later.\nThe main point to keep in mind for now is that you should always use let unless you have a specific reason not to do so.\nEvaluating Variables After a variable has been created, it may be used later in a program anywhere a value may be used. For example, console.log prints a value; we can also give console.log a variable.\nExample These two examples have the exact same output.\nconsole.log(\"Hello, World!\"); let message = \"Hello, World!\"; console.log(message); When we refer to a variable name, we are evaluating the variable. The effect is just as if the value of the variable is substituted for the variable name in the code when executed.\nExample let message = \"What's up, Doc?\"; let n = 17; let pi = 3.14159; console.log(message); console.log(n); console.log(pi); Console Output\nWhat's up, Doc? 17 3.14159 In each case, the printed result is the value of the variable.\nLike values, variables also have types. We determine the type of a variable the same way we determine the type of a value, using typeof.\nExample let message = \"What's up, Doc?\"; let n = 17; let pi = 3.14159; console.log(typeof message); console.log(typeof n); console.log(typeof pi); Console Output\nstring number number The type of a variable is the type of the data it currently refers to.\nReassigning Variables We use variables in a program to “remember” things, like the current score at the football game. As their name implies, variables can change over time, just like the scoreboard at a football game. You can assign a value to a variable and later assign it a different value.\nTo see this, read and then run the following program in a code editor. You’ll notice that we change the value of day three times, and on the third assignment, we even give it a value that is of a different data type.\nlet day = \"Thursday\"; console.log(day); day = \"Friday\"; console.log(day); day = 21; console.log(day); A great deal of programming involves asking the computer to remember things. For example, we might want to keep track of the number of missed calls on your phone. Each time another call is missed, we can arrange to update a variable so that it will always reflect the correct total of missed calls.\nNote We only use let when declaring a variable, that is, when we create it. We do NOT use let when reassigning the variable to a different value. In fact, doing so will result in an error.\nCheck Your Understanding Question What is printed when the following code executes?\nlet day = \"Thursday\"; day = 32.5; day = 19; console.log(day); Nothing is printed. A runtime error occurs. Thursday 32.5 19 Question How can you determine the type of a variable?\nPrint out the value and determine the data type based on the value printed. Use typeof. Use it in a known equation and print the result. Look at the declaration of the variable. Question Which line is an example of variable initialization? (Note: only one line is such an example.)\n1: let a; 2: a = 42; 3: a = a + 3; ",
    "description": "",
    "tags": null,
    "title": "Variables",
    "uri": "/data-and-variables/reading/variables/index.html"
  },
  {
    "content": "Create Banner.jsx Create a new file named Banner.jsx inside the components directory.\nInside this file, create a function called Banner.\nThis function should return a \u003cheader\u003e tag that says: “Orbit Report”.\nBelow the \u003cheader\u003e create a \u003cp\u003e tag with instructions for users.\nHere is an example message:\nClick on the buttons to see the satellites in that orbit type Make sure that you are exporting this function.\nOpen App.jsx\nImport the new Banner component you created. Nest the Banner component inside the App() function. 10 11 12 13 14 15 16 17 18 function App() { return ( \u003cdiv\u003e \u003cBanner /\u003e \u003cButtons /\u003e \u003cTable /\u003e \u003c/div\u003e ); } Check to see if your Banner renders.\nNext ",
    "description": "",
    "tags": null,
    "title": "Task 2: Create the Banner Component",
    "uri": "/assignments/orbit-report/banner/index.html"
  },
  {
    "content": "map() map() is used for iterating through or displaying lists of similar objects of a component in React. The map() function creates a new array, which it renders to the DOM. This allows you to manipulate data from an array without changing the original array. It is similar to any of the loops you learned in the JavaScript portion of this book.\nTo use the map() function, you chain it to the array you want to iterate over. You will need to pass it a parameter for callback. This callback will be returned as JSX.\nLet’s look at an example.\nExample In this example, we are using an array of strings that name the days of the week.\nWe will chain the map() function to props in this example. The callback parameter is day. ListOfDays will return day as a list item. ListOfDays is contained within the DaysOfTheWeek function. The DaysOfTheWeek function is returning an unordered list of ListOfDays. Notice in this return statement, the array weekDays is the parameter.\nTry it! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 let weekDays = [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" ]; function DaysOfTheWeek() { const ListOfDays = (props) =\u003e { return props.map((day) =\u003e \u003cli key={props.index}\u003e{day}\u003c/li\u003e); }; return \u003cul\u003e{ListOfDays(weekDays)}\u003c/ul\u003e; } export default function App() { return ( \u003cdiv\u003e \u003cDaysOfTheWeek /\u003e \u003c/div\u003e ); } Output Check Monday Tuesday Wednesday Thursday Friday Saturday Sunday Keys Keys and Arrays\nThe example above used a simple array that contained a collection of strings. The map() function always uses key-value pairs . When working with an array, unless otherwise specified, the key becomes the index value of the array element. You can set the key equal to the index like we did in line 13 of the example above, however, this may cause an issue if items are rearranged or added to the array.\nKeys and Objects\nWe can use map() for more complicated arrays, such as an array of objects. Like the for loop, you can nest the map() function.\nWith all of the flexibility of the map() function, we need to ensure it renders the correct element.\nThe key becomes a value’s unique id that React associates with its component. This helps prevent values being mixed up between components. This unique id is crucial if the items in your array can move, be inserted into other components, or even deleted.\nIt is not advised to create keys while the application is running. You should include them in your data somehow. A key needs to be a string or number data type. If you have the opportunity to create your data, include some sort of id key. If your data does not have an id then use what is available.\nExample Let’s look at some data.\nWe created a calendar.json file to store our data in our app.\nTry It 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [{ \"month\": \"January\", \"season\": \"Winter\" }, { \"month\": \"February\", \"season\": \"Winter\" }, { \"month\": \"March\", \"season\": \"Spring\" } //continues through December ] We have a collection of months and seasons. We don’t have any id values declared in the JSON file. Keys need to be either a number or string. Let’s use the month values as our keys.\nExample without ID 1 2 3 4 5 6 7 8 9 10 11 12 import calendar from \"../components/Calendar\"; function SeasonSorting() { const whichSeason = calendar.map((cal) =\u003e ( \u003cli key={cal.month}\u003e {cal.month} is part of \u003cb\u003e{cal.season}\u003c/b\u003e \u003c/li\u003e )); return \u003col\u003e{whichSeason}\u003c/ol\u003e; } export default SeasonSorting; Output Check January is part of Winter February is part of Winter March is part of Spring Example with ID 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [ { \"id\": 1, \"month\": \"January\", \"season\": \"Winter\" }, { \"id\": 2, \"month\": \"February\", \"season\": \"Winter\" }, { \"id\": 3, \"month\": \"March\", \"season\": \"Spring\" } //continues to December ] If the data had id, we could use that. In the example below, we updated the calendar so that each object now contains an id. The output is the same.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import calendar from \"../components/Calendar\"; function SeasonSorting() { const whichSeason = calendar.map((cal) =\u003e ( \u003cli key={cal.id}\u003e {cal.month} is part of {cal.season} \u003c/li\u003e )); return \u003col\u003e{whichSeason}\u003c/ol\u003e; } export default function App() { return ( \u003cdiv\u003e \u003cSeasonSorting /\u003e \u003c/div\u003e ); } Output Check January is part of Winter February is part of Winter March is part of Spring Mapping conditions We can also use map() to render array elements based on conditions. This can be useful if you do not want every item in your list rendered. You can use any of the conditional methods addressed above.\nExample mapping Conditionally Let’s explore how to use map and conditionals to selectively render items to the UI.\nThis example uses the same JSON file as the previous example. You can explore it more in “Try It” link below.\nYou can code along here: Try It! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import calendar from \"../components/Calendar\"; let monthChoice = \"August\"; function ConditionInsideMap() { return ( \u003cdiv\u003e {calendar.map((props) =\u003e { return props.month === monthChoice ? ( \u003ch2 key={props.id}\u003e {props.month} is part of the {props.season} season \u003c/h2\u003e ) : null; })} \u003c/div\u003e ); } export default ConditionInsideMap; Output Check August is part of the Summer season In the example above, we import the calendar and pass it to map(). The map() function compares the month string to the monthChoice variable. If they are equal, then the \u003ch2\u003e message will render to the screen. Otherwise, the screen will stay blank. This example uses a ternary operator.\nCheck Your Understanding Question When the code below runs, it produces this warning:\nWarning: Each child in a list should have a unique \"key\" prop. 1 2 3 4 5 6 7 const digits = [12, 65, 72, 33, 2, 99]; function ListOfNums() { return digits.map((number, index) =\u003e \u003cli\u003e{number}\u003c/li\u003e); } export default ListOfNums; How best can we correct our code?\nexport default ListofNums(key={index}); digits(key={index}).map \u003cli key={index}\u003e{number}\u003c/li\u003e; This will never be resolved when working with arrays.\n",
    "description": "",
    "tags": null,
    "title": "The map( ) Function",
    "uri": "/react-part-2/reading/mapping/index.html"
  },
  {
    "content": "When changing the state, our intended effect may involve using some of the methods and processes we learned about earlier when we first talked about the DOM and events . Let’s take a closer look at changing state with an application in manufacturing.\nWe are at a shoe factory and the mechanism responsible for counting how many shoes come off the line is broken. The factory manager doesn’t want to stop production and cause unnecessary delays so they have asked you to sit by the machine and manually count the shoes coming down the line. With your React skills, you can quickly code an application that contains a single button and displays the current shoe count.\nCreate a new React application using Vite.\nMake a new components directory within src.\nMake a new file called ShoeButton.jsx.\nAdd the following code to that file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { useState } from 'react'; export default function ShoeButton() { const [shoeCount, setShoeCount] = useState(0); const handleClick = () =\u003e { setShoeCount(shoeCount+1); } return ( \u003cdiv\u003e \u003ch1\u003e{shoeCount} shoes have come down the line!\u003c/h1\u003e \u003cbutton onClick={handleClick}\u003eAdd a shoe!\u003c/button\u003e \u003c/div\u003e ); } Add a call to your ShoeButton component inside of App.jsx.\nWarning You may need to remove some of the boilerplate code from the App.jsx file that comes along with creating a new React application using Vite.\nRun the application and start hitting the button to update the state! This is an example of a counter button, which is one of the simplest ways to update the state of a component. You may have noticed that as you click the button, the page doesn’t reload, but the component still re-renders. Here is what is happening:\nWhen you click the button, the call to setShoeCount inside handleClick() updates the value of the state variable, shoeCount. This call ensures that the change in state is recognized and that component re-rendering is triggered. React’s Virtual DOM then updates the \u003ch1\u003e element to display the new shoe count. React compares the real DOM to the Virtual DOM and finds that the real DOM has the old shoe count displayed and the virtual DOM has the new shoe count displayed. Reconciliation occurs and the real DOM is updated to display the new count. Now the component is re-rendered and you can hit the button again! In this code, handleClick() is our event handler for the onClick event. We previously learned about onClick in DOM and Events . In React, we use event handlers to trigger changes in state based on users’ actions. You may have noticed that we are able to write web applications that perform similar actions as the ones we learned about previously with much less code.\nWhen we first learned about event handlers, we created a small application that would update some HTML when a button was clicked.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eButton click handler\u003c/title\u003e \u003cscript\u003e function youRang() { document.getElementById(\"main-text\").innerHTML += \"you rang...\"; console.log(\"you rang...\"); } \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eRing the Doorbell!\u003c/h1\u003e \u003cp id=\"main-text\"\u003e\u003c/p\u003e \u003cbutton onclick=\"youRang();\"\u003eRing Bell\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e With React, we can simplify our code and still accomplish the same task.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { useState } from 'react'; export default function Doorbell() { const[bell, setBell] = useState(\"\"); const handleClick = () =\u003e { setBell(bell += \"you rang...\"); } return( \u003cdiv\u003e \u003ch1\u003eRing the Doorbell!\u003c/h1\u003e \u003cp\u003e{bell}\u003c/p\u003e \u003cbutton onclick=\"handleClick\"\u003eRing Bell\u003c/button\u003e \u003c/div\u003e ); } Note Typically, event handlers in React applications are named using the following convention: “handle” + name of event. Hence, the event handler for handling the event of clicking on the button is “handleClick”. You will also see names like “handleSubmit” or “handleChange”.\n",
    "description": "",
    "tags": null,
    "title": "React and the DOM",
    "uri": "/react-lsn3/reading/react-dom/index.html"
  },
  {
    "content": "Let’s add some additional functionality to our recipe app! To get started, check out the starter code for the studio in the part3 directory on the main branch of react-exercises-and-studios . The starter code includes all the components you will need and in App.jsx, all the components are laid out for you. However, if you run the code, you will find that the application does not function as expected! Follow the steps below to complete the application.\nRecipe.jsx In the components directory, you will find Recipe.jsx. This file contains some familiar code to us so start here with editing your app. Pick out a recipe you think would be fun for the studio. Make note of the following:\nThe recipe’s title A short description of the recipe Five ingredients used in the recipe A link to a photo from the recipe A link to a photo of the recipe’s author The author’s name A link to the author’s website With all this information at hand, review Recipe.jsx and add each piece of information where it is appropriate. None of this information belongs in another file so you do not need to check out any of the other components just yet. When you feel like you have put everything where it should go, run the app again. It should still have some warnings and errors, so it is time to move on to the next component.\nBoardAssignment.jsx Staying in the components directory, turn your attention to BoardAssignment.jsx. First, brainstorm three boards that the recipe you chose might belong to.\nCurrently, boards is an empty array. boards should contain three objects representing the three boards that you just brainstormed. Each object must contain a label property and a value property. We will be using these three objects to create a dropdown menu that a user can select the board they want to save the recipe to. With all the options we want to display in our dropdown in boards, we need to use map() to set up an \u003coption\u003e tag for each item in boards. The \u003coption\u003e tags go between \u003cselect\u003e and \u003c/select\u003e and have this general structure: \u003coption value={appropriate value}\u003e{appropriate label}\u003c/option\u003e. This is just a dropdown so now we need to handle whatever the user ends up choosing. In the \u003cselect\u003e tag, the starter code comes with the necessary attributes for dealing with the user’s selection. However, handleChange() is empty and boardName is never declared. Start with boardName by declaring it as a state variable with a state setter function called setName() and making use of the useState hook. Set the initial value of boardName to 'no boards yet!'. handleChange() is the other key part in changing the state of boardName. Update the value of boardName to the value of event.target.value. While we have set up BoardAssignment to update some HTML so the user’s selection is displayed, the app will still have issues when run. Let’s work on the final component so we can get this app running perfectly!\nStatusChange.jsx Time to finish the final component! In StatusChange.jsx, we have some empty methods and some HTML, but we have even more to do.\nUse useState to set up two state variables: notes and recipeStatus. The initial value of notes should be an empty string and the initial value of recipeStatus should be false. For handleChange(), update the value of notes to event.target.value. For handleSubmit(), first use event.preventDefault() to make sure the user’s notes aren’t immediately lost and update the value of recipeStatus to true. Update the HTML in the return statement so that it uses the value of notes and displays a different message if recipeStatus is true. Run the application! You should be able to change the board the recipe belongs to and add notes to the recipe once you have tried it out yourself.\nSubmit Your Work Once you are done with the studio, push your work to Github and submit the link to your repo on Canvas.\n",
    "description": "",
    "tags": null,
    "title": "Studio",
    "uri": "/react-lsn3/studio/index.html"
  },
  {
    "content": "Now that we understand more about React and components, we are ready to build a React app. To make a new React application, we will be using a front-end tool called Vite . This will allow us to scaffold a new React project with the required dependencies and launch a local dev server.\nTo get started we first need to install vite within the project directory.\nnpm create vite@latest You will be asked to provide a name for the project. The below example uses the name react-part-one.\nYou will then use your arrow keys to select the React option.\nYou will then need to select the JavaScript variant.\nNow that your project has scaffolded you can navigate into the project root directory and run the following commands:\nnpm install npm run dev This will start your local development server and you will see output similar to the below image:\nYou can view some useful Shortcuts if you press h\nAt this point you can either open a web browser and navigate to http://localhost:5173 or press o if you are within the terminal window running the application.\nNote You do not need to press h in order for the shortcuts to work. Once the app is running you can press o to view the application within the browser (if you are currently within the terminal window running the application).\n",
    "description": "",
    "tags": null,
    "title": "Create a React Application",
    "uri": "/react-lsn1/reading/setup/index.html"
  },
  {
    "content": "One reason we are learning React is because many top tech companies use it, including Pinterest. On Pinterest, we can create boards and save pins of new recipes, wedding decor concepts, and tips and tricks for crafts. When one clicks on the pin, they are taken to a detailed view which includes a photo, a description of the pin, and in the case of recipes, ingredients one needs for that recipe. Today, we are going to try our own take on this page using React and what we have learned about components.\nBefore you start coding, find a recipe for some food you would like to eat! It can be any recipe, sweet or savory, but you should make sure that it meets the following:\nThe recipe is easily found online. You can right-click on a photo of the completed item and get a valid URL of the image. You can right-click on a photo of the author and get a valid URL of the image. The recipe includes at least 5 ingredients. Setting Up Your App To get started coding, you need to first create an application.\nOpen up your react-exercises-and-studios repo and navigate into the part1 directory. Create a new React app named studio with the command: npm create vite@latest. Select the React and JavaScript options when prompted. Install all of the required dependencies within the project using npm install or npm i. Once your application is set up, run npm run dev to verify that your application runs and is ready to go. The Components First create inside src, a folder called components. Now tackle creating the components one-by-one.\nThe RecipeDescription Component Inside the components directory, make a new file called Description.jsx.\nCreate a new function called RecipeAuthor(). For now, this function may not work as expected, but we have more work to do! This function should meet the following requirements:\nHave no parameters. Have three local variables: authorLink, authorPhoto, and authorName. authorLink should contain the link to the recipe blog or if the author is not the owner of the blog, one of their social media profiles. authorPhoto should include a valid URL pointing to a photo of the author. authorName should contain the author’s full name. Return something similar to the following: return ( \u003cdiv className = {styles.recipeAuthorBlock}\u003e \u003cimg src={authorPhoto} alt = \"Reasonable alt text\" className={styles.imageUpdates} /\u003e \u003cdiv\u003e \u003ch3\u003e{authorName}\u003c/h3\u003e \u003ca href={authorLink}\u003eBlog name\u003c/a\u003e \u003c/div\u003e \u003c/div\u003e ); Create a new file in the components directory called Description.module.css and add the following CSS to this file.\n.recipeAuthorBlock { display: flex; justify-content: space-evenly; } .imageUpdates { object-fit: contain; } Return to Description.jsx and add this import statement: import styles from './Description.module.css;.\nAdd one more import statement: import React from 'react';\nAdd a class called RecipeDescription which extends React.Component. This class should have only a render() method which returns something similar to the following JSX:\n\u003cdiv\u003e \u003cdiv\u003e \u003ch1\u003eRecipe Title\u003c/h1\u003e \u003cp\u003eShort recipe description\u003c/p\u003e \u003c/div\u003e \u003cRecipeAuthor /\u003e \u003c/div\u003e At the bottom of Description.jsx, add export default RecipeDescription;.\nHead over to the App.jsx file within the root directory and replace what is inside with the following code:\nimport { useState } from 'react' import './App.css' function App() { return ( \u003c\u003e \u003cdiv className=\"App\"\u003e \u003c/div\u003e \u003c/\u003e ) } export default App Add a second \u003cdiv\u003e and inside that add \u003cRecipeDescription /\u003e to call your new component. Add any necessary import statements. It should now look something like:\n\u003cdiv className=\"App\"\u003e \u003cdiv\u003e \u003cRecipeDescription /\u003e \u003c/div\u003e \u003c/div\u003e Run your application! You should have a white screen that just includes your RecipeDescription component.\nThe RecipeIngredients Component Inside your components directory, create a new file called Ingredients.jsx.\nInside this file, add a new function called RecipeIngredients(). This function should include the following:\nAn array containing the top 5 ingredients of your recipe. Return something similar to the following JSX: \u003cdiv\u003e \u003ch3\u003eRecipe Ingredients\u003c/h3\u003e \u003cul className = {styles.ingredientList}\u003e \u003cli\u003e{ingredients[0]}\u003c/li\u003e \u003cli\u003e{ingredients[1]}\u003c/li\u003e \u003cli\u003e{ingredients[2]}\u003c/li\u003e \u003cli\u003e{ingredients[3]}\u003c/li\u003e \u003cli\u003e{ingredients[4]}\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e Now create a new file in the components directory called Ingredients.module.css.\nAdd the following CSS to this new file:\n.ingredientList { text-align: left; } Return to Ingredients.jsx and add the following import statement: import styles from './Ingredients.module.css';.\nIf you didn’t before, add export default in front of your RecipeIngredients() function declaration.\nHead over to App.jsx.\nRight below \u003cRecipeDescription /\u003e, add \u003cRecipeIngredients /\u003e and the necessary import statement.\nRun your application! You should now see a list of ingredients below your recipe description.\nThe RecipePhoto Component Create a new file in components called Photos.jsx.\nAdd a new function called RecipePhoto() and add something similar to the following JSX to your return statement with the correct URL to your chosen recipe’s image:\n\u003cimg src=\"valid URL to recipe photo\" alt=\"recipe photo\" className = {styles.imageUpdates} /\u003e Add the following import statement to the top of your file: import styles from './Description.module.css';.\nIf you haven’t already, add export default to your function declaraction.\nHead over to App.jsx and import the RecipePhoto component.\nYou will add \u003cRecipePhoto /\u003e above the inner \u003cdiv\u003e, but inside \u003cdiv className=\"App\"\u003e. Wrap \u003cRecipePhoto /\u003e and the inner \u003cdiv\u003e in another \u003cdiv\u003e. It should look like the following:\n\u003cdiv className=\"App\"\u003e \u003cdiv\u003e \u003cRecipePhoto /\u003e \u003cdiv\u003e \u003cRecipeDescription /\u003e \u003cRecipeIngredients /\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e Now if you run your application, you will have all the info you need! Everything may look a little wonky. Let’s fix it!\nAdd some more CSS! In App.css, add a CSS class to the bottom of the file.\n.recipePhotoBlock { display: flex; justify-content: space-evenly; } Return to App.jsx and add className=\"recipePhotoBlock\" to the \u003cdiv\u003e that contains \u003cRecipePhoto /\u003e and the innermost \u003cdiv\u003e.\nRe-run the application to see the result!\nSubmitting Your Work Before you submit, check out the solutions branch to see an example of how the application should work.\nSave your work and commit and push to your remote. Submit the link to your remote repository on Canvas. ",
    "description": "",
    "tags": null,
    "title": "Studio: A Few of Your Favorite Recipes",
    "uri": "/react-lsn1/studio/index.html"
  },
  {
    "content": "Goals We want our programs to help you build your problem solving skills, encourage you to learn how to learn, and prepare you to pursue a career in technology. Whether you use the coding skills you gain in this program to get a job as a developer is up to you. However, no matter the path you take after this program, learning how to learn will help you continually adapt to the changing needs of your industry.\nTo get you ready for a career in technology, our goal is to teach you the skills found in a wide variety of industries.\nCourse Activities We have created the course activities to make the most of your time. It is important to actively engage with each activity to maximize your learning potential. Skipping the textbook reading or falling behind on assignments can quickly lead to struggling to complete the course.\nTextbook Reading Think of this textbook as your first destination in your learning journey. In addition to reading, this text includes small questions that can help you reinforce your understanding of the new material. At the beginning of the chapter, you will find your goals for the chapter and the list of key terms to guide your note-taking process. Reviewing your notes from a given chapter before moving on to the next is another great way to make the most of your learning potential. At the end of many chapters, we have recommendations of additional resources on the given topic. If you are unsure about what you just read, try reviewing those resources and making note of questions you want to ask during classtime.\nExercises Towards the end of most of the textbook chapters, you will find a a page of exercises. These are small coding problems and are a chance for you to implement what you have just learned. While exercises do not count towards your final grade in the class, it is essential to practice in order to reinforce your understanding of the new concepts. We recognize that working on something that is graded can be stressful and stress can actually inhibit your ability to learn! Make the most of every opportunity to practice coding without being graded on the end result!\nStudios Many chapters also include a studio. These studios are going to be more difficult than exercises, but these activities are designed to be done in class and with a smaller group, so you can pair with other students and ask questions of course staff as you navigate these challenges. Some of the studios are not about coding, but are about goal setting, building confidence, and other equally important topics when pursuing a new career. We encourage you to participate in these activities to your best abilities!\nGraded Assignments Graded assignments are larger projects where you demonstrate what you have learned and challenge yourself. Assignments oftentimes cover multiple lessons, but we encourage you to get started as soon as you can instead of waiting until the end. The assignments are broken down into different tasks, so when you first start, read through every task and determine what you can start working on right away and what you may need to wait on.\n",
    "description": "",
    "tags": null,
    "title": "About LaunchCode Programs",
    "uri": "/introduction/reading/about-launchcode-programs/index.html"
  },
  {
    "content": "In addition to syntax extensions, JavaScript also has supersets. A superset of a language just means that a program written in TypeScript is also a valid program in JavaScript. Unlike a syntax extension, a superset is its own programming language with its own syntax rules. Some React applications are written in TypeScript, which is a superset of JavaScript. Since TypeScript programs are also valid as JavaScript programs, you might be wondering why choose to write something in TypeScript. While it is true that TypeScript programs are valid as JavaScript programs, TypeScript has one major difference: it is a statically typed language. On the other hand, JavaScript is dynamically typed. A statically typed language is a language where the type of a variable is given at the time the program is compiled. This is often achieved by adding the type of the variable to the variable declaration. In a dynamically typed language, the type of the variable is determined at runtime and is based on the value inside the variable, not the variable declaration. Statically typed languages are considered by many to be more stable and less prone to production errors, because the errors will occur in development.\nVariable Declaration To declare a variable in TypeScript, we have to specify the type.\nlet variableName : variableType = value; Let’s take a look at a prior example:\n1 2 3 4 5 6 7 // In JavaScript, we have: let spaceShuttleName = \"Determination\"; let shuttleSpeed = 17500; let distancetoMars = 225000000; let distancetoMoon = 384400; let milesperKilometer = 0.621; The same variable declarations in TypeScript would be:\n1 2 3 4 5 6 7 // The same declarations in TypeScript would be: let spaceShuttleName: string = \"Determination\"; let shuttleSpeed: number = 17500; let distancetoMars: number = 225000000; let distancetoMoon: number = 384400; let milesperKilometer: number = 0.621; Now let’s write some broken code that will update the value of distancetoMoon.\ndistancetoMoon = \"384401\"; In both JavaScript and TypeScript, the above line of code will result in an error because distancetoMoon was declared above in both languages as a number. However, in TypeScript, the resulting error would prevent the application from building, providing us developers with a safety net. In JavaScript, the error would be exposed at runtime, which makes it harder for us to track the broken logic.\nNote Another reason to use TypeScript is that it includes several features that JavaScript doesn’t. Developers can use interfaces, abstract classes, and function overloading when working with TypeScript which we will learn more about in Unit 2.\nTypeScript Collections Arrays in TypeScript must contain values of the same type. When declaring an array, the type needs to be declared.\nlet arrayName: number[] = [10,9,8]; What if the array needs to hold values of different types?\nNow, we need a tuple. A tuple is a special structure in TypeScript that can hold as many values as needed of different types.\nlet tupleName: [number, string, number]; tupleName = [10, \"9\", 8]; This is just a short introduction to TypeScript to expose you to supersets and one of the most famous ones in the JavaScript landscape. Not only can React applications be writting in TypeScript, but Angular, a popular front-end framework, is written in TypeScript. In addition to its popularity, learning a bit more about TypeScript can help you make the transition to Unit 2, where the back-end development is done with a statically typed language.\nCheck Your Understanding Question TypeScript is __________ typed and JavaScript is __________ typed.\ndynamically, dynamically statically, statically statically, dynamically dynamically, statically Question The correct TypeScript declaration of the variable, astronautName, that holds the value, \"Sally Ride\", is:\nlet astronautName = \"Sally Ride\"; let astronautName = string: \"Sally Ride\"; let astronautName: string = \"Sally Ride\"; string astronautName = \"Sally Ride\"; Question What is the appropriate collection type for this collection, [\"Costco\", 4.97, 3]?\nArray List Tuple Dictionary ",
    "description": "",
    "tags": null,
    "title": "Supersets",
    "uri": "/modern-js/reading/supersets/index.html"
  },
  {
    "content": ".indexOf() Examples The general syntax for this method is:\narrayName.indexOf(item) This method returns the index of the FIRST occurence of an item in the array. If the item is not in the array, -1 is returned.\nExample let charles = [1, 7, 5, 9, 5]; let otherArray = ['hello', 'world!']; console.log(charles.indexOf(5)); console.log(otherArray.indexOf('hi')); Output\n2 -1 ",
    "description": "",
    "tags": null,
    "title": "indexOf Examples",
    "uri": "/appendices/array-method-examples/indexof-examples/index.html"
  },
  {
    "content": "Math.max The general syntax for this method is:\nMath.max(x, y, z, ...) This method finds and returns the largest value from a set of numbers (x, y, z, …).\nTo find the maximum value in an array, see below.\nExample console.log(Math.max(2, 3, 100.01, 0, -5.2, 100)); Console Output\n100.01 Math.min The general syntax for this method is:\nMath.min(x, y, z, ...) This method finds and returns the smallest value from a set of numbers (x, y, z,…).\nTo find the minimum value in an array, see below.\nExample console.log(Math.min(2, 3, 100.01, 0, -5.2, 100)); Console Output\n-5.2 Max and Min of an Array Unfortunately, the max and min methods will NOT take an array of numbers as an argument. There are numerous workarounds. Here are TWO possible solutions.\nSort First This approach uses the syntax from the sorting studio to first order the array. The maximum (or minimum) value can then be identified with bracket notation.\nExample 1 2 3 4 5 6 let numbers = [-2, 3.33, -4.44, 8.88]; let sortedArray = numbers.sort(function(a, b){return a-b}); console.log(sortedArray); console.log(`Min = ${sortedArray[0]}, Max = ${sortedArray[sortedArray.length-1]}`); Console Output\n[ -4.44, -2, 3.33, 8.88 ] Min = -4.44, Max = 8.88 Alternatively, we could put the array in decreasing order:\n1 2 3 4 5 6 let numbers = [-2, 3.33, -4.44, 8.88]; let sortedArray = numbers.sort(function(a, b){return b-a}); console.log(sortedArray); console.log(`Max = ${sortedArray[0]}, Min = ${sortedArray[sortedArray.length-1]}`); Console Output\n[ 8.88, 3.33, -2, -4.44 ] Max = 8.88, Min = -4.44 Using Spread Syntax An alternative to the sorting approach described above is to use the spread operator (...), also called spread syntax.\nIn cases where a set of numbers or strings (x, y, z, etc.) is expected, an array cannot be used as-is. The spread operator expands an array into a comma-separated set of elements, which can be passed as arguments in a function call. functionName(...[x,y,z]) is identical to functionName(x,y,z).\nExample 1 2 3 4 5 6 7 let numbers = [2, 3, 100.01, 0, -5.2, 100]; let max = Math.max(...numbers); let min = Math.min(...numbers); console.log(...numbers); console.log(`Min = ${min}, Max = ${max}`); Console Output\n2 3 100.01 0 -5.2 100 Min = -5.2, Max = 100.01 Note the absence of brackets, [], around the numbers printed by line 6. console.log(...numbers) executes as console.log(2, 3, 100.01, 0, -5.2, 100), so the output is NOT an array.\nNote The sorting approach works in all browsers. The spread operator, while very convenient, is NOT compatible with Internet Explorer or older versions of other browsers (pre-2015). For more details on the spread operator and its compatibility, check the MDN Web Docs .\n",
    "description": "",
    "tags": null,
    "title": "Math.max and Math.min Examples",
    "uri": "/appendices/math-method-examples/max-and-min-examples/index.html"
  },
  {
    "content": "The general syntax for this method is:\nlet element = document.querySelector(\"CSS selector\"); Uses a CSS selector pattern and CSS selector rules to find a matching element. Returns the FIRST matching element. If NO match is found, null is returned.\nCSS Selector Examples\nclass selector: document.querySelector(\".class-name\"); tag selector: document.querySelector(\"div\"); id selector: document.querySelector(\"#main\"); Tip You can use any valid CSS selector with querySelector. The selectors can be simple like querySelector(\"div\") or complex like querySelector(\"#main div .summary\").\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eDOM Examples\u003c/title\u003e \u003cstyle\u003e .main { font-weight: bold; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003equerySelector Example\u003c/h1\u003e \u003cp id=\"description\" class=\"main\"\u003e querySelector's power is exceeded only by it's mystery. \u003c/p\u003e \u003cdiv id=\"response\"\u003e It's not that mysterious, querySelector selects elements using the same rules as CSS selectors. \u003c/div\u003e \u003cscript\u003e // selects the \u003cp\u003e using class selector let main = document.querySelector(\".main\"); console.log(main.innerHTML.trim()); main.style.color = \"blue\"; // Selects the \u003cdiv\u003e using tag selector let response = document.querySelector(\"div\"); console.log(response.innerHTML.trim()); response.style.color = \"red\"; \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output\nquerySelector's power is exceeded only by it's mystery. It's not that mysterious, querySelector selects elements using the same rules as CSS selectors. querySelectorAll The general syntax for this method is:\nlet elements = document.querySelectorAll(\"CSS selector\"); Uses a CSS selector pattern and CSS selector rules to find a matching elements. Returns ALL elements that match the selector. If NO match is found, null is returned.\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eDOM Examples\u003c/title\u003e \u003cstyle\u003e .red { color: red; } .purple { color: purple; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003equerySelectorAll Example\u003c/h1\u003e \u003ch2\u003eRed Fruits\u003c/h2\u003e \u003cul class=\"red\"\u003e \u003cli\u003eStrawberry\u003c/li\u003e \u003cli\u003eRaspberry\u003c/li\u003e \u003cli\u003eCherry\u003c/li\u003e \u003c/ul\u003e \u003ch2\u003ePurple Fruits\u003c/h2\u003e \u003cul class=\"purple\"\u003e \u003cli\u003eBlackberry\u003c/li\u003e \u003cli\u003ePlums\u003c/li\u003e \u003cli\u003eGrapes\u003c/li\u003e \u003c/ul\u003e \u003cscript\u003e // Selects ALL the \u003cli\u003e elements and adds text to each one let listItems = document.querySelectorAll(\"li\"); for (let i=0; i \u003c listItems.length; i++) { listItems[i].innerHTML += \" is yummy\" } // Selects the PURPLE \u003cli\u003e elements and make them bold let purpleItems = document.querySelectorAll(\".purple li\"); for (let i=0; i \u003c purpleItems.length; i++) { purpleItems[i].innerHTML += \"!!!\" } // Console log the contents of the first items in each list // Remember that querySelector returns only the FIRST match let firstRed = document.querySelector(\".red li\"); console.log(\"contents of first red li:\", firstRed.innerHTML); let firstPurple = document.querySelector(\".purple li\"); console.log(\"contents of first purple li:\", firstPurple.innerHTML); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output\ncontents of first red li: Strawberry is yummy contents of first purple li: Blackberry is yummy!!! ",
    "description": "",
    "tags": null,
    "title": "querySelector and querySelectorAll Examples",
    "uri": "/appendices/dom-method-examples/queryselector-examples/index.html"
  },
  {
    "content": "Step Away From Your Code Sometimes you just need to take a break. When you find yourself getting frustrated it’s time to do something else for a bit and come back with fresh eyes.\nExercise, go for a walk, do the dishes, put on some music and dance, meditate, set a timer and look up memes (bonus share them with your peers).\nDoes not matter what you do. By giving your brain a break, often times when you come back to the code you’ll have new insight to the problem that had frustrated you in the first place.\nPick Me Ups The following are curated lists from fellow LaunchCoders. By no means are they definitive, but rather a jumping off point.\nMusic\nMake your own playlist, or search for a tech/it/coding/homework music compilations on your internet player of choice (i.e., pandora, spotify, youtube). Some LaunchCode favorites to get you started:\nGloria by Laura Branigan Gonna Fly Now (Theme from Rocky) I Will Survive by Gloria Gaynor Happy by Pharrell Williams Journey - Dont Stop Believin Stronger (What Doesn\u0026rsquo;t Kill You) by Kelly Clarkson For Once In My Life by Stevie Wonder Girl On Fire by Alicia Keys Rise Up by Andra Day Roar by Katy Perry Fight Song by Rachel Platten Im Still Standing by Elton John Guardians of the Galaxy: Awesome Mix (Vol. 1 \u0026amp; Vol. 2) Respect by Aretha Franklin Ted Talks\nVisit TED.Com to view the entire library of TED Talks. Below are some of LaunchCoders favorites.\nGrit: The power of passion and perseverance by Angela Lee Duckworth Start With Why by Simon Sinek Achieve your goals with practice, persistence and patience by Ryan Roxie Inside the mind of a master procrastinator by Tim Urban or if reading is more your thing Blog Post Master Procrastinator Learning how to learn by Barbara Oakley The power of vulnerability by Brene Brown Nature. Beauty. Gratitude. by Louie Schwartzberg How to make stress your friend by Kelly McGonigal A virtual choir 2,000 voices strong by Eric Whitacre The surprising habits of original thinkers by Adam Grant Books\nThe Alchemist by Paulo Coelho Peak: Secrets from the New Science of Expertise by Anders Ericsson and Robert Pool A Mind for Numbers: How to Excel at Math and Science (Even If You Flunked Algebra) by Barbara Oakley Getting Things Done by David Allen Misc\nExcellent article, Screw motivation, what you need is discipline . Note that there are a few expletives used in it, so if you are sensitive to swearing, you may not wish to read it.\nWizard Zines by Julia Evans Bukolas Youtube Channel on Life as a Developer And remember,\nYou Got This!\n",
    "description": "",
    "tags": null,
    "title": "Brain Breaks",
    "uri": "/booster-rockets/brainbreaks/index.html"
  },
  {
    "content": "Each HTTP request that reaches a web server results in an HTTP response to the client.\nA generic HTTP response looks like this:\nHTTP/2.0 200 OK Date: Wed, 22 May 2019 17:36:50 GMT Content-Type: text/html; charset=UTF-8 Content-Length: 8050 Last-Modified: Wed, 22 May 2019 17:33:45 GMT \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003c!--Rest of HTML page --\u003e \u003c/html\u003e The structure has these components:\nStatus line: The first line of the response is the response line, which contains status information about the response including the response code. In this example, the response code is 200, which indicates the request was fulfilled successfully. Response headers: Below the response line are the response headers. Similar to request headers, these are key-value pairs that contain metadata about the response. Blank line: This signifies the end of the response headers. Response body (Optional): Below the blank line, the request body takes up the remainder of the HTTP response. This is usually HTML, CSS, JavaScript, etc. Response Codes HTTP response codes are standardized codes that servers use to convey the result of attempting to fulfill the client’s request. They are always three-digit numbers that fall into one of five categories based on the first digit.\n1xx (Informational): The request was received but processing has not finished 2xx (Successful): The request was valid and the server successfully responded 3xx (Redirection): The client should go elsewhere to access the requested resource 4xx (Client Error): There was a problem with the client’s request 5xx (Server Error): The client’s request was valid, but the server experienced an error when fulfilling it Specific codes will have all 3 digits specified, such as 201, 302, or 404. Each specific code has a specific meaning. One of the most commonly experienced error codes is 404. You have likely encountered a message like this at some point:\nA 404 response code indicates that the requested resource does not exist on the server. This can occur when, for example, you make a typo when typing a URL into the address bar. Referring back to our postal service analogy, a 404 is similar to receiving a letter marked “Return to Sender” because the addressee doesn’t live there anymore.\nWe don’t expect you to memorize all of the response codes, but you should be able to quickly recall the most common codes.\nCode Description Example 200 The requested resource exists and was successfully returned. Visiting any existing web page on the Internet. 301 The requested resource has moved, and the client should look for it at the URL included in the Location header. A site moves a page, but wants users with old links to be redirected to the page’s new location. 404 The server received the request, but the requested resource does not exist on the server. Requesting an image or HTML file that does not exist on the server. 500 The server experienced an error while fulfilling the request. The server lost its database connection and cannot retrieve requested data. Response Headers There are quite a few response headers , but only a few will be useful to us.\nHeader Purpose Example Content-Type The type of data included in the response body. text/html, text/css, image/jpg Content-Length The size of the response body in bytes. 348 Location The URL that the client should visit to find a relocated resource. https://www.launchcode.org/new-blog/ Response Body While requests often don’t have a body, responses almost always have a body. The response body is where the data that a request asked for is located. It can contain HTML, CSS, JavaScript, or image data.\nWhen a response is received by a browser, it is loaded into the browser’s memory, with additional processing in some cases. For HTML files, the markup is rendered into a web page. For CSS files, the style rules are parsed and applied to the given HTML page.\nCheck Your Understanding Question A 404 response indicates that:\nThe server is offline. The user needs to log in. The requested resource does not exist. The server’s database crashed. Question Visit Wikipedia\u0026rsquo;s article on HTTP response codes . Which response code is used to signify that the user must authenticate themselves (that is, log in) before viewing the given resource?\n",
    "description": "",
    "tags": null,
    "title": "Responses",
    "uri": "/http/reading/http-responses/index.html"
  },
  {
    "content": "Branching in Git So far, this book has talked about Git’s ability to store different versions of a code base. What if two programmers want to work on different features of the code base at the same time? They may want to start with the same version and then one programmer wants to change the HTML and the other the CSS. It would not be effective for the two programmers to commit their changes to the repository at the same time. Instead, Git has branches. A branch is a separate version of the same code base. Like a branch on a tree, a branch in Git shares the same trunk as other branches, but is an individual. With branches, the two programmers can work on separate versions of the same website without interfering with each other. Besides collaboration, programmers also use feature branches to store and test new ideas for their software.\nIn the previous section, when checking the status, the top line was On branch main. The main branch is the default branch of the repository. Many programmers keep the live version of their code in the main branch. For that reason, major work should be done in a new branch, so it doesn’t impact the live software.\nCreating a New Branch Assume a programmer is on main and they want to start building a new feature in a new branch. Their first step is to create a new branch for their work.\nTo create a branch, the command is git checkout -b \u003cbranch name\u003e. By using this command, not only is a new branch created, but also the programmer switches to their new branch.\nSwitching to an Existing Branch If the branch already exists, the programmer may want to switch to that branch. To do so, the command is git checkout \u003cbranch name\u003e.\nCheck Your Understanding Question What is a reason for creating a branch in Git?\n",
    "description": "",
    "tags": null,
    "title": "Branches",
    "uri": "/git/reading/branches/index.html"
  },
  {
    "content": "You are now ready to tackle the DOM. Before moving on to the next chapter, if you would like additional resources on Git, here are a few of our favorites.\nLinux Basics Git Commands Documentation ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/git/next-steps/index.html"
  },
  {
    "content": "Before continuing on to learning about CSS, here are a few additional resources on HTML in case you want to review.\nW3Schools MDN Web Documentation ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/html/next-steps/index.html"
  },
  {
    "content": "Object-oriented programming is a type of software design where the codebase is organized around objects and classes. Objects contain the functions and central logic of a program.\nObject-oriented programming stands on top of four principles: abstraction, polymorphism, encapsulation, and inheritance. We will dive into inheritance now and work with the other three principles in Unit Two of this class.\nInheritance refers to the ability of one class to acquire properties and methods from another.\nThink of it this way, in the animal kingdom, a species is a unique entity that inherits traits from its genus. The genus also has unique properties, but inherits traits from its family. For example, a tiger and a housecat are members of two different species, however, they share similar traits such as retractable claws. The two cats inherited their similar traits from their shared family, felidae.\nUsing inheritance in programming, we can create a structure of classes that inherit properties and methods from other classes.\nIf we wanted to program classes for our tiger and housecat, we would create a felidae class for the family. We would then create two classes for the panthera genus and the felis genus. We would create classes for the tiger and house cat species as well. The species classes would inherit properties and methods from the genus classes and the genus classes would inherit properties and methods from the family class.\nThe classes inheriting properties and methods are child classes, and the classes passing down properties and methods are parent classes.\nextends When designating a class as the child class of another in JavaScript, we use the extends keyword. We also must use the super() constructor to get the properties and methods needed from the parent class.\n1 2 3 4 5 6 class ChildClass extends ParentClass { constructor () { super(); // properties } } In the case of a tiger, tigers have stripes, but they also have loud roars. Their ability to roar loudly is a trait they share with other members of the panthera genus. Tigers also got their retractable claws from the felidae family.\nExample Open up Inheritance.js in javascript-projects/classes/chapter-examples to explore this example.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Felidae { constructor() { this.claws = \"retractable\"; } } class Panthera extends Felidae { constructor() { super(); this.roar = \"loud\"; } } class Tiger extends Panthera { constructor() { super(); this.hasStripes = \"true\"; } } let tigger = new Tiger(); console.log(tigger); When creating the classes for our tiger, we can use the extends keyword to set up Tiger as the child class of Panthera. The Tiger class then inherits the property, roar, from the Panthera class and has an additional property, hasStripes.\nNote The extends keyword is not supported in Internet Explorer.\nCheck Your Understanding Question If you had to create classes for a wolf, the canis genus, and the carnivora order, which statement is TRUE about the order of inheritance?\nWolf and Canis are parent classes to Carnivora. Wolf is a child class of Canis and a parent class to Carnivora. Wolf is child class of Canis, and Canis is a child class of Carnivora. Wolf is child class of Canis, and Canis is a parent class of Carnivora. ",
    "description": "",
    "tags": null,
    "title": "Inheritance",
    "uri": "/classes/reading/inheritance/index.html"
  },
  {
    "content": "The next chapter will cover more about the terminal. If you would like some additional resources on classes in JavaScript, here are a few of our favorites.\nJavaScript Classes W3Schools MDN documentation ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/classes/next-steps/index.html"
  },
  {
    "content": "After completing this chapter, you are ready to learn more about scope. If you want some additional resources on unit testing in JavaScript, here are some of our favorites:\nA Beginner\u0026rsquo;s Guide to Unit Testing with Jest Testing with Jest ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/unit-testing/next-steps/index.html"
  },
  {
    "content": "Now that we know more about unit tests, we are going to learn a new way of using them. So far we have written tests to verify functionality of existing code. Next we are going to use tests to verify functionality of code that does NOT already exist. This may sound odd, but this process has many benefits as we will learn.\nAs the name sounds, Test-driven development (TDD) is a software development process where the unit tests are written first. However, that doesn’t tell the entire story. Writing the tests first and intentionally thinking more about the code design leads to better code. The name comes from the idea of the tests driving the development process.\nBefore we can start using TDD, we need a list of discrete features that can be turned into unit tests. This will help keep our tests focused on specific functionality which should lead to code that is easy to read. Along the way we will build confidence as we add features.\nNote TDD is a process that some organizations choose to use. Using the TDD process is not required when using unit tests.\nThe Test/Code Cycle With TDD you start with the unit test first. Each test must clearly describe the behavior it is testing.\nExample Example test case for a data parsing project:\nTake in a string of numbers delimited by a character and return an array. Because the test is for a feature that does NOT exist yet, we need to think about how the feature will be implemented. This is the time to ask questions like: Should we add a new parameter? What about an entirely new function? What will the function return?\nExample How could we implement our test case? Remember we aren’t writing the code yet, only thinking about the design.\nThe test case will evaluate the function named parseData\nThe parseData function will:\ncontain a data parameter that gets assigned a string of data contain a delimiter parameter that will be used to split the string into an array return an array parseData will be defined in a module\nNext, write the unit test as if the parameter or function you imagined already exists. This may seem a bit odd, but considering how the new code will be used helps find bugs and flaws earlier. We also have to use test utilities such as expect().toBe() to clearly demonstrate that the proposed new code functions properly.\nExample Next, type out the ideas into an actual test. In this example, the test references a module and a function that have not been created yet. The code follows the plan we came up with earlier. Very importantly, there is an expect().toBe(true) that verifies an array is returned.\n1 2 3 4 5 6 7 8 9 10 const parse = require('../parse-numbers'); describe(\"parse numbers\", function(){ test(\"returns array when passed comma separated list of numbers\", () =\u003e { let items = parse(\"5,8,0,17,6,4,9,3\", \",\"); expect(Array.isArray(items)).toBe(true); }); }); Now run the test! The test should fail (or not compile at all) because you have referenced code that does not exist yet.\nFinally, write code to pass the new test. In the earlier chapters, this is where you started, but with TDD writing new code is the last step.\nExample To make the new test pass, a file must be created that exports a parseData function with logic that satisfies the expected result.\n1 2 3 4 5 function parseData(text, delimiter) { return text.split(delimiter); } module.exports = parseData; Coding this way builds confidence in your work. No matter how large your code base may get, you know that each part has a test to validate its functionality.\nExample Now that we have one passing test for our data parser project, we could confidently move on to writing tests and code for the remaining features.\nRed, Green, Refactor While adding new features and making our code work is the main goal, we also want to write readable, efficient code that makes us proud. The red, green, refactor mantra describes the process of writing tests, seeing them pass, and then making the code better. As the name suggests, the cycle consists of three steps. Red refers to test results that fail, while green represents tests that pass. The colors refer to test results which are often styled with red for failing tests and green for passing tests.\nRed -\u003e Write a failing test. Green -\u003e Make it pass by implementing the code. Refactor -\u003e Make the code better. Refactoring code means to keep the same overall feature, but change how that feature is implemented. Since we have a test to verify our code, we can change the code with confidence, knowing that any error will be immediately identified by the test. Here are a few examples of refactoring:\nUsing different data structures, Reducing the number of times needed to loop through an array, Moving duplicate logic into a function so it can be reused. The refactor is also done in a TDD process:\nDecide how to improve the implementation of the feature, Change the unit test to use this new idea, Run the code to see the test fail, Refactor the code to implement the new idea, Finally, see the test pass with the refactored design. ",
    "description": "",
    "tags": null,
    "title": "Test-Driven Development",
    "uri": "/unit-testing/reading/tdd/index.html"
  },
  {
    "content": "After completing this chapter, you are ready to learn about modules. If you would like to learn more about objects before going on to the next chapter, here are some of our favorite resources.\nJavaScript Objects Working with Objects What are Objects in JavaScript? ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/objects-and-math/next-steps/index.html"
  },
  {
    "content": "JavaScript provides several built-in objects, which can be called directly by the user. One of these is the Math object, which contains more than the standard mathematical operations (+, -, *, /).\nIn the previous sections, we learned how to construct, modify, and use objects such as giraffe. However, JavaScript built-in objects cannot be modified by the user.\nUnlike other objects, the Math object is immutable.\nMath Properties Are Constants The Math object has 8 defined properties. These represent mathematical constants, like the value for pi (π) or the square root of 2.\nInstead of defining a variable to hold as many digits of pi as we can remember, JavaScript stores the value for us. To use this value, we do NOT need to create a new object. By using dot notation and calling Math.PI, we can access the value of pi.\nExample 1 2 3 console.log(Math.PI); console.log(Math.PI*4); console.log(Math.PI + Math.PI); Console Output\n3.141592653589793 12.566370614359172 6.283185307179586 As stated above, the properties within Math cannot be changed by the user.\nExample 1 2 3 4 5 console.log(Math.PI); Math.PI = 1234; console.log(Math.PI); Console Output\n3.141592653589793 3.141592653589793 To use one of the other constants stored in Math, we replace PI with the property name (e.g. SQRT2 stores the value for the square root of 2).\nOther Math Properties Besides the value of pi, JavaScript provides 7 other constants . How useful you find each of these depends on the type of project you need to complete.\nMore powerful uses of the Math object involve using methods, which we will examine next.\n",
    "description": "",
    "tags": null,
    "title": "The Math Object",
    "uri": "/objects-and-math/reading/math-object/index.html"
  },
  {
    "content": "Having seen several examples, we will now explore the syntax of a for loop in more depth.\nRecall the first example of a for loop that we looked at.\n1 2 3 for (let i = 0; i \u003c 51; i++) { console.log(i); } We broke down the flow of execution of this loop, noting that the loop executes once for each of the values of i from 0…50. The three components of the loop—loop variable, loop condition, and update expression—dictate exactly how this loop executes. So far, we have only seen for loops with this exact form:\n1 2 3 for (let i = 0; i \u003c upperBound; i++) { // loop body } However, the three components of a for loop statement can take different forms to create more complex looping behavior.\nfor Loop Anatomy The general form of a for loop is:\nfor (initial expression; loop condition; update expression) { loop body } Let’s look at each of the three components that affect how this loop iterates.\nInitial Expression The initial expression is executed once, before any iterations of the loop. It can be any expression, even the empty expression (which contains no code). However, it almost always declares and initializes a variable, known as the loop variable.\nThe loop variable can be initialized to any value.\nExample This loop prints 3…9.\n1 2 3 for (let i = 3; i \u003c 10; i++) { console.log(i); } This loop prints each of the letters C, o, d, and e on a separate line.\n1 2 3 4 5 let name = \"LaunchCode\"; for (let i = 6; i \u003c name.length; i++) { console.log(name[i]); } To avoid confusion and bugs, you should give your loop variable a unique name, one that you have not used elsewhere in your program. In cases where the loop variable is serving as a “counter” for iterations of a loop, it is conventional to use i for the variable name. In the case of nested for loops (loops inside of loops), the variables j, k, etc. are often used.\nNote The loop variable is typically used by the loop body, but this is not required. The following example is a valid for loop that prints \"LaunchCode\" 42 times.\n1 2 3 for (let i = 0; i \u003c 42; i++) { console.log(\"LaunchCode\"); } Loop Condition The loop condition is executed before each loop iteration. It is always a boolean expression, evaluating to true or false. If the condition is true, the loop body executes. If the condition is false, loop execution stops and the program continues with the next line of code below the loop.\nExample This loop does not iterate at all, because its condition is false to start with.\n1 2 3 for (let i = 0; i \u003c -1; i++) { console.log(\"LaunchCode\"); } It is critical that the loop condition eventually becomes false. A loop for which the condition is never false is known as an infinite loop, because it never stops iterating. A program that contains an infinite loop will only stop after running out of memory or being manually stopped (for example, using control+c in a terminal).\nExample This is an infinite loop, because its condition will always be true.\n1 2 3 for (let i = 0; i \u003e -1; i++) { console.log(\"LaunchCode\"); } You will accidentally write an infinite loop at some point; doing so is a rite of passage for new programmers. When this happens, don’t panic. Stop your program and figure out why your loop condition never became false.\nUpdate Expression The final component in a for loop definition is the update expression, which executes after every iteration of the loop. While this expression may be anything, it most often updates the value of the loop variable.\nIn all of the examples we have seen so far, the update expression has been i++, incrementing the loop variable by 1. However, it can update the loop variable in other ways.\nExample This loop prints even integers from 0…50.\n1 2 3 for (let i = 0; i \u003c 51; i = i + 2) { console.log(i); } A bad choice of update expression can also cause an infinite loop.\nExample This loop repeats indefinitely, since i becomes smaller with each iteration and thus is never greater than or equal to 51.\n1 2 3 for (let i = 0; i \u003c 51; i--) { console.log(i); } Example How does each of the three components affect the behavior of a for loop? Open Loop-Variable.js in loops/chapter-examples in javascript-projects. In this file, experiment by modifying each of them in this example: the variable initialization, the boolean condition, and the update expression.\n1 2 3 for (let i = 0; i \u003c 51; i++) { console.log(i); } Check Your Understanding Consider the program:\n1 2 3 4 5 let phrase = \"Chili Cook-off\"; for (let i = 0; i \u003c phrase.length - 1; i = i + 3) { console.log(phrase[i]); } Question How many times does the loop body execute?\n5 6 17 18 Question Which set of characters is printed by the loop? (We have placed characters for the choices below on the same line, but they would be on separate lines in the actual program output.)\n'Chili Cook-off' 'Chili Cook' 'ClCk-f' 'ClCkf' ",
    "description": "",
    "tags": null,
    "title": "Breaking Down the for Statement",
    "uri": "/loops/reading/for-statement-breakdown/index.html"
  },
  {
    "content": "Upon completing everything in this chapter, you are ready to move onto the chapter on classes. If you would like to read more about exceptions before continuing forward, here are some of our favorite resources.\nW3Schools JavaScript Errors mdn web docs_ on Control flow and error handling tutorialspoint errors and exceptions handling geeksforgeeks JavaScript Error and Exceptional Handling with Examples ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/exceptions/next-steps/index.html"
  },
  {
    "content": "Upon completing everything in this chapter, you should go on to the chapter on functions. If you would like to read more about loops before continuing forward, here are some of our favorite resources.\nMDN Web Docs for Loops by W3Schools JavaScript Loops Explained Note The final article is from FreeCodeCamp and includes even more ways for you to write a loop in JavaScript. You do not have to master these to succeed in this course.\n",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/loops/next-steps/index.html"
  },
  {
    "content": "An error type is the classification that JavaScript uses to group errors based on their cause. In future lessons, we will learn that an error type is actually something called a built-in object. For now, understanding the different types of errors will help us become faster at debugging.\nEach error that JavaScript reports has an error type, and the type is included in the error message. For example, an earlier message reported the error type as SyntaxError.\n/Users/chris/dev/sandbox/js/syntax.js:2 console.log(\"Hello, name); ^^^^^^^^^^^^^^ SyntaxError: Invalid or unexpected token at new Script (vm.js:85:7) at createScript (vm.js:266:10) at Object.runInThisContext (vm.js:314:10) at Module._compile (internal/modules/cjs/loader.js:698:28) at Object.Module._extensions..js (internal/modules/cjs/loader.js:749:10) at Module.load (internal/modules/cjs/loader.js:630:32) at tryModuleLoad (internal/modules/cjs/loader.js:570:12) at Function.Module._load (internal/modules/cjs/loader.js:562:3) at Function.Module.runMain (internal/modules/cjs/loader.js:801:12) at internal/main/run_main_module.js:21:11 We have now seen two error types, ReferenceError and SyntaxError. There are several other error types in JavaScript , such as TypeError and RangeError.\nThe following table describes all JavaScript error types. Some of these relate to coding concepts we have not covered yet, but we include them here as a reference for future use.\nError Type Description Example of code triggering the error Example description SyntaxError Occurs when trying to parse syntactically invalid code. console.log(\"hello\"; The call to console.log does not have a required close parenthesis. ReferenceError Occurs when a non-existent variable is used/referenced. let firstName = \"Jack\"; console.log(firstname); The variable firstname does not exist; it is a misspelling of firstName. TypeError Occurs when trying to use a value in an invalid way. 1(); The numeric value 1 is not a function, so trying to use it as one results in TypeError: 1 is not a function. RangeError Occurs when passing an invalid value to a function. let nums = Array(-1); The constructor function Array(n) creates an empty array of length n. It is not possible to create an array with negative length, so the code results in RangeError: Invalid array length. URIError Occurs when improperly using a global URI-handling function. (‘URI’ = Uniform Resource Identifier) decodeURI('%'); The % character is used to encode characters not otherwise allowed in URIs, such as spaces (%20). If an invalid character encoding is given, a URIError results. Error The type from which all other errors are built. It can be used to generate programmer-triggered and programmer-defined errors. throw Error(\"Something bad happened!\"); Manually triggers an error with the given message. Each time you encounter a new error type, take the time to understand what it is, and what JavaScript is trying to tell you. Remember, error messages are your friends!\n",
    "description": "",
    "tags": null,
    "title": "Error Types",
    "uri": "/errors-and-debugging/reading/error-types/index.html"
  },
  {
    "content": "After reading through this chapter, you are ready to start learning about strings! Here are some additional resources on errors and debugging in case you are interested.\nHow to Debug Errors in Your Source Code Cornell Lecture on Debugging ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/errors-and-debugging/next-steps/index.html"
  },
  {
    "content": "After reading through this chapter, you are ready to start learning more on types! Here are some additional resources on scope in case you are interested.\nScope and Closures in JavaScript W3Schools JavaScript Scope GeeksforGeeks - What is Variable Scope in JavaScript ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/scope/next-steps/index.html"
  },
  {
    "content": "After completing this chapter, you are ready to step into the chapter covering HTML. If you want some additional resources on terminal usage, here are some of our favorites:\nLinux Curriculum! - Bash: Intro - This walkthrough provides an overview of Bash and basic commands. Keep in mind that this walkthrough was written with a Linux operating system in mind. With that said you are running git bash for this classroom so a lot of the information still applies.\nMore Linux - File System Commands - similar to the above this walkthrough has a lot of the basic commands that you might use within a Linux file system using Bash.\nWindows PowerShell - As a windows user you may be interested in pursuing more information in regards to powershell. This is the official Microsoft documentation.\nVim Walkthrough - If you have ever heard the term Vim or gotten stick inside of a Vim text editor then this article might be of interest to you!\nW3Schools CLI - W3Schools article covering what the cli is.\ngeeksforgeeks What is Terminal, Console, Shell, and Kernel? - More information from geeksforgeeks covering the terminal, console, shell, and the kernal.\n",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/terminal/next-steps/index.html"
  },
  {
    "content": "As programs get bigger and more complicated, they get more difficult to read. Good programmers try to make their code understandable to others, but it is still tricky to look at a large program and figure out what it is doing and why.\nBest practice encourages us to add notes to our programs, which clearly explain what the program is doing. These notes are called comments.\nA comment is text within a program intended only for a human reader—it is completely ignored by the compiler or interpreter. In JavaScript, the // token starts a comment, and the rest of the line gets ignored. For comments that stretch over multiple lines, the text falls between the symbols /* */.\nExperiment with Comments Note In order to launch Visual Studio Code from the command line as referenced in the section below you will need to install the code command in your PATH. The following articles will help you navigate this process:\nfreecodecame.org article Launch From the command line with macOS Launching Visual Studio Code from your terminal with the command code . will open Visual Studio Code with all files and directories at your current(relative) location.\nYou may also find the following Tips and Tricks section useful.\nOn your own computer, in javascript-projects, locate the how-to-write-code folder. Within that folder, you will find an example called Comments.js. You should use the terminal to do so. Here are the steps:\nUse cd to locate javascript-projects. If your work is in LaunchCode/Unit1, then the command would be cd LaunchCode/Unit1. Run the command, ls, to make sure that you have found javascript-projects. To navigate inside the how-to-write-code folder, use the command cd javascript-projects/how-to-write-code. Open up the required example in Visual Studio Code by running the command, code Comments.js. You are ready to add and remove comments! Here is where the code starts out at:\n1 2 3 4 5 6 7 8 9 10 11 12 // This demo shows off comments! // console.log(\"This does not print.\"); console.log(\"Hello, World!\"); // Comments do not have to start at the beginning of a line. /* Here is how to have multi-line comments. */ console.log(\"Comments make your code more readable by others.\"); Try removing or un-commenting some code first. Then try adding both a single-line and multi-line comment.\nTip Remember to run the program, you should use the command, node comments.\nNotice that when you first run the program, it still prints the phrase Hello, World!, but none of the comments appear. Also notice the blank lines left in the code, which are also ignored by the compiler. Comments and blank lines make your programs much easier for humans to understand. Use them frequently!\n",
    "description": "",
    "tags": null,
    "title": "Comments",
    "uri": "/how-to-write-code/reading/comments/index.html"
  },
  {
    "content": "Next Steps The following articles and links are optional reading or projects that you can explore.\nVisual Studio Code created a short tutorial for working with Node.js/JavaScript and the terminal.\nVisual Studio Code created Introductory Videos is you want more tips on using this IDE.\nCommand Line for Beginners – How to Use the Terminal Like a Pro [Full Handbook] ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/how-programs-work/next-steps/index.html"
  },
  {
    "content": "Before you can start coding, you need to set up your coding tools.\nBe sure to create or install all of the following listed below:\nSetting Up Visual Studio Code For this course, you will be working in a integrated development environment (IDE) called Visual Studio Code.\nThis is where you will write and run your code.\nWe have created a Visual Studio Code installation guide for you to follow.\nSetting Up Your Terminal We will be using the terminal to keep track of our code. You will need to make sure that your terminal is set up.\nThis tool is used for giving commands to your code to run or start. This tool is also used to help track the status of your code as you work on it. We will learn about it more in later chapters.\nWe have created a Terminal installation guide for you to follow.\nSetting Up Node.js Once your terminal has been installed, you will need to install Node.js. This will install the NPM Command Line Interface (CLI), which will allow you to run specialized commands in your terminal.\nYou will use these commands to run, build, and test your JavaScript code as you work through this course.\nWe have created a Node.js installation guide for you to follow.\nSetting Up Git In the terminal, we will be using Git. Git is a version control tool, or a way to track and manage changes in your code. We will explore it more later in this course. In the next section of this chapter, you will learn the basic git commands needed to work with the codebases in this course.\nWe have created a Git installation guide for you to follow.\nCreating Your GitHub Account GitHub is an online software development platform that can store your code and help you track changes in its development using Git. The majority of the code you will use in this course is stored on GitHub. As an online platform, GitHub makes it easy to share code between developers, development teams, and potential employers.\nWe use GitHub to hold all of the starter code for this course in ‘repositories’, or ‘repos’. A repository is just a place to keep code online, where multiple people can see and edit it. Starter code is usually code that is lacking functionality or a complete solution. We often provide stater code for examples, exercises, studios, and graded assignments. You will work on completing the code as you work through this course. You will use GitHub a lot in this course.\nYou will need to sign up for a free account using your email.\nTip Your GitHub account username is something that you may share with other developers. This article can offer you some guidance with deciding on your username.\nNote In order to work with the starter code for this course, you will need to take some extra authentication steps so your computer can securely communicate with GitHub. This will mean either creating a Personal Access Token or SSH key .\nThe Github Personal Access Token will act as a password when you are sending requests to Github. Should you decide to create a personal access token, you will need to enter in your username and password when pushing new code to your repositories.\nShould you choose to create a new ssh-key, you will not need to enter in your Github username or personal access token when sending requests to Github from your computer.\nOnly one of the above methods of authentication is required.\nCreating Your GitHub Personal Access Token (PAT) GitHub has more information on PAT and Managing your personal access tokens .\nTo create your PAT, we suggest following their walkthrough: Creating a personal access token (classic) .\nA few tips when creating your PAT:\nProvide a note about this PAT. This will help you remember what you are using it for. You can set your PAT to never expire. This is not the best practice, but you are able to do it. We suggest using the Custom… option and setting it for a year. When you are asked to Select scopes the only checkbox you should need is the repo box. This is the only scope you will need for this class. Scroll down to the bottom of the page and click the green box to generate your new token. You will see your new token. Be sure to save your PAT somewhere secure, like a password manager and not a word document. You will need to enter it in your terminal in order to access course repositories. You will use it on the next page of this book, so keep it close. Once you have created a new Personal Access Token be sure to read information about how to use a personal access token on the command line Creating Your Github SSH Key As an alternative to interacting with GitHub via HTTPS, developers can use the SSH protocol instead. A description of the differences between HTTPS and SSH is beyond the scope of this text. However, we don’t need to understand the nuts and bolts of SSH. We just need to be able to use it.\nWith an SSH key, you can connect to your GitHub repositories without needing to enter your username and PAT each time you push, pull, or perform some other action. This sounds great! The drawback is that it takes more work to set up.\nAs we mentioned before, this book assumes that you are using the HTTPS protocol. However, the GitHub developers make it easy to use either one. If you would like to explore how to create an SSH key, here are the relevant instructions:\nGeneral info about GitHub and SSH Generate a new SSH key Add the SSH key to your GitHub account Protecting your SSH key Warning For each page, make sure you click on the tab that matches your operating system (Mac, Windows, Linux).\nSounds like you are ready to start coding your first program.\n",
    "description": "",
    "tags": null,
    "title": "Setting Up Your Coding Tools",
    "uri": "/how-programs-work/reading/installs-and-setups/index.html"
  },
  {
    "content": "Running your tests Now that you have your index.html and styles.css completed, it’s time to run the tests.\nIn your terminal, make sure you are inside your project directory then run npm test.\nThe tests are looking for the elements required. If you fail one, look for the message and apply your changes. When they all pass, stage, commit and push your changes to your repository.\nSubmitting your work Once you are done with your site and have passed all of your tests, navigate to the Canvas assignment and paste the link to your repo in the submission box and submit!\n",
    "description": "",
    "tags": null,
    "title": "Task 3: Testing and Submitting Your Project",
    "uri": "/assignments/html-me-something/part-3/index.html"
  },
  {
    "content": "Finally, calculate the candidate’s score and print the results. Look for TODO 3.2. The rest of the steps involve updating code you have written and adding more code.\nDon’t remove anything in the file that you haven’t written. Doing so may cause your program to behave unexpectedly - and we might not be able to grade it!\nYour task here is to:\nCompare the candidate answers with the correct answers,\nCalculate the candidate’s score as a percentage,\nConvey to the candidate if they have passed the quiz with an 80% or if they have failed.\nSome tips:\nChecking for the correct answer should be case insensitive (e.g. “Orbit” is the same as “orbit”).\nTODO 3.2 you should see a variable declaration for grade. Use this to calculate the candidate’s score as a percentage, using this equation:\n(Number of Correct Answers) / (Number of Quiz Questions) * 100\nTesting Task 3 In the terminal run npm test. This will run the autograding tests. The results will display in the terminal.\nTo pass Task 3, you need to pass tests 11-17.\nYou should still pass tests 1-10 from Tasks 1 and 2.\nWhen you pass all 17 tests, push up your work. Your repo should receive a green check mark. Let your TA know you have this checkmark. You need to walk your TA through your code in order to be marked complete.\nCongratulations! You have completed Graded Assignment 1! Great Work!\n",
    "description": "",
    "tags": null,
    "title": "Task 3: Grade the Quiz",
    "uri": "/assignments/candidate-testing/task-3/index.html"
  },
  {
    "content": "Content Links Task 1: Intro and Starter Code Task 2: Command Class Task 3: Message Class Task 4: Rover Class Task 5: Submitting Your Work ",
    "description": "",
    "tags": null,
    "title": "Assignment 3: Mars Rover",
    "uri": "/assignments/mars-rover/index.html"
  },
  {
    "content": "Learning Objectives After completing this chapter you should should understand the various data types covered, how to initialize variables, and use the typeof operator to determine their value. You should also be familiar with operators, operands, and how to receive input from users using readline-sync.\nKey Terminology PEMDAS assignment initialization compund assignment const, constant camel case readline-sync Keywords let const var typeof Values and Data Types String Number Object Variables let var Operators Additon: + Subtraction: - Multiplication: * Division: / Modulus: % Exponentation: ** Increment: ++ Decrement: -- Content Links Reading Exercises: Data and Variables Studio: Goal Setting and Getting into the Right Mindset ",
    "description": "",
    "tags": null,
    "title": "Chapter 4: Data and Variables",
    "uri": "/data-and-variables/index.html"
  },
  {
    "content": "At the beginning of this chapter, we decided that we wanted to be able to write code that only executes when a given condition is true.\nAgain, here is our motivating example:\nExample Consider a banking application that can remind you when a bill is due. The application will notify you that a bill is due soon, but only if the bill has not already been paid.\nWe summarized the condition as follows: Send a notification of an upcoming bill if the statement “the bill is unpaid” is true.\nIn such a program, JavaScript uses booleans to represent the conditional “the bill is unpaid”. Based on the truth of this statement, the program executes or skips the code for notifying the user.\nThe JavaScript construct that enables such behavior is a conditional.\nif Statements The most basic form of a conditional is an if statement. Here’s how to create one in JavaScript:\nLet’s look at each component of this new syntax.\nThe if statement consists of a header line and a body. The header line begins with the keyword if followed by a boolean expression enclosed in parentheses. condition is a boolean expression (an expression that evaluates to either true or false). The statements that follow the condition, within {}, make up a code block. The code within the brackets {} will be executed if the condition evaluates to true. If the condition evaluates to false, the code within the brackets is ignored. Here is an explicit example that mimics our banking program.\nExample let billHasBeenPaid = false; if (!billHasBeenPaid) { console.log(\"Your bill is due soon!\"); } Console Output\nYour bill is due soon! The message prints because billHasBeenPaid is false, so !billHasBeenPaid evaluates to true. If we were to change the value of billHasBeenPaid to be true, then !billHasBeenPaid would evaluate to false and the code block would not execute.\nThe condition in an if statement can be any boolean expression, such as name === 'Jack' or points \u003e 10 (here, name and points are variables). Additionally, the code block associated with a conditional can be of any size. This conditional has a code block with two lines of code:\nExample if (num % 2 === 0 \u0026\u0026 num \u003e 3) { console.log(num, \"is even\"); console.log(num, \"is greater than 3\"); } While not required, the code within a conditional code block is typically indented to make it more readable. Similarly, it is a common convention to place the opening { at the end of the first line, and the closing } on a line of its own following the last line of the code block.\nYou should follow such conventions, even though ignoring them will not create an error. To see why, compare the readability of this example, which is functionally equivalent to the one above.\nif (num % 2 === 0 \u0026\u0026 num \u003e 3) { console.log(num, \"is even\"); console.log(num, \"is greater than 3\"); } Aside from being more aesthetically pleasing, the first version also makes it easier to visually identify the pair of matching curly brackets, which helps prevent syntax errors.\nWarning If the code block associated with a conditional consists of only one line, then the enclosing curly brackets can be omitted.\nHowever, this is NOT a best-practice, as it makes the logic harder to follow.\nif (!billHasBeenPaid) console.log(\"Your bill is due soon!\"); We will use curly brackets for ALL conditional code blocks, and encourage you to do so as well, at least until you become comfortable with reading and writing more complex JavaScript.\nelse Clauses An else clause can be paired with an if statement to specify code that should be executed when the condition is false.\nWe can use an else clause within our bank app to send a message if no bills are currently due.\nExample let billHasBeenPaid = true; if (!billHasBeenPaid) { console.log(\"Your bill is due soon!\"); } else { console.log(\"Your payments are up to date.\"); } Console Output\nYour payments are up to date. This structure is known as an if-else statement, and it provides a mechanism for branching. The flow of the program can take one of two paths when it reaches a conditional, depending on whether the condition is true or false.\nelse if Statements If-else statements allow us to construct two alternative paths. A single condition determines which path will be followed. We can build more complex conditionals using an else if clause. These allow us to add additional conditions and code blocks, which facilitate more complex branching.\nExample let x = 10; let y = 20; if (x \u003e y) { console.log(\"x is greater than y\"); } else if (x \u003c y) { console.log(\"x is less than y\"); } else { console.log(\"x and y are equal\"); } Console Output\nx is less than y Let’s summarize the flow of execution of this conditional:\nLine 4 begins the conditional. The boolean expression x \u003e y evaluates to false, since 10 is not greater than 20. This causes line 5 to be skipped. Line 6 contains an else-if statement. The boolean expression x \u003c y evaluates to true, since 10 is less than 20. This triggers the execution of line 7. The code block associated with the else clause on lines 8-10 is skipped because one of the conditions above was true. As with a simple if statement, the else clause is optional in this context as well. The following example does not print anything, since both conditions evaluate to false and there is no else clause.\nlet x = 10; let y = 10; if (x \u003e y) { console.log(\"x is greater than y\"); } else if (x \u003c y) { console.log(\"x is less than y\"); } We can construct conditionals using if, else if, and else with a lot of flexibility. The only rules are:\nWe may not use else or else if without a preceding if statement. else and else if clauses are optional. Multiple else if statements may follow the if statement, but they must precede the else clause, if one is present. Only one else clause may be used. Regardless of the complexity of a conditional, no more than one of the code blocks will be executed.\nExample let x = 10; let y = 20; if (x \u003e y) { console.log(\"x is greater than y\"); } else if (x \u003c y) { console.log(\"x is less than y\"); } else if (x % 5 === 0) { console.log(\"x is divisible by 5\"); } else if (x % 2 === 0) { console.log(\"x is even\"); } Console Output\nx is less than y Even though both of the conditions x % 5 === 0 and x % 2 === 0 evaluate to true, neither of the associated code blocks is executed. When a condition is satisfied, the rest of the conditional is skipped.\nCheck Your Understanding Question What does the following code print?\nlet a = 7; if (a % 2 === 1) { console.log(\"Launch\"); } else if (a \u003e 5) { console.log(\"Code\"); } else { console.log(\"LaunchCode\"); } \"Launch\" \"Code\" \"Launch\" \"Code\" \"LaunchCode\" ",
    "description": "",
    "tags": null,
    "title": "Conditionals",
    "uri": "/decisions-with-conditionals/reading/conditionals/index.html"
  },
  {
    "content": "Have you ever thought about how programs respond to interactions from users and other programs? Events are code representations of these interactions that need to be responded to.\nIn programming, events are triggered and then handled.\nEvents in programming are triggered and handled. Triggering an event is the act of causing an event to be sent. Handling an event is receiving the event and performing an action in response.\nJavaScript and Events JavaScript is an event-driven programming language. Event-driven is a programming pattern where the flow of the program is determined by a series of events. JavaScript uses events to handle user interaction and make web pages dynamic. JavaScript also uses events to know when the state of the web page components change.\nDOM Events Running JavaScript in the browser requires a specific set of events that relate to loading, styling, and displaying HTML elements. Objects in the DOM have event handling built right into them.\nSome elements, such as a, have default functionality that handles certain events. An example of default event handling is when a user clicks on an \u003ca\u003e tag, the browser will navigate to the address in the href attribute.\nNote The DOM defines numerous events. Each element type does NOT support every event type. The kinds of events that each element supports relate to how the element is used.\nHandling Events Feature-rich web applications rely on more than the default event handling provided by the DOM. We can add custom interactivity with the users by attaching event handlers to HTML elements and then writing the event handler code.\nTo write a handler, you need to tell the browser what to do when a certain event happens. DOM elements use the on event naming convention when declaring event handlers.\nThe first way we will handle events is to declare the event handler in HTML, this is often referred to as an inline event handler. For example, when defining what happens when a button element is clicked, the onclick attribute is used. This naming convention can be read as: On click of the button, print a message to the console.\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eButton click handler\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton onclick=\"console.log('you rang...');\"\u003eRing Bell\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e Console Output (if button is clicked)\nyou rang... Tip Notice the use of single quotes around 'you rang...'. When declaring the value of an attribute to be a string, you must use single quotes ' inside the double quotes \".\nNote button elements represent a clickable entity. button elements have default click handling behavior related to form elements. That we will get into in a later chapter. For now, we will be defining the click handler behavior.\nAny JavaScript function can be used as the event handler. That means any defined functions can be used. Because programmers can write functions to do whatever their hearts desire, defined functions as event handlers allow for more functionality to occur when an event is handled.\nExample A function youRang() is defined and used as the event handler for when the button is clicked.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eButton click handler\u003c/title\u003e \u003cscript\u003e function youRang() { document.getElementById(\"main-text\").innerHTML += \"you rang...\"; console.log(\"you rang...\"); } \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003edemo header\u003c/h1\u003e \u003cp id=\"main-text\" class=\"orange\" style=\"font-weight: bold;\"\u003e a bunch of really valuable text... \u003c/p\u003e \u003cbutton onclick=\"youRang();\"\u003eRing Bell\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e Result (if button is clicked)\neffect on page: adds \"you rang...\" to \u003cp\u003e output in console: you rang... Warning When defining handlers via HTML, be very careful to type the function name correctly. If the function name is incorrect, the event will not be handled. No warning is given, the event is silently ignored.\nCheck Your Understanding Question What does an event represent in the browser JavaScript environment?\nQuestion Why is JavaScript considered an event-driven language?\nQuestion Receiving an event and responding to it is known as?\nHolding an event Having an event Handling an event ",
    "description": "",
    "tags": null,
    "title": "Events",
    "uri": "/dom-and-events/reading/events/index.html"
  },
  {
    "content": "We learned how to pull in useful code in the form of modules, but what if we write clever code that we want to share? Fortunately, Node allows us to make our code available for use in other programs.\nFirst, some basic points:\nEvery Node.js file is treated as a module (also called a package). From a file, we can export a single function or a set of functions. Starter Code We will use the following code sample to practice how to export our work—making it available to import as a module.\nfunction isPalindrome(str){ return str === str.split('').reverse().join(''); } function evenOrOdd(num){ if (num%2===0){ return \"Even\"; } else { return \"Odd\"; } } function randomArrayElement(arr){ let index = Math.floor(Math.random()*arr.length); return arr[index]; } These functions are located in the javascript-projects/modules/exporting-modules/practiceExports.js file, and our goal is to import them into javascript-projects/modules/exporting-modules/index.js file.\nExporting a Single Function Let’s start by exporting the isPalindrome function. At the bottom of the practiceExports.js code, add the line module.exports = isPalindrome;. This makes the function available to other files.\nIn index.js, we import practiceExports.js with a require statement. isPalindrome gets pulled in and assigned to the new variable palindromeCheck, and we can now call the function from within index.js.\nTry it! Add the following code to index.js, then click “Run”.\nconst palindromeCheck = require('./practiceExports.js'); console.log(typeof palindromeCheck); console.log(palindromeCheck('that')); console.log(palindromeCheck('radar')); Console Output\nfunction false true There are several points to make about the code and output.\nAssigning isPalindrome to module.exports allows us to use that function in other files. Even though we require the file practiceExports.js, it only assigns isPalindrome to the variable palindromeCheck. Thus, typeof palindromeCheck returns function. palindromeCheck now behaves in the same way as isPalindrome, so calling palindromeCheck('that') evaluates to false, since 'that' is not a palindrome. Exporting Multiple Functions practiceExports.js contains three functions, and to export all of them we use a different syntax for module.exports. Instead of setting up a single function, we will create an object.\nTo export multiple functions, the syntax is:\nmodule.exports = { isPalindrome: isPalindrome, evenOrOdd: evenOrOdd, randomArrayElement: randomArrayElement } Within the {}, we create a series of key:value pairs. The keys will be the names used in index.js to call the functions. The values are the functions themselves.\nNote We do not have to make the key match the name of the function, but doing so helps maintain consistency between files.\nWarning You might be tempted to use three statements to export the three functions:\nmodule.exports = isPalindrome; module.exports = evenOrOdd; module.exports = randomArrayElement; This will NOT work, because Node expects only ONE module.exports statement in a file. No error will be thrown if you use more than one, but require('./practiceExports.js') will only pull in the information from the LAST statement.\nTry It Use the object syntax as shown above to modify module.exports in practiceExports.js. We could include only one or two of the functions, but for this practice let’s use all of them.\nNext, modify index.js as follows and run your code:\nconst practice = require('./practiceExports.js'); console.log(typeof practice); console.log(practice); typeof indicates that practice is an object, and printing practice gives us a list of its key/value pairs (e.g. isPalindrome: [Function: isPalindrome]).\nAll of the functions from practiceExports are included in the practice object. To call them, we use dot notation— practice.functionName(argument).\nModify index.js again and run your code:\nconst practice = require('./practiceExports.js'); let arr = ['Hello', 'World', 123, 987, 'LC101']; console.log(practice.isPalindrome('mom')); console.log(practice.evenOrOdd(9)); for (i=0; i \u003c 3; i++){ console.log(practice.randomArrayElement(arr)); } Console Output\ntrue Odd 123 World LC101 Success! You exported your first module.\nWhat If You might be wondering, If I have 20+ functions in a file, and I want to export them ALL, do I really need to type 20+ key/value pairs in module.exports?\nThe quick answer is, Yes. require only pulls in items identified in module.exports. The longer answer is, Hmmm, you missed the point.\nJust like functions, we want to keep modules small and specific. Each module should focus on a single idea and contain only a few related functions. With this in mind, we see that practiceExports falls short of the goal. Even though it is small in size, isPalindrome, evenOrOdd, and randomArrayElement do not really compliment each other. They would be better placed in different modules.\nIf you find yourself writing lots of functions in a single file, consider splitting them up into smaller, more detailed modules. Doing this makes debugging easier, organizes your work, and helps you identify which modules to import into a new project. A module titled cleverLC101Work is not nearly as helpful as one called arraySortingMethods.\nCheck Your Understanding Question A module in Node.js is:\nA file containing JavaScript code intended for use in other Node programs. A separate block of code within a program. One line of code in a program. A function. A file that contains documentation about functions in JavaScript. Question Assume you have the following at the end of a circleStuff.js module:\nmodule.exports = { areaOfCircle: areaOfCircle, circumference: circumference, findRadius: findRadius, arcLength: arcLength } Inside your project, you import circleStuff:\nconst circleStuff = require('./circleStuff.js'); Which of the following is the correct way to find the circumference of a circle from within your project?\ncircleStuff(argument) circleStuff.circumference(argument) circleStuff(circumference(argument)) circumference(argument) ",
    "description": "",
    "tags": null,
    "title": "Exporting Modules",
    "uri": "/modules/reading/exporting-modules/index.html"
  },
  {
    "content": "In the introduction to this chapter, we used the metaphor of the function machine , noting that the machine takes input and provides output. This section focuses on the details of these two aspects of function behavior.\nReturn Statements Some functions return values that are useful. In particular, the type conversion functions convert input to the specified data type and return the result—calling Number(\"3.14\") returns the value 3.14.\nReturning a Value To return a value from functions that we create, we can use a return statement. A return statement has the form:\nreturn someVal; where someVal is any value.\nExample This function has a single parameter, n, which is expected to be a positive integer. It returns the sum 1+2+…+n.\nfunction sumToN(n) { let sum = 0; for (let i = 0; i \u003c= n; i++) { sum += i; } return sum; } console.log(sumToN(3)); Console Output\n6 Notice that sumToN does not print anything; the output comes from the final line of the program, which prints the value returned by the function call sumToN(3).\nNow that we have return statements in our coding toolbox, we will very rarely print anything within a function. If we want to see the value returned by a function then we must print it after calling the function.\nQuestion The function sumToN uses a pattern that we have seen previously. What is it called?\nUsing return is Optional As we saw with our initial examples of function definitions, not every function explicitly returns a value. At its simplest, a function can even have an empty body.\nfunction doNothing() {} As written, this function is completely valid, but useless. Although the function doesn’t have a return statement, JavaScript still implicitly returns a value.\nExample A function without a return statement returns the special value undefined.\nfunction doNothing() {} let returnVal = doNothing(); console.log(returnVal); Console Output\nundefined return Terminates Function Execution When a return statement executes, the function terminates, regardless of whether or not there is any code following the return statement. This means that you must be careful to use return only when the work of the function has been completed.\nExample This console.log statement in this function never executes, since the function returns before it is reached.\nfunction pastThePointOfReturn() { return \"I'm done!\"; console.log(\"This will not be printed\"); } console.log(pastThePointOfReturn()); Console Output\nI'm done! We can use the fact that return stops the execution of a function intentionally, to force a function to stop execution.\nExample This function prints out the integers 1…n using an infinite while loop, which nonetheless terminates when the return statement is executed.\nfunction countToN(n) { let count = 1; while (true) { if (count \u003e n) { return; } console.log(count); count++; } } Boolean Functions A function that returns a boolean value is known as a boolean function. Perhaps the simplest such function is one that tests an integer to determine if it is even.\nExample function isEven(n) { if (n % 2 === 0) { return true; } else { return false; } } console.log(isEven(4)); console.log(isEven(7)); Console Output\ntrue false It is conventional to name boolean functions by starting with either is or has, which creates a nice semantic effect when reading the code. For example, reading isEven(4) communicates to the reader that the function should answer the question, “Is 4 even?” This is a convention so widely used by programmers that it extends to nearly every language.\nLet’s return to the isEven function above, to see how we can use the power of return statements to make it even better.\nSince return terminates the function, we can leave out the else clause and have the same effect. This is because if n is even, the return statement in the if block will execute and the function will end. If n is odd, the if block will be skipped and the second return statement will execute.\nfunction isEven(n) { if (n % 2 === 0) { return true; } return false; } This updated version works exactly the same as our initial function.\nAdditionally, notice that the function returns true when n % 2 === 0 returns true, and it returns false when n % 2 === 0 returns false. In other words, the return value is exactly the same as the value of n % 2 === 0. This means that we can simplify the function even further by returning the value of this expression.\nfunction isEven(n) { return n % 2 === 0; } This version of isEven is better than the first two, not because it is shorter (shorter isn’t always better), but because it is simpler to read. We don’t have to break down the conditional logic to see what is being returned.\nMost boolean functions can be written so that they return the value of a boolean expression, rather than explicitly returning true or false.\nParameters and Arguments Over the past few sections, we introduced two function-related concepts that are very similar, and are often confusing to distinguish: arguments and parameters. The difference between the two is subtle, so we will attempt to clear that up now.\nThe easiest way to talk about the difference between arguments and parameters is by referring to an example.\nExample The function hello takes a single value, which we expect to be a person’s name, and returns a message that greets that person.\nfunction hello(name) { return `Hello, ${name}!`; } console.log(hello(\"Lamar\")); Console Output\nHello, Lamar! In this example, name is a parameter. It is part of the function definition, and behaves like a variable that exists only within the function.\nThe value \"Lamar\" that is used when we invoke the function on line 5 is an argument. It is a specific value that is used during the function call.\nThe difference between a parameter and an argument is the same as that between a variable and a value. A variable refers to a specific value, just like a parameter refers to a specific argument when a function is called. Like a value, an argument is a concrete piece of data.\nArguments Are Optional A function may be defined with several parameters, or with no parameters at all. Even if a function is defined with parameters, JavaScript will not complain if the function is called without specifying the value of each parameter.\nExample function hello(name) { return `Hello, ${name}!`; } console.log(hello()); Console Output\nHello, undefined! We defined hello to have one parameter, name. When calling it, however, we did not provide any arguments. Regardless, the program ran without error.\nArguments are optional when calling a function. When a function is called without specifying a full set of arguments, any parameters that are left without values will have the value undefined.\nIf your function will not work properly without one or more of its parameters defined, then you should define a default value for these parameters. The default value can be provided next to the parameter name, after =.\nExample This example modifies the hello function to use a default value for name. If name is not defined when hello is called, it will use the default value.\nfunction hello(name = \"World\") { return `Hello, ${name}!`; } console.log(hello()); console.log(hello(\"Lamar\")); Console Output\nHello, World! Hello, Lamar! While this may seem new, we have already seen a function that allows for some arguments to be omitted—the string method slice.\nExample The string method slice allows the second argument to be left off. When this happens, the method behaves as if the value of the second argument is the length of the string.\n// returns \"Launch\" \"LaunchCode\".slice(0, 6); // returns \"Code\" \"LaunchCode\".slice(6); // also returns \"Code\" \"LaunchCode\".slice(6, 10); Just as it is possible to call a function with fewer arguments than it has parameters, we can also call a function with more arguments than it has parameters. In this case, such parameters are not available as a named variable.\nExample This example calls hello with two arguments, even though it is defined with only one parameter.\nfunction hello(name = \"World\") { return `Hello, ${name}!`; } console.log(hello(\"Jim\", \"McKelvey\")); Console Output\nHello, Jim! Fun Fact These “extra” arguments can still be accessed using a special object named arguments, which is made available to every function. If you are curious, read more at MDN . However, we will not need to use this advanced JavaScript feature in this course.\nCheck Your Understanding Question What does the following code output?\nfunction plusTwo(num) { return num + 2; } let a = 2; for (let i=0; i \u003c 4; i++) { a = plusTwo(a); } console.log(a); Question What does the following function return?\nfunction repeater(str) { let repeated = str + str; console.log(repeated); } repeater('Bob'); \"BobBob\" Nothing (no return value) undefined The value of Bob Question What does the following code output?\nfunction repeater(str) { let repeated = str + str; console.log(repeated); } repeater('Bob'); \"BobBob\" Nothing (no output) undefined The value of Bob ",
    "description": "",
    "tags": null,
    "title": "Function Input and Output",
    "uri": "/functions/reading/input-output/index.html"
  },
  {
    "content": "The previous section covered creating, evaluating, and reassigning variables. This section will cover some additional, more nuanced topics related to variables.\nCreating Constants With const One of the key features of variables that we have discussed so far is their ability to change value. We can create a variable with one value, and then reassign it to another value.\nlet programmingLanguage = \"JavaScript\"; programmingLanguage = \"Python\"; In some situations, we want to create variables that cannot change value. Many programming languages, including JavaScript, provide mechanisms for programmers to make variables that are constant.\nFor example, suppose that we are writing a to-do list web application, named “Get It Done!” The title of the application might appear in multiple places, such as the title bar and the main page header.\nWe might store the name of our application in a variable so that it can be referenced anywhere we want to display the application name.\nlet appName = \"Get It Done!\"; This allows us to simply refer to the appName variable any time we want to use it throughout our application. If we change the name of the application, we only have to change one line of code, where the appName variable is initialized.\nOne problem with this approach is that an unwitting programmer might change the value of appName later in the code, leading to inconsistent references to the application name. In other words, the title bar and main page header could reference different names.\nUsing const rather than let to create a variable ensures that the value of the declared variable cannot be changed.\nconst appName = \"Get It Done!\"; Such an unchangeable variable is known as a constant, since its value is just that.\nHow does JavaScript prevent a programmer from changing the value of a constant? Let’s find out. Try running the following code in an editor. What happens?\nExample const appName = \"Get It Done\"; appName = \"Best TODO application Ever!\"; Console Output\nTypeError: Assignment to constant variable. As we’ve seen with other examples—such as trying to declare a variable twice, using incorrect syntax, or failing to enclose strings in quotes, JavaScript prevents undesired code from executing by throwing an error.\nNaming Variables Valid Variable Names As you may have discovered already, not just any sequence of characters is a valid variable name. For example, if we try to declare a variable with a name containing a space, JavaScript complains.\nExample let application name; Console Output\nSyntaxError: Unexpected identifier In this case, “identifier” is another term for variable name, so the error message is saying that the variable name is not valid, or is “unexpected”.\nJavaScript provides a broad set of rules for naming variables, but there is no reason to go beyond a few easy-to-remember guidelines:\nUse only the characters 0-9, a-z, A-Z, and underscore. In other words, do not use special characters or whitespace (space, tab, and so on). Do not start a variable name with a number. Avoid starting a variable name with an underscore. Doing so is a convention used by some JavaScript developers to mean something very specific about the variable, and should be avoided. Do not use keywords, which are words reserved by JavaScript for use by the language itself. We’ll discuss these in detail in a moment. Following these guidelines will prevent you from creating illegal variable names. While this is important, we should also strive to create good variable names.\nGood Variable Names Writing good code is about more than writing code that simply works and accomplishes the task at-hand. It is also about writing code that can be read, updated, and maintained as easily as possible. How to write code that achieves these goals is a theme we will return to again and again.\nOne of the primary ways that code can be written poorly is by using bad variable names. For example, consider the following program. While we haven’t introduced each of the components used here, you should be able to come to a general understanding of the new components.\nlet x = 5; const y = 3.14; let z = y * x ** 2; console.log(z); Understanding what this program is trying to do is not obvious, to say the least. The main problem is that the variable names x, y, and z are not descriptive. They don’t tell us anything about what they represent, or how they will be used.\nVariable names should be descriptive, providing context about the data they contain and how they will be used.\nLet’s look at an improved version of this program.\nlet radiusOfCircle = 5; const pi = 3.14; let areaOfCircle = pi * radiusOfCircle ** 2; console.log(areaOfCircle); With improved variable names, it now becomes clear that the program is calculating the area of a circle of radius 5.\nTip When considering program readability, think about whether or not your code will make sense to another programmer. It is not enough for code to be readable by only the programmer that originally wrote it.\nCamel Case Variable Names There is one more aspect of naming variables that you should be aware of, and that is conventions used by professional programmers. Conventions are not formal rules, but are informal practices adopted by a group.\nExample In the United States, it is common for two people to greet each other with a handshake. In other countries and cultures, such as some in east Asia, the conventional greeting is to bow.\nFailing to follow a social convention is not a violation of the law, but is considered impolite nonetheless. It is a signal that you are not part of the group, or do not respect its norms.\nThere are a variety of types of conventions used by different groups of programmers. One common type of convention is that programmers that specialize in a specific language will adopt certain variable naming practices.\nIn JavaScript, most programmers use the camel case style, which stipulates that variable names consist of names or phrases that:\nare joined together to omit spaces, start with a lowercase letter, and capitalize each internal word. In the example from the previous section, the descriptor “area of circle” became the variable name areaOfCircle. This convention is called camel case because the capitalization of internal words is reminiscent of a camel’s humps. Another common name for this convention is lower camel case, since names start with a lowercase letter.\nNote Different programming languages often have different variable-naming conventions. For example, in Python the convention is to use all lowercase letters and separate words with underscores, as in area_of_circle.\nWe will use the lower camel case convention throughout this course, and strongly encourage you to do so as well.\nKeywords Our last note on naming variables has to do with a collection of words that are reserved for use by the JavaScript language itself. Such words are called keywords, or reserved words.\nAny word that is formally part of the JavaScript language syntax is a keyword. So far, we have seen only four keywords: let, const, var, and typeof.\nWarning While console and console.log may seem like keywords, they are actually slightly different things. They are entities (an object and a function, respectively) that are available by default in most JavaScript environments.\nAttempting to use a keyword for anything other than it’s intended use will result in an error. To see this, let’s try to name a variable const.\nExample let const; Console Output\nlet const ^^^^^ SyntaxError: Unexpected token const Tip Most code editors will highlight keywords in a different color than variables or other parts of your code. This serves as a visual cue that a given word is a keyword, and can help prevent mistakes.\nWe will not provide the full list of keywords at this time, but rather point them out as we learn about each of them. If you are curious, the full list is available at MDN .\nCheck Your Understanding Question Which is the best keyword for declaring a variable in most situations?\nvar let const (no keyword) ",
    "description": "",
    "tags": null,
    "title": "More on Variables",
    "uri": "/data-and-variables/reading/more-on-variables/index.html"
  },
  {
    "content": "Earlier we learned that arrays can store any type of value. If that is true, can we store arrays inside of arrays? Well yes we can….\nA multi-dimensional array is an array of arrays, meaning that the values inside the array are also arrays. The inner arrays can store other values such as strings, numbers, or even more arrays.\nThe figure below demonstrates a synonyms array that has arrays as values. The inner arrays contain words that are synonyms of each other. Notice each inner array has an index position.\nTwo Dimensional Arrays The simplest form of a multi-dimensional array is a two dimensional array. A two dimensional array is like a spreadsheet with rows and columns. To access items in a two dimensional array, use square bracket notation and two indexes array[0][0]. The first index is for the outer array, or the “row”, and second index is for the inner array, or the “column”.\nNote The row and column analogy is used to help visualize a two dimensional array, however it’s not a perfect analogy. There are no specific JavaScript language rules forcing the inner arrays to all have the same length. The inner arrays are separate arrays that can be of different length.\nExample Use a two dimensional array to contain three different lists of space shuttle crews.\nlet shuttleCrews = [ ['Robert Gibson', 'Mark Lee', 'Mae Jemison'], ['Kent Rominger', 'Ellen Ochoa', 'Bernard Harris'], ['Eilen Collins', 'Winston Scott', 'Catherin Coleman'] ]; console.log(shuttleCrews[0][2]); console.log(shuttleCrews[1][1]); console.log(shuttleCrews[2][1]); Console Output\nMae Jemison Ellen Ochoa Winston Scott Multi-Dimensions and Array Methods In a multi-dimensional array, both the inner and outer arrays can be altered with array methods. However, bracket notation must be used correctly.\nTo apply a method to the outer array, the syntax is:\nmultiArrayName.method(); To apply a method to one of the inner arrays, the syntax is:\nmultiArrayName[indexOfInnerArray].method(); Example Use array methods to add an additional crew array and alter existing arrays.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let shuttleCrews = [ ['Robert Gibson', 'Mark Lee', 'Mae Jemison'], ['Kent Rominger', 'Ellen Ochoa', 'Bernard Harris'], ['Eilen Collins', 'Winston Scott', 'Catherin Coleman'] ]; let newCrew = ['Mark Polansky', 'Robert Curbeam', 'Joan Higginbotham']; // Add a new crew array to the end of shuttleCrews shuttleCrews.push(newCrew); console.log(shuttleCrews[3][2]); // Reverse the order of the crew at index 1 shuttleCrews[1].reverse(); console.log(shuttleCrews[1]); Console Output\nJoan Higginbotham [ 'Bernard Harris', 'Ellen Ochoa', 'Kent Rominger' ] Beyond Two Dimensional Arrays Generally, there is no limit to how many dimensions you can have when creating arrays. However it is rare that you will use more than two dimensions. Later on in the class we will learn about more collection types that can handle complex problems beyond the scope of two dimensional arrays.\nCheck Your Understanding Question What are the two dimensional indexes for \"Jones\"?\nlet school = [ [\"science\", \"computer\", \"art\"], [\"Jones\", \"Willoughby\", \"Rhodes\"] ]; How would you add \"dance\" to the array at school[0]?\nHow would you add \"Holmes\" to the array at school[1]?\n",
    "description": "",
    "tags": null,
    "title": "Multi-Dimensional Arrays",
    "uri": "/arrays/reading/multi-dimensional-arrays/index.html"
  },
  {
    "content": "Now that you have completed The DOM and Events chapter you are ready to learn about HTTP!. If you would like some additional resources on the DOM in JavaScript, here are a few of our favorites.\nDigitalOcean: Understanding the DOM W3Schools HTML DOM mdn web docs_ Introduction to the DOM geeksforgeeks DOM ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/dom-and-events/next-steps/index.html"
  },
  {
    "content": "Now that you have completed the chapter on Fetch you are ready to learn about The Modern JavaScript Landscape!. If you would like some additional resources on fetching data in JavaScript, here are a few of our favorites.\nmdn web docs_ Using the Fetch API DigitalOcean: How To Use the JavaScript Fetch API to Get Data W3Schools JavaScript Fetch API ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/fetch/next-steps/index.html"
  },
  {
    "content": "In this chapter, we showed how to use require to pull a module into your project, and we presented two ways to use module.exports. Of course, these are not the only ways to share content.\nA quick search online shows that besides functions, we can also share individual variables. There are also alternative syntaxes for module.exports - even one that exports as an object, but imports as a function (which means no dot notation).\nThe skills you practiced in this chapter provide a solid foundation for modules. Learning the alternatives becomes a matter of personal preference and the requirements for your job.\nIf you would like to further explore content related to modules please view the following resources:\nmdn web docs on JavaScript Modules freecodecamp on JavaScript Modules geeksforgeeks on JavaScript Modules ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/modules/next-steps/index.html"
  },
  {
    "content": "Upon completing everything in this chapter, you are ready to move onto the chapter on git. If you would like to read more about css before continuing forward, here are some of our favorite resources.\nW3Schools CSS Tutorial mdn web docs CSS: Cascading Style Sheets tutorialspoint CSS Tutorial ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/styling-css/next-steps/index.html"
  },
  {
    "content": "Upon completing everything in this chapter, you are ready to move onto the chapter on JSON. If you would like to read more about forms before continuing forward, here are some of our favorite resources.\nW3Schools HTML Forms geeksforgeeks HTML Forms tutorialspoint HTML - Forms mdn web docs_ Web Forms - Working with user data ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/user-input-with-forms/next-steps/index.html"
  },
  {
    "content": "The previous section illustrates how a function can be passed to another function as an argument. This section takes the opposite perspective to write functions that can take other functions as arguments.\nExample: A Generic Input Validator Our first example will be a generic input validator. It asks the user for some input, using the prompt parameter for the text of the question. A second parameter receives a function that does the actual work of validating the input.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const input = require('readline-sync'); function getValidInput(prompt, isValid) { // Prompt the user, using the prompt string that was passed let userInput = input.question(prompt); // Call the boolean function isValid to check the input while (!isValid(userInput)) { console.log(\"Invalid input. Try again.\"); userInput = input.question(prompt); } return userInput; } // A boolean function for validating input let isEven = function(n) { return Number(n) % 2 === 0; }; console.log(getValidInput('Enter an even number:', isEven)); Sample Output\nEnter an even number: 3 Invalid input. Try again. Enter an even number: 5 Invalid input. Try again. Enter an even number: 4 4 When we call getValidInput on line 22, we pass it the string 'Enter an even number:', which gets assigned to the prompt parameter.\nNotice that we also pass in the function isEven (with no arguments). This gets assigned to the isValid parameter.\nThe function getValidInput handles the work of interacting with the user, while allowing the validation logic to be customized. This separates the different concerns of validation and user interaction, sticking to the idea that a function should do only one thing. It also enables more reusable code. If we need to get different input from the user, we can simply call getValidInput with different arguments.\nExample This example uses the same getValidInput function defined above with a different prompt and validator function. In this case, we check that a potential password has at least 8 characters.\nconst input = require('readline-sync'); function getValidInput(prompt, isValid) { let userInput = input.question(prompt); while (!isValid(userInput)) { console.log(\"Invalid input. Try again.\"); userInput = input.question(prompt); } return userInput; } let isValidPassword = function(password) { // Passwords should have at least 8 characters if (password.length \u003c 8) { return false; } return true; }; console.log(getValidInput('Create a password:', isValidPassword)); Sample Output\nCreate a password: launch Invalid input. Try again. Create a password: code Invalid input. Try again. Create a password: launchcode launchcode Try It! Use our getValidInput function to ensure user input starts with “a”. Create another validator that ensures user input is a vowel. You can find the above function in the getValidInput.js file within your javascript-projects repository!\nExample: A Logger Another common example of a function using another function to customize its behavior is that of logging. Real-world applications are capable of logging messages such as errors, warnings, and statuses. Such applications allow for log messages to be sent to one or more destinations. For example, the application may log messages to both the console and to a file.\nWe can write a logging function that relies on a function parameter to determine the logging destination.\nA Simple Logger Example The logError function outputs a standardized error message to a location determined by the parameter logger.\n1 2 3 4 5 6 7 8 9 10 11 12 let fileLogger = function(msg) { // Put the message in a file } function logError(msg, logger) { let errorMsg = 'ERROR: ' + msg; logger(errorMsg); } logError('Something broke!', fileLogger); Let’s examine this example in more detail.\nThere are three main program components:\nLines 1-5 define fileLogger, which takes a string argument, msg. We have not discussed writing to a file, but Node.js is capable of doing so. Lines 7-10 define logError. The first parameter is the message to be logged. The second parameter is the logging function that will do the work of sending the message somewhere. logError doesn’t know the details of how the message will be logged. It simply formats the message, and calls logger. Line 12 logs an error using the fileLogger. This is the flow of execution:\nlogError is called, with a message and the logging function fileLogger passed as arguments. logError runs, passing the constructed message to logger, which refers to fileLogger. fileLogger executes, sending the message to a file. A More Complex Logger This example can be made even more powerful by enabling multiple loggers.\nExample The call to logError will log the message to both the console and a file.\nlet fileLogger = function(msg) { // Put the message in a file } let consoleLogger = function(msg) { console.log(msg); } function logError(msg, loggers) { let errorMsg = 'ERROR: ' + msg; for (let i = 0; i \u003c loggers.length; i++) { loggers[i](errorMsg); } } logError('Something broke!', [fileLogger, consoleLogger]); The main change to the program is that logError now accepts an array of functions. It loops through the array, calling each logger with the message string.\nAs with the validation example, these programs separate behaviors in a way that makes the code more flexible. To add or remove a logging destination, we can simply change the way that we call logError. The code inside logError doesn’t know how each logging function does its job. It is concerned only with creating the message string and passing it to the logger(s).\nA Word of Caution What happens if a function expects an argument to be a function, but it isn’t?\nTry It! function callMe(func) { func(); } callMe(\"Al\"); Question What type of error occurs when attempting to use a value that is NOT a function as if it were one?\n",
    "description": "",
    "tags": null,
    "title": "Receiving Functions as Arguments",
    "uri": "/more-on-functions/reading/receive-function-as-arguments/index.html"
  },
  {
    "content": "Quickly navigating through our filesystems is just one benefit of using the terminal for programmers. We can also quickly run our code inside of the terminal to see the outputs.\nThe commands used to run a program in the terminal vary widely based on type of program you want to run. However, no matter what language you are coding in, the documentation will include, in some format, ways to run the program in the terminal.\nExample So far, in this class, we have been running our programs by typing node \u003cfile-name\u003e into our terminal.\nLet’s say there is an error in our program like an infinite loop. How then do we get it to stop running so we can go back and fix our code?\nIn many cases, typing ctrl+c into the terminal will stop a process that is currently running. However, if that doesn’t work, the exit command can also stop a currently running process.\nCLI Specific Programs and Tools npm CLI There is existing documentation on the npm CLI that you can view here: npm CLI There are also many other programs and software designed to run within the terminal or cli specifically. Below is a fun example.\nNeofetch is a CLI tool designed to display information about your system. It provides a logo of your operating system in addition to other hardware specifications.\n",
    "description": "",
    "tags": null,
    "title": "Running Programs in the Terminal",
    "uri": "/terminal/reading/running-programs/index.html"
  },
  {
    "content": "If an object cannot be changed, we say that it is immutable. Strings are immutable, which means we cannot change the individual characters within a given string. While we can access individual characters using bracket notation, attempting to change individual characters simply does not work.\nExample 1 2 3 4 5 let nonprofit = \"Launchcode\"; console.log(nonprofit); nonprofit[6] = \"C\"; console.log(nonprofit); Console Output\nLaunchcode Launchcode We attempted to change the value of the character at index 6 from 'c' to 'C', by using an assignment statement along with bracket notation on line 4 (perhaps to align with official LaunchCode branding guidelines). However, this change clearly did not take place. In many programming languages strings are immutable, and while trying to change a string in some languages results in an error, JavaScript simply ignores our request to alter a string.\nIt is important to notice that immutability applies to string values and not string variables.\nExample We can set a variable containing a string to a different value.\nlet nonprofit = \"Launchcode\"; nonprofit = \"LaunchCode\"; console.log(nonprofit); Console Output\nLaunchCode In this example, the change made on line 2 is carried out. The difference between this example and the one above is that here we are modifying the value that the variable is storing, and not the string itself. Using our visual analogy of a variable as a label that “points at” a value, the second example has the following effect:\nWhen the value of a variable storing a string is changed, the variable then points to a new value, with the old value remaining unchanged.\nCheck Your Understanding Question Given pet = 'cat', why do the statements console.log(pet + 's'); and pet += 's'; NOT violate the immutability of strings?\n",
    "description": "",
    "tags": null,
    "title": "String Immutability",
    "uri": "/stringing-characters-together/reading/string-immutability/index.html"
  },
  {
    "content": "With the Message Class section completed, let’s turn our attention to the final class, the Rover class.\nRover Rover receives a message object, updates its properties from the message, and returns the results. Remember to use TDD by first reading the class description, writing tests, and then coding the class.\nRover Class Description This class builds a rover object with a few properties, and it also contains a function outside of constructor to handle updates to its properties.\nconstructor(position)\nposition is a number representing the rover’s position. Sets this.position to position Sets this.mode to 'NORMAL' Sets the default value for generatorWatts to 110 receiveMessage(message)\nmessage is a Message object Returns an object containing at least two properties: message: the name of the original Message object results: an array of results. Each element in the array is an object that corresponds to one Command in message.commands. Updates certain properties of the rover object Details about how to respond to different commands are in the Command Types table . Example let commands = [new Command('MODE_CHANGE', 'LOW_POWER'), new Command('STATUS_CHECK')]; let message = new Message('Test message with two commands', commands); let rover = new Rover(98382); // Passes 98382 as the rover's position. let response = rover.receiveMessage(message); console.log(response); Output\n{ message: 'Test message with two commands', results: [ { completed: true }, { completed: true, roverStatus: { mode: 'LOW_POWER', generatorWatts: 110, position: 98382 } } ] } Rover Tests Within the spec/rover.spec.js file, write the tests below. Make sure to write the code to make them pass in rover.js. Remember to use the given phrase as the test description.\nTest 7\n“constructor sets position and default values for mode and generatorWatts”. Refer to the Rover Class description above for these default values.\nTest 8\n“response returned by receiveMessage contains the name of the message”\nTest 9\n“response returned by receiveMessage includes two results if two commands are sent in the message”\nTest 10\n“responds correctly to the status check command”\nFor the STATUS_CHECK command, receiveMessage(message).results includes a roverStatus object describing the current state of the rover object — mode, generatorWatts, and position. The test should check each of these for accuracy. See the Rover Command Types table for more details. Test 11\n“responds correctly to the mode change command”\nThe test should check the completed property and rover mode for accuracy. The rover has two modes that can be passed as values to a mode change command: ‘LOW_POWER’ and ‘NORMAL’. Test 12\n“responds with a false completed value when attempting to move in LOW_POWER mode”\nThe test should check the completed property for accuracy and confirm that the rover’s position did not change. Use the Rover Modes table for guidance on how to handle move commands in different modes. Test 13\n“responds with the position for the move command”\nA MOVE command will update the rover’s position with the position value in the command. Rover Command Types Command Value sent with command Updates to Rover object Result returned MOVE Number representing the position the rover should move to. position {completed: true} STATUS_CHECK No values sent with this command. No updates {completed: true, roverStatus: {mode: 'NORMAL', generatorWatts: 110, position: 87382098}} (Values for mode, generatorWatts, position will depend on the current state of the rover.) MODE_CHANGE String representing rover mode (see modes) mode {completed: true} Note:\nNote The response value for completed will be false if the command could NOT be completed.\nRover Modes Mode Restrictions LOW_POWER Can’t be moved in this state. NORMAL None Once your Rover class is complete, make sure to Submit Your Work .\n",
    "description": "",
    "tags": null,
    "title": "Task 4: Rover Class",
    "uri": "/assignments/mars-rover/rover-class/index.html"
  },
  {
    "content": " Write the rest of the transform() function. It will need to take an object as a parameter - specifically the oldPointStructure object. Calling transform(oldPointStructure) will return an object with lowercase letters as keys. The value for each key will be the points assigned to that letter.\nTip Recall that for...in loops iterate over the keys within an object.\nIf you need a reminder of how to assign new key/value pairs, review the relevant section in the Objects and Math chapter.\nTo access the letter arrays within oldPointStructure, use bracket notation (oldPointStructure[key]).\nTo access a particular element within a letter array, add a second set of brackets (oldPointStructure[key][index]), or assign the array to a variable and use variableName[index].\n1 2 3 4 5 6 console.log(\"Letters with score '4':\", oldPointStructure[4]); console.log(\"3rd letter within the key '4' array:\", oldPointStructure[4][2]); let letters = oldPointStructure[8]; console.log(\"Letters with score '8':\", letters); console.log(\"2nd letter within the key '8' array:\", letters[1]); Console Output\nLetters with score '4': [ 'F', 'H', 'V', 'W', 'Y' ] 3rd letter within the key '4' array: V Letters with score '8': [ 'J', 'X' ] 2nd letter within the key '8' array: X Locate the newPointStructure object in the starter code and set it equal to transform(oldPointStructure).\nWarning Hard-coding the newPointStructure object literal like this:\nlet newPointStructure = { a:1, b: 1, c: 1, etc ... } won’t pass. And you’ll lose an opportunity to practice this skill.\nOnce you’ve defined newPointStructure, use it to finish writing the scrabbleScorer() function and then replace the oldScrabbleScorer() function in scoringAlgorithms with this new function.\nTip oldScrabbleScorer() uses oldPointStructure and returns a score for each letter in a word. You’ll want to write scrabbleScorer() to use newPointStructure and return a cumulative score for the whole word entered.\n",
    "description": "",
    "tags": null,
    "title": "Task 4: Transform the Object",
    "uri": "/assignments/scrabble-scorer/object-transform/index.html"
  },
  {
    "content": "As you know from interacting with web forms, it’s possible to use more than simple text inputs. There are additional input types, each with different uses. Many of the elements are \u003cinput\u003e tags with a different type value, however some have entirely different tag names. The next few sections contain lists of input types.\nTo start, here are three types of text inputs. These input types can contain text of any value.\nType Syntax Description Demo text \u003cinput type=\"text\" name=\"username\"/\u003e A single line text field. textarea \u003ctextarea name=\"missionDescription\"\u003e\u003c/textarea\u003e A larger, multi-line text box. Must have open and closing tags. password \u003cinput type=\"password\" name=\"passCode\"/\u003e A text field that obscures the text typed by the user. Note Form inputs will NOT look exactly the same in all browsers. However, the inputs should function the same way. Use caniuse.com , if there is ever a question of browser support for a certain feature.\nExample \u003cform action=\"https://handlers.education.launchcode.org/request-parrot\" method=\"post\"\u003e \u003clabel\u003eCode Name\u003cinput type=\"text\" name=\"codeName\"/\u003e\u003c/label\u003e \u003clabel\u003eCode Word\u003cinput type=\"password\" name=\"codeWord\"/\u003e\u003c/label\u003e \u003c!-- textarea must have open and closing tags --\u003e \u003clabel\u003eMission Description\u003cbr/\u003e \u003ctextarea name=\"description\" rows=\"5\" cols=\"75\"\u003e\u003c/textarea\u003e \u003c/label\u003e \u003cbutton\u003eSend Report\u003c/button\u003e \u003c/form\u003e Submitted Values\ncodeName=Captain+Danvers codeWord=avengers! description=Test+flight.+Plane+maintenance.+Superhero+stuff. Notice that the textarea value does NOT include new lines, even though it was typed that way. Check Your Understanding Question Which input type should be used if the user is going to enter a large amount of text?\n",
    "description": "",
    "tags": null,
    "title": "Text Inputs",
    "uri": "/user-input-with-forms/reading/text-inputs/index.html"
  },
  {
    "content": "In this step, you will create the following: A variable to manage the state of our project A variable to hold the unique values of the orbitType property of the satellite objects A function that will filter through the satellites. These variables and this function will be used by the Buttons and Table components.\nInside the App.jsx file Open the App.jsx file.\nImport useState from \"react\".\nImport satData.jsx as satData.\nInside the App() function create the first variable.\n7 8 9 function App() { const [sat, setSat] = useState(satData); // code continues ... This array holds two variables: sat and setSat. sat will be used to compare changes in state. setSat is a function that will be used to update the state. We set this array equal to the useState function. useState is passed satData. You will use these in the other components.\nNext, create the second variable, called displaySats.\n7 8 9 10 function App() { const [sat, setSat] = useState(satData); const displaySats = [...new Set(satData.map((data) =\u003e data.orbitType))]; // code continues ... This variable will use the Set method to create a new array that holds unique elements. This function will be used to create the buttons, so we want to pull out the orbitType values of each object inside satData. The Set method prevents duplicate elements. We are using it because there are only three types of orbitTypes: Low, Medium, and High. This will eventually create three buttons. If we only used map, we would create 10 buttons, and many of them would be duplicates.\nNext, create an arrow function called filterByType.\nThis function will take a parameter that you can call currentType. Inside this function, you will update the displaySats variable using the filter method . filter is similar to map, in that it will iterate through a collection until it finds the desired element. filter requires a callback, call the callback newSatDisplay. The filter function will return the newSatDisplay.orbitType that is equal to currentType. Close the filter function’s return statement. Before closing the arrow function, we want to update setSat by passing it the newly updated displaySats. 11 12 13 14 15 16 const filterByType = (currentType) =\u003e { const displaySats = satData.filter((newSatDisplay) =\u003e { return newSatDisplay.orbitType === currentType; }); setSat(displaySats); }; Before we leave the App() function, we need to provide props for the Buttons and Table components.\n11 12 13 14 15 16 17 18 19 \u003c\u003e \u003cBanner /\u003e \u003cButtons filterByType={filterByType} setSat={setSat} displaySats={displaySats} /\u003e \u003cTable sat={sat} /\u003e \u003c/\u003e Next ",
    "description": "",
    "tags": null,
    "title": "Task 3: Update App.jsx",
    "uri": "/assignments/orbit-report/update-app/index.html"
  },
  {
    "content": " Working with JSON What is the Arrow Function in ReactJS? React Basics: What’s the difference between JavaScript and JSX? React Props Explained with Examples A Beginner’s Guide to Loops in React JSX Using map() in JavaScript and React.js Using a condition inside map() in React ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/react-part-2/next-steps/index.html"
  },
  {
    "content": "Now that we can handle events with React, let’s talk about forms. When a form is submitted, the page reloads and the data is sent off to where it needs to go. In React, while form submission requires resetting the state back to the initial state, we can also experiment with changing the state.\nLet’s return to manufacturing. Since the shoe factory is having so many issues today, you have been asked to submit a full report online about what is happening. You want to make sure that the text you are entering into the form is accurate and grammatically correct. To be honest, we all can have a hard time editing the text in those text fields. So you add a preview section to the application so the user can review what they have entered and easily edit their work before submitting.\nOpen up the application we were working on in the last section.\nCreate a new file in the components directory called Report.jsx.\nSet up the initial form with one text area input box.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { useState } from 'react'; export default function ReportForm() { return( \u003cdiv\u003e \u003cform\u003e \u003clabel\u003eAdd your report here: \u003cinput type=\"textarea\" /\u003e \u003c/label\u003e \u003cinput type=\"submit\" /\u003e \u003c/form\u003e \u003cp\u003ePreview: \u003c/p\u003e \u003c/div\u003e); } Now we can add one state variable called notes and start adding more functionality to our form!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { useState } from 'react'; export default function ReportForm() { const [notes, setNotes] = useState(\"\"); return( \u003cdiv\u003e \u003cform\u003e \u003clabel\u003eAdd your report here: \u003cinput type=\"textarea\" value={notes} onChange={handleChange}/\u003e \u003c/label\u003e \u003cinput type=\"submit\" /\u003e \u003c/form\u003e \u003cp\u003ePreview: {notes}\u003c/p\u003e \u003c/div\u003e); } We have added a new event handler called handleChange() to our form, but we haven’t actually defined what handleChange() is yet.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import { useState } from 'react'; export default function ReportForm() { const [notes, setNotes] = useState(\"\"); const handleChange = (event) =\u003e { setNotes(event.target.value); } return( \u003cdiv\u003e \u003cform\u003e \u003clabel\u003eAdd your report here: \u003cinput type=\"textarea\" value={notes} onChange={handleChange}/\u003e \u003c/label\u003e \u003cinput type=\"submit\" /\u003e \u003c/form\u003e \u003cp\u003ePreview: {notes}\u003c/p\u003e \u003c/div\u003e); } Now when a user types text into the form field, the state of the component is continually changed and the words the user types appear in the \u003cp\u003e element.\nTime to handle submission! We are going to set up a second event handler for this.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import { useState } from 'react'; export default function ReportForm() { const [notes, setNotes] = useState(\"\"); const handleChange = (event) =\u003e { setNotes(event.target.value); } const handleSubmit = (event) =\u003e { alert(\"Form submitted\"); event.preventDefault(); } return( \u003cdiv\u003e \u003cform onSubmit={handleSubmit}\u003e \u003clabel\u003eAdd your report here: \u003cinput type=\"textarea\" value={notes} onChange={handleChange}/\u003e \u003c/label\u003e \u003cinput type=\"submit\" /\u003e \u003c/form\u003e \u003cp\u003ePreview: {notes}\u003c/p\u003e \u003c/div\u003e); } We don’t have anywhere to actually send our data, so all we need to do for now is create an alert popup and use event.preventDefault() to ensure the form does not actually submit.\nWhen working with forms in React, you need to separate out what you would like to happen if the state changes versus when the state resets. A preview of a form field could be immensely helpful, but when form submission occurs, the state resets back to the initial state and the preview returns to an empty field.\nNote Check our completed manufacturing application on GitHub !\n",
    "description": "",
    "tags": null,
    "title": "Introduction to React Forms",
    "uri": "/react-lsn3/reading/form-intro/index.html"
  },
  {
    "content": "You have completed the last chapter in the textbook! Great job! If you still feel that you are on shaky ground with React and state, here are some of our favorite resources:\nReact Documentation What is the difference between virtual and real DOM? How State Works in React ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/react-lsn3/next-steps/index.html"
  },
  {
    "content": "After scaffolding your React application with Vite there are a couple of things to cover in regards to the structure of the project directory and the default Vite config file.\nInitial Project Structure index.html the index.html file resides within the root folder of the application. You may have worked with different tools that scaffold the index.html file into the public directory.\nWith Vite, the index.html is the entry point for the entire application. Lets take a look at what is inside of the index.html file below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003clink rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eVite + React\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"root\"\u003e\u003c/div\u003e \u003cscript type=\"module\" src=\"/src/main.jsx\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e The above code block should certainly look familiar to boilerplate html starter code. Looking specifically at line 11:\n\u003cscript type=\"module\" src=\"/src/main.jsx\"\u003e\u003c/script\u003e This line references any JavaScript code within your application.\n/src Directory The /src directory has the following default structure when creating a new React application:\ngraph TD subgraph src subgraph assets react.svg end App.css App.jsx index.css main.jsx end Lets discuss the files and what they are responsible for:\nThe main.jsx file renders the App.jsx component.\nNote Often times you may notice that an application has a main.jsx or index.jsx file. These are used interchangeably. You may notice that apps you work on in upcoming sections have an index.jsx file instead of a main.jsx file.\nThe App.jsx component is used to call your React components and handle your applications routing.\nThe App.css file is styling specifically related to the React application. Syling within the App.css file are typically used for individual components.\nThe index.css file is styling file that is globally related to your entire application. If there is styling that a user wants to be used globally across the entire application and all components this is where that styling would live.\nVite Config File When you are starting your server from the command line, Vite will automatically resolve the config file called vite.config.js within the root directory of the project. This file is included upon scaffolding a React project with Vite. The main purpose of this file is to define the or customize how you want to serve or build your application. You can define environment variables here if you have sensitive or specific information you need to provide for the application to build.\nLet’s take a look at the config file below:\nimport { defineConfig } from 'vite' import react from '@vitejs/plugin-react' // https://vitejs.dev/config/ export default defineConfig({ plugins: [react()], }) This is the default vite.config.js file included with every project. It is customizable should it not suit your development needs but we will cover the default configuration.\nIt starts by importing the defineConfig function from the vite package. The second line imports the react plugin to allow React support within your project. It then exports the default configuration object (defineConfig) that was imported above, with the react plugin that enables your React code to run.\nNote While you begin to work more with Vite and React keep in mind that Vite, like webpack , Rollup and Parcel is a build tool that ehances the fontend development experience. Ultimately, the goal of this course is to learn basic skills for using the React library. If you would like to delve a bit deeper in Vite you can find more resources here at the Vite Homepage .\n",
    "description": "",
    "tags": null,
    "title": "More on Vite",
    "uri": "/react-lsn1/reading/more-on-vite/index.html"
  },
  {
    "content": "We are going to continue with React in the next chapter. If you are not sure about React or components yet, here are some additional resources on these topics:\nVite | Next Generation Frontend Tooling DigitalOcean - How to Set Up a React Project with Vite Your First Component React Functional Components, Props, and JSX The Benefits of ReactJS ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/react-lsn1/next-steps/index.html"
  },
  {
    "content": "This page covers what to expect during in-class time for students enrolled in a LaunchCode blended learning course. Students taking an independent learning course may skip this page.\nWe only have a short amount of time in class to learn a lot, so using a blended learning model helps us make the most of our time in this course. A blended learning model incorporates in-class learning with online materials like this textbook.\nIn-Class Time In class, you join fellow students on the same learning journey as you. We encourage students to engage, interact, and encourage each other throughout the class.\nIn-class time is run by an instructor and teaching assistants. This dedicated staff facilitates the activities and provides support to the students.\nLarge Group Time During the large group time, the whole class participates in the lesson, led by the instructor. The lesson is not a substitute for doing the prep work before class. It’s a time for us to review examples as a group and shore up concepts from the reading.\nSmall Group Time After the large group time, we break up into small groups, each led by a teaching assistant. During small group time, we do our studios. This is a time to ask for individual support if you need it. It is meant to be a place where you can feel comfortable talking openly about concepts you are struggling with.\n",
    "description": "",
    "tags": null,
    "title": "Blended Learning",
    "uri": "/introduction/reading/blended-learning/index.html"
  },
  {
    "content": "This was just an introduction to all that is going on with the modern JavaScript language. If you would like to learn more before diving into React, check out these additional resources:\nJavaScript ES6 JSX in React TypeScript Documentation Babel Documentation ",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/modern-js/next-steps/index.html"
  },
  {
    "content": "With all the extensions and supersets of JavaScript, you might be wondering how developers keep track of all the different languages and versions of JavaScript. Developers make use of a process called transpilation. Transpilation is where a programming language is compiled into a different programming language. For example, TypeScript code can be transpiled and the end result is the equivalent JavaScript code. Developers use transpilers, also called source-to-source compiler, to make transpilation happen. Transpilers are used to ensure that applications are operable on different browsers and different versions of browsers. ECMAScript versions are not supported at the same level so a transpiler can be used to turn ES6 into ES3 to ensure that the code works for all browsers and browser versions.\nBabel Babel is a JavaScript compiler transpiler. It can turn newer versions of ECMAScript code into older versions to ensure compatability with the user’s environment. This helps developers immensely as they can start using the latest version of ECMAScript without having to wait for browser support to catch up.\nBabel can also process our JSX code and help pages render properly when written in JSX. The other nice thing about Babel is that we can customize our configuration and add plugins to ensure that we can use Babel with TypeScript as well.\nTo start using Babel and other JavaScript tools, we need to install Node. Let’s do that now.\n",
    "description": "",
    "tags": null,
    "title": "Transpilation",
    "uri": "/modern-js/reading/transpilers/index.html"
  },
  {
    "content": "The general syntax for the innerHTML property is:\nelement.innerHTML The innerHTML property of elements reads and updates the HTML and or text that is inside the element.\nNote The innerHTML value for empty elements is empty string \"\".\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eDOM Examples\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003einnnerHTML Example\u003c/h1\u003e \u003ch2\u003eYellow Fruits\u003c/h2\u003e \u003cul class=\"yellow\"\u003e \u003cli\u003eBanana\u003c/li\u003e \u003c/ul\u003e \u003cscript\u003e let ul = document.querySelector(\".yellow\"); console.log(ul.innerHTML.trim()); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output\n\u003cli\u003eBanana\u003c/li\u003e Tip Use .trim to remove the whitespace around the value of .innerHTML\nAs mentioned above innerHTML can be used to read and update the contents of an element. innerHTML is so powerful that you can pass in strings of HTML.\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eDOM Examples\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003einnnerHTML Example\u003c/h1\u003e \u003ch2\u003eYellow Fruits\u003c/h2\u003e \u003cul class=\"yellow\"\u003e \u003cli\u003eBanana\u003c/li\u003e \u003c/ul\u003e \u003cscript\u003e let ul = document.querySelector(\".yellow\"); // Add a \u003cli\u003e to the list ul.innerHTML += \"\u003cli\u003eLemon\u003c/li\u003e\"; console.log(ul.innerHTML.trim()); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output\n\u003cli\u003eBanana\u003c/li\u003e \u003cli\u003eLemon\u003c/li\u003e ",
    "description": "",
    "tags": null,
    "title": "innerHTML Examples",
    "uri": "/appendices/dom-method-examples/innerhtml-examples/index.html"
  },
  {
    "content": ".join() Examples The general syntax for this method is:\narrayName.join('connector') join combines all the elements of an array into a string. The connector determines the string that “glues” the array elements together.\nExample let arr = [1, 2, 3, 4]; let words = ['hello', 'world', '!']; let newString = ''; newString = arr.join(\"+\"); console.log(newString); newString = words.join(\"\"); console.log(newString); newString = words.join(\"_\"); console.log(newString); Output\n1+2+3+4 helloworld! hello_world_! ",
    "description": "",
    "tags": null,
    "title": "join Examples",
    "uri": "/appendices/array-method-examples/join-examples/index.html"
  },
  {
    "content": "Math.pow The general syntax for this method is:\nMath.pow(x, y) This method calculates and returns the value of x raised to the power of y (x :sup:y), and it is identical to the x**y operation. The pow name refers to the operation to the power of.\nExample 1 2 3 console.log(3**4); console.log(Math.pow(3,4)); //3 raised to the power of 4 = 3*3*3*3 Console Output\n81 81 Math.sqrt The general syntax for this method is:\nMath.sqrt(number) This method calculates and returns the square root of number, and it is a shortcut for using the fraction 1/2 in the pow method.\nNumerical strings can also be evaluated, but should be avoided as a best practice.\nExample 1 2 3 4 5 console.log(Math.sqrt(81)); console.log(Math.pow(81,1/2)); console.log(Math.sqrt(111)); console.log(Math.sqrt(\"36\")); Console Output\n9 9 10.535653752852738 6 Math.sqrt also works on arrays, but must be combined with the map array method. The syntax for this is:\narrayName.map(Math.sqrt) Example 1 2 3 let numbers = [2, 16, 100, 121]; console.log(numbers.map(Math.sqrt)); Console Output\n[ 1.4142135623730951, 4, 10, 11 ] ",
    "description": "",
    "tags": null,
    "title": "Math.pow and Math.sqrt Examples",
    "uri": "/appendices/math-method-examples/pow-examples/index.html"
  },
  {
    "content": "While we have covered all of the HTTP concepts you need to know at this point, it’s worth spending some time explaining how web browsers submit requests and receive responses.\nViewing Requests and Response Using Developer Tools Tip This section requires you to use Firefox’s developer tools. If you need a refresher or just a reference, visit MDN .\nOpen a web browser and visit some web page, say, our example from the HTML Me Something assignment . After the page loads, open your browser’s developer tools and select the Network tab.\nYou’ll see something like this:\nThe Network pane displays all HTTP requests and responses involved in loading a page. However, it only tracks and displays such data if it is open during the request. To see some data in this tab, refresh the page.\nNow you’ll see something like this:\nEach entry within the pane represents a single HTTP request. A summary of the request is shown in a table format, including the resource requested, server name, response code, and more. Clicking on one of the entries shows more detailed information about the request.\nOn the right, we see additional request and response details, including response headers and (scrolling down) request headers. We can even view the response body by clicking on the Response label.\nExample Navigate to a different page with the Network pane open. Find the response code and Content-Type header for the first request shown in the pane.\nBrowser Flow As you can see from using the Network pane, loading a single web page usually involves several HTTP requests. Each resource within the page is loaded in a separate request.\nLet’s examine the flow of loading a page. We’ll consider the case of an HTML page with CSS, JavaScript, and images, loaded via a GET request.\nBrowser requests a page from the server. Browser receives the HTML page and parses it. For each image, external CSS file, and external JavaScript file the browser issues a new HTTP request for the given file. As additional responses are received, the browser processes the data or media and updates the page. This process explains why you will sometimes load a web page, only to see an image on that page load a few seconds later. In such situations, the HTTP request fetching the image takes substantially more time, making it noticeable.\nCheck Your Understanding Question For the first screenshot on this page, answer these questions:\nWhat is its file name? How large is it? ",
    "description": "",
    "tags": null,
    "title": "HTTP in the Browser",
    "uri": "/http/reading/http-in-the-browser/index.html"
  },
  {
    "content": "How to Merge A merge in Git occurs when two branches are combined in the repository.\nExample Let’s say a programmer wants to merge a branch called test into main. To accomplish this:\nThe programmer switches to the branch they want to merge into. In this case: $ git checkout main The programmer then runs the merge command: $ git merge test When successful, the code in the test branch is pulled into main.\nMerge Conflicts This process is often seamless. In the example in the previous section, a programmer created a branch to change the HTML and the other programmer did the same to change the CSS. Because the two programmers changed different files, the merge of the updated HTML and updated CSS won’t create a conflict.\nA merge conflict occurs when a change was made to the same line of code on both branches. Git doesn’t know which change to accept, so it is up to the programmers to resolve it. Merge conflicts are minor on small applications, but can cause issues with large enterprise applications.\nEven though the thought of ruining software can be scary, every programmer deals with a merge conflict during their career. The best way to deal with a merge conflict is to face it head on and rely on teammates for support!\nWays to Avoid Merge Conflicts Even though merge conflicts are normal in Git, it is also normal for programmers to want to do everything they can to avoid them. Here are some tips on how to avoid a merge conflict:\nGit has a dry-run option for many commands. When a programmer uses that option, Git outputs what WILL happen, but doesn’t DO it. With merging in Git, the command to perform a dry-run and make sure there aren’t any conflicts is git merge --no-commit --no-ff \u003cbranch\u003e. The --no-commit and --no-ff syntax tells Git to run the merge without committing the result to the repository. Before merging in a branch, any uncommitted work that would cause a conflict needs to be dealt with. A programmer can opt to not commit that work and instead stash it. By using the git stash command, the uncommitted work is saved in the stash, and the repository is returned to the state at the last commit. If the programmer wants to retrieve stashed work later, they can do so with the command git stash pop. Check Your Understanding Question If a programmer is on the branch test and wants to merge a branch called feature into main, what steps should they take?\n",
    "description": "",
    "tags": null,
    "title": "Merging in Git",
    "uri": "/git/reading/merge/index.html"
  },
  {
    "content": "Open transmission-processor in javascript-projects/unit-testing/chapter-examples and follow along as we implement a project using TDD.\nWe need to write a Node module to process transmissions from the Voyager1 probe .\nExample Transmission\n\"1410::\u003c932829840830053761\u003e\" Expected Result\n{ id: 1410, rawData: 932829840830053761 } Requirements The features for this project have already been broken down into small testable units. Let’s review them and then we will take it slow, one step at a time.\nTake in a transmission string and return an object.\nReturn -1 if the transmission does NOT contain \"::\".\nReturned object should contain an id property.\nThe value of id is the part of the transmission before the \"::\". The id property should be of type Number.\nReturned object should contain a rawData property.\nThe value of rawData is the part of the transmission after the \"::\". Return -1 for the value rawData if the rawData part of the transmission does NOT start with \u003c and end with \u003e.\nRequirement #1 Requirement: Take in a transmission string and return an object.\nTo get started on this we need to:\na. Create a blank test function. b. Give the test a name that is a clear, testable statement.\nCreating a blank test is easy, go to processor.test.js and add an empty test method. Tests in Jest are declared with a test function. Remember that tests go inside of the describe function, which along with the string parameter describe the group of tests inside.\n1 2 3 4 5 6 7 describe(\"transmission processor\", function() { test(\"\", function() { }); }); Give the test the name \"takes a string and returns an object\".\n1 2 3 4 5 6 7 describe(\"transmission processor\", function() { test(\"takes a string returns an object\", function() { }); }); Now that we identified a clear goal for the test, let’s add logic and expect calls in the test to verify the desired behavior. But wait… we haven’t added anything except an empty test at this point. There isn’t any actual code to verify. That’s okay, this is part of the TDD process.\nWe are going to think about and visualize how this feature should be implemented in code. Then we will write out in the test how this new code will be used.\nWe need to think of something that will satisfy the statement test(\"takes a string and returns an object\". The test will be a function that is imported from a module. Below on line 1, a processor function is imported from the processor.js module.\n1 2 3 4 5 6 7 8 9 const processor = require('../processor.js'); describe(\"transmission processor\", function() { test(\"takes a string and returns an object\", () =\u003e { }); }); We have an idea for a function named processor and we have imported it. Keep in mind this function only exists as a concept and we are writing a test to see if this concept makes sense.\nNow for the real heart of the test. We are going to use expect().toBe() to verify that if we pass a string to processor, an object is returned. Carefully review lines 7 and 8 shown below.\n1 2 3 4 5 6 7 8 9 10 const processor = require('../processor.js'); describe(\"transmission processor\", function() { test(\"takes a string and returns an object\", function() { let result = processor(\"9701::\u003c489584872710\u003e\"); expect(typeof result).toBe(\"object\"); }); }); On line 6 the processor function is called, with the value being stored in a result variable. On line 8 the result of the expression typeof result is compared to the value \"object\". Reminder that the typeof operator returns a string representation of a type. If typeof result evaluates to the string \"object\", then we know that processor returned an object.\nCode Red Let’s run the test!\nType in the command npm run test to check your test.\nYou should see an error about processor.js not existing. This makes sense, because we have not created the file yet. We are officially in the Red phase of Red, Green, Refactor!\nError: Cannot find module '../processor.js' Go Green! Now that we have a failing test, we have only one choice. Make it pass.\nAdd a processor.js file to your project. Inside of the module declare a processor function that takes a parameter and returns an object. Contents of the new processor.js file.\n1 2 3 4 5 function processor(transmission) { return {}; } module.exports = processor; Run the test again.\nRefactor if Needed This solution is very simple and does not need to be improved. The refactor step does not always lead to an actual changing of your code. The most important part is to review your code to make sure that it’s efficient and meets your team’s standards.\nRequirement #2 Requirement: Return -1 if the transmission does NOT contain \"::\".\nNext we have a negative test requirement that tells us what should happen if the data is invalid. Before jumping into the code, let’s review the steps we took to implement requirement #1.\nReview of TDD process:\nCreate a blank test function. Give the test a name that is a clear, testable statement. Come up with test data that will trigger the described behavior. Think about what is needed, then write code that fulfills the stated behavior. Run the test and see the it fail. Implement the new code or feature used in the test. Run the test and see it pass. Review to see if refactor needed. For requirement #2, the solution for steps 1 - 4 can be seen on lines 11 - 14 below.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const processor = require('../processor.js'); describe(\"transmission processor\", function() { test(\"takes a string and returns an object\", function() { let result = processor(\"9701::\u003c489584872710\u003e\"); expect(typeof result).toBe(\"object\"); }); test(\"returns -1 if '::' not found\", function() { let result = processor(\"9701\u003c489584872710\u003e\"); expect(result).toBe(-1); }); }); Now for step 5, run the test and see it fail. Notice that -1 was the expected value, but the actual value was and empty object, {}.\nNext is step 6, write code that will make the test pass. Go to processor.js and update the processor function to check the transmission argument for the presence of '::'.\n1 2 3 4 5 6 7 8 9 function processor(transmission) { if (transmission.indexOf(\"::\") \u003c 0) { // Data is invalid return -1; } return {}; } module.exports = processor; Lucky step 7 is to run the tests again. They should both pass.\nFinally step 8 is to review the code to see if it needs to be refactored. As with the first requirement our code is quite simple and can not be improved at this time.\nRequirement #3 Requirement: Returned object should contain an id property. The id is the part of the transmission before the \"::\".\nThe same steps will be followed, even though they are not explicitly listed.\nSee lines 16 - 19 to see the test added for this requirement. To test this case not.toBeUndefined() was used, which is checking if the two values are NOT equal. not.toBeUndefined() is used to make sure that result.id is NOT equal to undefined. Remember that if you reference a property on an object that does NOT exist, undefined is returned.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const processor = require('../processor.js'); describe(\"transmission processor\", function() { test(\"takes a string returns an object\", function() { let result = processor(\"9701::\u003c489584872710\u003e\"); expect(typeof result).toBe(\"object\"); }); test(\"returns -1 if '::' not found\", function() { let result = processor(\"9701\u003c489584872710\u003e\"); expect(result).toBe(-1); }); test(\"returns id in object\", function() { let result = processor(\"9701::\u003c489584872710\u003e\"); expect(result.id).not.toBeUndefined(); }); }); The fail message looks a little different than what we have seen. The phrase “Expected ‘actual’ to be strictly unequal to” lets us know that the two values were equal when we didn’t expect them to be.\nThe object returned from processor doesn’t have an id property. We need to split the transmission on '::' and then add that value to the object with the key id. See solution in processor.js below.\n1 2 3 4 5 6 7 8 9 10 11 12 function processor(transmission) { if (transmission.indexOf(\"::\") \u003c 0) { // Data is invalid return -1; } let parts = transmission.split(\"::\"); return { id: parts[0] }; } module.exports = processor; Run the tests again. That did it. The tests pass!\nLine 6 splits transmission into the parts array, and line 8 assigns the first entry in the array to the key id.\nRequirement #4 Requirement: The id property should be of type Number.\nAgain the same steps are followed, though not listed.\nNew test to be added to tests/processor.test.js:\n1 2 3 4 test(\"converts id to a number\", function() { let result = processor(\"9701::\u003c489584872710\u003e\"); expect(result.id).toBe(9701); }); This test fails. Looks like we need to convert id to a number. Time to update the code in processor.js.\n1 2 3 4 5 6 7 8 9 10 11 12 function processor(transmission) { if (transmission.indexOf(\"::\") \u003c 0) { // Data is invalid return -1; } let parts = transmission.split(\"::\"); return { id: Number(parts[0]) }; } module.exports = processor; Now for the great feeling of a passing tests!\nNote You may be wondering what happens if that data is bad and the id can’t be turned into a number. That is a negative test case related to this feature and is left for you to address in the final section.\nRequirement #5 Requirement: Returned object should contain a rawData property. The rawData is the part of the transmission after the \"::\".\nNew test to be added to tests/processor.test.js:\n1 2 3 4 test(\"returns rawData in object\", () =\u003e { let result = processor(\"9701::\u003c487297403495720912\u003e\"); expect(result.rawData).not.toBeUndefined(); }); Let’s run the tests again to see where we are at.\nWe need to extract the rawData from the second half of the transmission string after it’s been split. Then return that in the object.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 function processor(transmission) { if (transmission.indexOf(\"::\") \u003c 0) { // Data is invalid return -1; } let parts = transmission.split(\"::\"); let rawData = parts[1]; return { id: Number(parts[0]), rawData: rawData }; } module.exports = processor; It’s that time again, our tests pass!\nRequirement #6 Requirement: Return -1 for the value rawData if the rawData part of the transmission does NOT start with \u003c and end with \u003e.\nLet’s think about what test data to use for this requirement. What ways could the transmission data be invalid?\nIt could be missing \u003c at the beginning It could be missing \u003e at the end It could be missing both \u003c and \u003e Has \u003c but the symbol is in the wrong place Has \u003e but the symbol is in the wrong place All these cases need to be covered by a test. Let’s start with #1, which is missing \u003c at the beginning.\nNew test to be added to tests/processor.test.js:\n1 2 3 4 test(\"returns -1 for rawData if missing \u003c at position 0\", function() { let result = processor(\"9701::487297403495720912\u003e\"); expect(result.rawData).toBe(-1); }); Run the tests and review the fail message.\nNow add new code to processor.js to make the tests pass. Note that we don’t simply return -1, the requirement is to return the object and set the value of rawData to -1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function processor(transmission) { if (transmission.indexOf(\"::\") \u003c 0) { // Data is invalid return -1; } let parts = transmission.split(\"::\"); let rawData = parts[1]; if (rawData[0] !== \"\u003c\") { rawData = -1; } return { id: Number(parts[0]), rawData: rawData }; } module.exports = processor; You know what’s next, our tests pass!\nExample The test data we used was missing \u003c at the beginning. Add tests to cover these cases. -1 should be returned as the value for rawData for all of these.\n\"9701::8729740349572\u003e0912\" \"9701::4872\u003c97403495720912\" \"9701::487297403495720912\" \"9701::\u003c487297403495\u003c720912\u003e\" Use TDD to Add These Features Use the steps demonstrated above to implement all or some of the features below. Take your time, you can do it!\nTrim leading and trailing whitespace from transmission. Return -1 if the id part of the transmission cannot be converted to a number. Return -1 if more than one \"::\" is found in transmission. Do not include the \u003c \u003e symbols in the value assigned to rawData. Return -1 for the value of rawData if anything besides numbers are present between the \u003c \u003e symbols. ",
    "description": "",
    "tags": null,
    "title": "TDD in Action",
    "uri": "/unit-testing/reading/tdd-in-action/index.html"
  },
  {
    "content": "As with strings and arrays, JavaScript provides some built-in methods for the Math object. These allow us to perform calculations or tasks that are more involved than simple multiplication, division, addition, or subtraction.\nCommon Math Methods The Math object contains over 30 methods. The table below provides a sample of the most frequently used options. More complete lists can be found here:\nW3 Schools Math Reference MDN Web Docs To see detailed examples for a particular method, click on its name.\nMethod Syntax Description abs Math.abs(number) Returns the positive value of number. ceil Math.ceil(number) Rounds the decimal number UP to the closest integer value. floor Math.floor(number) Rounds the decimal number DOWN to the closest integer value. max Math.max(x,y,z,...) Returns the largest value from a set of numbers. min Math.min(x,y,z,...) Returns the smallest value from a set of numbers. pow Math.pow(x,y) Returns the value of x raised to the power of y (x :sup:y). random Math.random() Returns a random decimal value between 0 and 1, NOT including 1. round Math.round(number) Returns number rounded to the nearest integer value. sqrt Math.sqrt(number) Returns the square root of number. trunc Math.trunc(number) Removes any decimals and returns the integer part of number. Check Your Understanding Follow the links in the table above for the floor, random, round, and trunc methods. Review the content and then answer the following questions.\nQuestion Which of the following returns -3 when applied to -3.87?\nMath.floor(-3.87) Math.random(-3.87) Math.round(-3.87) Math.trunc(-3.87) Question What is printed by the following program?\n1 2 3 let num = Math.floor(Math.random()*10); console.log(num); A random number between 0 and 9. A random number between 0 and 10. A random number between 1 and 9. A random number between 1 and 10. Question What is printed by the following program?\n1 2 3 let num = Math.round(Math.random()*10); console.log(num); A random number between 0 and 9. A random number between 0 and 10. A random number between 1 and 9. A random number between 1 and 10. ",
    "description": "",
    "tags": null,
    "title": "Math Methods",
    "uri": "/objects-and-math/reading/math-methods/index.html"
  },
  {
    "content": "A pattern is a commonly-used approach to solve a group of similar programming problems.\nThis section introduces your first pattern, which we will explore in-depth after looking at a motivating example.\nAdding 1…n Let’s write a program that adds up the integers 1…n, where n is an integer variable that we will create.\nIf you were to do this with pen and paper, you would write out a single formula and compute the answer. For example, for n = 6 you would write:\n1 + 2 + 3 + 4 + 5 + 6 To get the result, you would first add 1 and 2 to get 3. Then you would add 3 and 3 to get 6. Then you would add 6 and 4 to get 10, and so on. The final result is 21.\nWe can carry out this same procedure in code using a loop.\nExample 1 2 3 4 5 6 7 8 let n = 6; let total = 0; for (let i = 1; i \u003c= n; i++) { total += i; } console.log(total); Console Output\n21 The variable total is initialized to 0. The loop executes once each for the values of i from 1 to 6. Each time the loop body executes, the next value of i is added to total.\nThe loop carries out the same basic algorithm that we used to compute the sum 1 + 2 + 3 + 4 + 5 + 6 by hand. The only step that may seem different to you is the use of the variable total to keep track of the running total. When calculating the sum using pen and paper, we rarely write down this part, keeping track of the running total in our head. With programming, however, we must explicitly store such a value in a variable.\nThis pattern of initializing a variable to some basic, or empty value, and updating it within a loop is commonly referred to as the accumulator pattern. We refer to the variable as the accumulator. In the example above, total is the accumulator, and it “accumulates” the individual integers one by one.\nThe accumulator pattern comes up regularly in programming. The key to using it successfully is to initialize the accumulator variable before you start the iteration. Once inside the loop, update the accumulator.\nReversing a String While some programming languages have a string method that will reverse a given string, JavaScript does not. Let’s see how we can write our own program that reverses a string using the accumulator pattern. Open up Reversing-a-String.js in loops/chapter-examples in javascript-projects to experiement with this use of the accumulator pattern.\nWe’ll start by initializing two variables: the string we want to reverse, and a variable that will eventually store the reversed value of the given string.\n1 2 let str = \"blue\"; let reversed = \"\"; Here, reversed is our accumulator variable. Our approach to reversing the string will be to loop over str, adding each subsequent character to the beginning of reversed, so that the first character becomes the last, and the last character becomes the first.\nExample 1 2 3 4 5 6 7 8 let str = \"blue\"; let reversed = \"\"; for (let i = 0; i \u003c str.length; i++) { reversed = str[i] + reversed; } console.log(reversed); Console Output\neulb Notice that we don’t use the += operator within the loop, since reversed += str[i] is the same as reversed = reversed + str[i].\nLet’s break this down step-by-step. This table shows the values of each of our variables after each loop iteration.\nLoop iteration i str[i] reversed (before first iteration) not defined not defined \"\" 1 0 \"b\" \"b\" 2 1 \"l\" \"lb\" 3 2 \"u\" \"ulb\" 4 3 \"e\" \"eulb\" Example What happens if you reverse the order of the assignment statement within the for loop, so that reversed = reversed + str[i];?\nSumming an Array Another common use of the accumulator pattern is to compute some value using each of the elements of an array. This is similar to adding 1…n as we did above, with the difference being we will use the items in an array rather than 1…n.\nExample 1 2 3 4 5 6 let numbers = [2, -5, 13, 42]; let total = 0; for (let i = 0; i \u003c numbers.length; i++) { total += numbers[i]; } Console Output\n52 ",
    "description": "",
    "tags": null,
    "title": "The Accumulator Pattern",
    "uri": "/loops/reading/accumulator-pattern/index.html"
  },
  {
    "content": "We can debug runtime and syntax errors using the error messages produced. Logic errors, however, do not generally produce error messages. This sometimes makes them tougher to debug.\nWhile we can’t provide a step-by-step approach that applies to every possible logic error, we can give you some solid strategies. Two such strategies—using debugger tools and writing tests—will be covered in future lessons. In this section, we start with a basic and effective way to debug logic errors.\nPrinting Values When your code runs but doesn’t produce the expected results, it is important to check the values of the variables being used.\nLet’s look at a program that has a logical bug.\n1 2 3 4 5 6 const input = require('readline-sync'); let degreesC = input.question('Temp in degrees C:'); let degreesK = degreesC + 273.15; console.log('Degrees K:', degreesK); This program asks the user for a temperature in degrees celsius and attempts to convert it to degrees Kelvin. Degrees Kelvin differs from degrees celsius by 273.15. So if we enter 100 (in celsius) we should see a converted value of 373.15 (in Kelvin). However, running the program as-is and entering 100 gives the message:\nTemp in degrees C: 100 Degrees K: 100273.15 This is clearly incorrect. But the program does not generate an error, so it is not immediately clear what the issue is. To figure it out, we’ll use console.log to see what the values of key variables are when the program runs.\nLet’s first make sure that the degreesC variable looks like it should by adding a console.log statement just after we create this variable.\n1 2 3 4 5 6 7 const input = require('readline-sync'); let degreesC = input.question('Temp in degrees C: '); console.log(degreesC); let degreesK = degreesC + 273.15; console.log('Degrees K:', degreesK); Running this with an input of 100 gives the output:\nTemp in degrees C: 100 100 Degrees K: 100273.15 The second line is the value of degreesC, which appears to be correct. But the final answer is still incorrect, so we need to keep digging for more information.\nLooking at the line in which we set degreesK, we see that we use degreesC as a numeric value in our calculation. Let’s see what the data type of degreesC is. In the end, we want it to be a number.\n1 2 3 4 5 6 7 const input = require('readline-sync'); let degreesC = input.question('Temp in degrees C: '); console.log(typeof degreesC); let degreesK = degreesC + 273.15; console.log('Degrees K:', degreesK); Running this with an input of 100 gives the output:\nTemp in degrees C: 100 string Degrees K: 100273.15 That’s it! The variable degreesC has the value 100, but it is a string rather than a number. So when we set degreesK with the formula degreesC + 273.15, we are actually performing string concatenation instead of addition: \"100\" + 273.15 is \"100273.15\".\nWe can fix our program by converting the user’s input to the number data type.\n1 2 3 4 5 6 7 const input = require('readline-sync'); let degreesC = input.question('Temp in degrees C: '); degreesC = Number(degreesC); let degreesK = degreesC + 273.15; console.log('Degrees K:', degreesK); Running this with an input of 100 gives the output:\nTemp in degrees C: 100 Degrees K: 373.15 Note that after debugging we removed all of our console.log statements. Be sure to do the same when using this debugging technique.\n",
    "description": "",
    "tags": null,
    "title": "Debugging Logic Errors",
    "uri": "/errors-and-debugging/reading/debugging-logic-errors/index.html"
  },
  {
    "content": " In the Hello World section, you experimented with displaying text on the screen. Technically, you sent the words to the console, which is a simple window where the user can type commands or view output. We used a print function without explicitly talking about how it works. Let’s fix that now.\nWe call the print function using the syntax console.log(). When the code runs, we want it to tell the computer, Please display what is inside the () on the screen. For us, the words are enough - we want to LOG the text to the CONSOLE. However, the computer only understands binary or hexadecimal instructions. We need the compiler to change the keywords console and log into a format that the machine understands.\nExamples Open the ConsoleLogExamples01.js file in how-to-write-code. Run the code with node consolelogexamples01.js and note the difference between the outputs:\n1 2 3 4 5 6 console.log('Hello, JavaScript.'); console.log(2001); console.log(\"What\",\"do\",\"commas\",\"do?\"); console.log(\"Does\", \"adding\", \"space\", \"matter?\"); console.log('Launch' + 'Code'); console.log(\"LaunchCode was founded in\", 2013); Observations line by line:\nIn the line 1, we print some text, which is surrounded by quotes. In the line 2, we print a number. Note the absence of quote marks. In line 3, we use four words, separated by commas, all within the same set of parentheses (). When these four words print, they show up on the same line but separated by spaces. The code in line 4 puts extra spaces after the commas. How does this affect the output? Line 5 also prints more words, but in this case the code uses + instead of a comma. The result is to print the words without spaces in between. Line 6 prints text and a number with a space in between. Two Special Characters One final observation for all of the examples above is that each time we use console.log, a newline is inserted after the printed content. Think of a newline as the same as hitting the Enter or Return key on your keyboard. The cursor moves to the beginning of the next line.\nFor the computer, newline is an invisible character that is used to tell the machine to move to the next line. It is possible to use this invisible character with the special representation \\n.\nExample Experiment with the newline character by opening up ConsoleLogExamples02.js and running the code.\n1 2 3 console.log(\"Some Programming Languages:\"); console.log(\"Python\\nJavaScript\\nJava\\nC#\\nSwift\"); In addition to the newline character, there is also a special tab character, \\t. Go back to the eight examples above and experiment with using \\t and \\n.\n",
    "description": "",
    "tags": null,
    "title": "Output with console.log",
    "uri": "/how-to-write-code/reading/output/index.html"
  },
  {
    "content": "Assignment Overview Project Introduction Task 1: Creating Your Content Task 2: Styling Task 3: Testing and Submitting Your Project Next Steps ",
    "description": "",
    "tags": null,
    "title": "Assignment 4: Html Me Something",
    "uri": "/assignments/html-me-something/index.html"
  },
  {
    "content": "Next Steps: Bonus Mission! If you want to show off your hard work to all your friends, Github has a cool feature called Github Pages that makes this really easy.\nGithub provides free hosting for any “static” web content (like this project). All you have to do is change a setting on your GitHub repository.\nIn a browser, go to the Github page for your repository. Click on the Settings tab Scroll down to the GitHub Pages section and enable the GitHub Pages feature by choosing your main branch from the dropdown. Hit Save. In any browser, you should now be able to visit YOUR_USERNAME.github.io/html-me-something and see your web page! Remember, Bonus Missions are always optional.\n",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/assignments/html-me-something/next-steps/index.html"
  },
  {
    "content": "The function is the most complex JavaScript construct that we have seen. Functions have more components to their syntax than conditionals or loops, and can be used in more intricate ways than those constructs.\nTo avoid frustration and bugs, it’s important to approach writing functions in an intentional, structured way. This is essential as you start to write more complex functions.\nIn this section, we outline what we think is the best approach. To provide concrete examples, we will consider a fictional function that is able to make a sandwich.\nStep 1: Design Your Function Before putting fingers to keyboard, it is important to have a clear idea of what you want your function to do. You should ask yourself the following questions:\nWhat data (that is, parameters) does my function need to do its job? Should my function return a value? (Hint: The answer is almost always “yes.”) What should be the data type of my function’s return value? What is a good, descriptive name for my function? What data types do we expect the parameters to be? What are good names for my parameters? For our sandwich function, the answers might look like this:\nParameters bread, filling, condiments Return Value The finished sandwich Return Type An object of type ‘sandwich’* Function name makeSandwich Parameter names and types breadType (string), fillingType (string), condiments (array of strings) * JavaScript does not actually have a “sandwich” data type, but we want our function to be as flexible as possible. For now, recognize that returning a simple string to describe the sandwich will not be useful. In later lessons, we will learn how to create custom data types, so making a virtual, code-based “sandwich” here is not a problem.\nStep 2: Create the Basic Structure Now it is time to start coding. Using the design decisions you just made, write the minimal syntax needed to create the function.\nHere’s what an outline of our sandwich function would look like:\nfunction makeSandwich(breadType, fillingType, condiments) { // TODO: make a sandwich with the given ingredients } Doing this step before writing the body will prevent silly mistakes like leaving off a } or forgetting to define a parameter.\nStep 3: Write the Body With the basic structure in place, go ahead and start writing the function body. Be sure to alternate between sub-tasks and running your code. Do not wait until you have written the entire function body before testing your code!\nWe can’t emphasize this enough. Going long stretches of time without running the program is a good way to end up frustrated. Recall in the chapter on debugging that we made the following recommendation to avoid bugs:\nGet something working and keep it working.\nThis applies especially to writing functions. Every good professional programmer works in this way: write a few lines of code, run it, debug any errors, repeat.\nFollowing these steps won’t prevent you from making mistakes, but it will certainly reduce the number of bugs you create. This helps you more quickly produce solid, working code.\n",
    "description": "",
    "tags": null,
    "title": "A Good Function-Writing Process",
    "uri": "/functions/reading/function-writing/index.html"
  },
  {
    "content": "Learning Objectives Understand how common boolean expressions are evaluated Use boolean expression to create conditional statements Debug simple programs and recognize common errors Explain what a boolean value is Explain what logical operators are Understand truth tables for binary boolean operators \u0026\u0026 and || Key Terminology Here are the key terms for this chapter. On the pages that they appear make note of what they are and their definitions.\nBooleans data type true, false type conversion ==, !=, \u003c, \u003e, \u003c=, \u003e= Equality equality == === !== Logical Operators operators \u0026\u0026 || Conditionals conditional if if-else else if branching Content Links Reading Exercises: Booleans and Conditionals Studio: Shuttle Launch ",
    "description": "",
    "tags": null,
    "title": "Chapter 5: Making Decisions with Conditionals",
    "uri": "/decisions-with-conditionals/index.html"
  },
  {
    "content": "Using inline event handling is a good way to get started handling events. A second way to handle events uses the DOM objects and methods. Remember, the DOM is an object representation of the entire web page. The DOM allows us to use JavaScript to configure our event handlers. The event handling declaration will no longer be in the HTML element attribute, but will instead be inside \u003cscript\u003e tags or in an external JavaScript file.\nAdd Event Handlers in JavaScript Before we add event handlers in JavaScript, we need to learn a new vocabulary term related to events in programming. A listener is another name for an event handler. The term listener refers to the code listening for the event to occur. If the code hears the event, then the event is handled.\naddEventListener is used to add an event handler, aka listener. addEventListener is a method available on instances of Window, Document, and Element classes.\nanElement.addEventListener(\"eventName\", aFunction); anElement is a reference to a DOM element object. \"eventName\" is the name of an event that the variable anElement supports. aFunction is a reference to a function. To start, we are going to use a named function.\nExample We want to set the named function youRang as the click handler for the button element. Notice that the value passed in as the event name is \"click\" instead of \"onclick\".\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eUse addEventListener\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp id=\"main-text\" class=\"orange\" style=\"font-weight: bold;\"\u003e a bunch of really valuable text... \u003c/p\u003e \u003cbutton id=\"ring-button\"\u003eRing Bell\u003c/button\u003e \u003cscript\u003e function youRang() { document.getElementById(\"main-text\").innerHTML += \"you rang...\"; console.log(\"you rang...\"); } // Obtain a reference to the button element let button = document.getElementById(\"ring-button\"); // Set named function youRang as the click event handler button.addEventListener(\"click\", youRang); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Result (if button is clicked)\naffect on page: adds \"you rang...\" to \u003cp\u003e output in console: you rang... Warning Be sure to use the correct event name when declaring the event name. An error will NOT be thrown if an invalid event name is given.\nNote This chapter uses DOM methods to add event handlers. When searching online, you may find examples using jQuery to add event handlers, which look like .on(\"click\", ...) or .click(...). jQuery is a JavaScript library designed to simplify working with the DOM. jQuery’s popularity has declined as the DOM itself has gained features and improved usablity.\nThe second parameter of addEventListener is a function. Remember there are many ways to declare a function in JavaScript. So far, we have passed in named functions as the event handler. addEventListener will accept any valid function as the event handler. It’s possible, and quite common, to pass in an anonymous function as the event handler.\nanElement.addEventListener(\"eventName\", function() { // function body of anonymous function // this function will be executed when the event is triggered }); Event Details A benefit of using addEventListener is that an event parameter can be passed to the event handler function. This event is an object instance of the Event class, which defines methods and properties related to events.\nanElement.addEventListener(\"eventName\", function(event) { console.log(\"event type\", event.type); console.log(\"event target\", event.target); }); event.type is a string name of the event.\nevent.target is an element object that was the target of the event.\nTry It! Above, we saw how we could use addEventListener to add the function youRang() as the event handler for the Ring Bell button.\nUsing addEventListener, could you add the function greetFriends() as the event handler for the Greet Friends button?\nEvent Bubbling Remember that the DOM is a tree of elements with an \u003chtml\u003e element at the root. The tree structure of an html page is made of elements inside of elements. That layering effect can cause some events, like click, to be triggered on a series of elements. Bubbling refers to an event being propagated to ancestor elements, when an event is triggered on an element that has parent elements. Events are triggered first on the element that is most closely affected by the event.\nExample We can add a click handler to a \u003cbutton\u003e, a \u003cdiv\u003e, and the \u003chtml\u003e element via the document global variable.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eEvent Bubbling\u003c/title\u003e \u003cstyle\u003e #toolbar { padding: 20px; border: 1px solid black; background-color:darkcyan; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"toolbar\"\u003e \u003cbutton id=\"ring-button\"\u003eRing Bell\u003c/button\u003e \u003c/div\u003e \u003cscript\u003e let button = document.getElementById(\"ring-button\"); button.addEventListener(\"click\", function (event) { console.log(\"button clicked\"); }); document.getElementById(\"toolbar\").addEventListener(\"click\", function (event) { console.log(\"toolbar clicked\"); }); document.addEventListener(\"click\", function (event) { console.log(\"document clicked\"); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output (if button is clicked)\nbutton clicked toolbar clicked document clicked In some cases, you may want to stop events from bubbling up. We can use event.stopPropagation() to stop events from being sent to ancestor elements. Handlers for parent elements will not be triggered if a child element calls event.stopPropagation().\nbutton.addEventListener(\"click\", function (event) { console.log(\"button clicked\"); event.stopPropagation(); }); Try It! With the HTML above, what happens when you click in the green?\nAfter you see the result, try adding stopPropagation() to the button click handler and seeing what happens when you click the button.\nCheck Your Understanding Question Do these code snippets have the same effect? button.addEventListener(\"click\", youRang) and \u003cbutton onclick=\"youRang();\"\u003e\nQuestion Can click events be prevented from bubbling up to ancestor element(s)?\nQuestion What is passed as the argument to the event handler function?\n",
    "description": "",
    "tags": null,
    "title": "Event Listeners",
    "uri": "/dom-and-events/reading/event-listeners/index.html"
  },
  {
    "content": "An expression is a combination of values, variables, operators, and calls to functions. An expression can be thought of as a formula that is made up of multiple pieces.\nThe evaluation of an expression produces a value, known as the return value. We say that an expression returns a value.\nExpressions need to be evaluated when the code executes in order to determine the return value, or specific piece of data that should be used. Evaluation is the process of computing the return value.\nIf you ask JavaScript to print an expression using console.log, the interpreter evaluates the expression and displays the result.\nExample console.log(1 + 1); Console Output\n2 This code prints not 1 + 1 but rather the result of calculating 1 + 1. In other words, console.log(1 + 1) prints the value 2. This is what we would expect.\nSince evaluating an expression produces a value, expressions can appear on the right-hand side of assignment statements.\nExample let sum = 1 + 2; console.log(sum); Console Output\n3 The value of the variable sum is the result of evaluating the expression 1 + 2, so the value 3 is printed.\nA value all by itself is a simple expression, and so is a variable. Evaluating a variable gives the value that the variable refers to. This means that line 2 of the example above also contains the simple expression sum.\n",
    "description": "",
    "tags": null,
    "title": "Expressions and Evaluation",
    "uri": "/data-and-variables/reading/expressions-and-evaluation/index.html"
  },
  {
    "content": "We can write code with more complex branching behavior by combining conditionals and, in particular, by nesting conditionals. Let’s see how this works by tackling the following problem.\nExample Write code that prints different messages based on the value of a number variable. If the number is odd, print nothing. If it is even, print “EVEN”. If it is also positive print “POSITIVE”.\nOur first attempt at a solution might look like this:\nlet num = 7; if (num % 2 === 0) { console.log(\"EVEN\"); } if (num \u003e 0) { console.log(\"POSITIVE\"); } Console Output\nPOSITIVE We find that the output is POSITIVE, even though 7 is odd and so nothing should be printed. This code doesn’t work as desired because we only want to test for positivity when we already know that the number is even. We can enable this behavior by putting the second conditional inside the first.\nlet num = 7; if (num % 2 === 0) { console.log(\"EVEN\"); if (num \u003e 0) { console.log(\"POSITIVE\"); } } Try it! Run the previous example with several different values for num (even, odd, positive, negative) to ensure it works as desired. Nice, huh?\nNotice that when we put one conditional inside another, the body of the nested conditional is indented by two tabs rather than one. This convention provides an easy, visual way to determine which code is part of which conditional.\nCheck Your Understanding Question What is printed when the following code runs?\nlet num = 7; if (num % 2 === 0) { if (num % 2 === 1) { console.log(\"odd\"); } } The code won’t run due to invalid syntax. odd even The code runs but doesn’t print anything Question Considering the same conditional used in the previous question, which values of num would result in \"odd\" being printed?\nif (num % 2 === 0) { if (num % 2 === 1) { console.log(\"odd\"); } } Even values of num. Odd values of num. No values. It is impossible for the call to console.log to ever run, given the two conditions. num is 0. ",
    "description": "",
    "tags": null,
    "title": "Nested Conditionals",
    "uri": "/decisions-with-conditionals/reading/nested-conditionals/index.html"
  },
  {
    "content": "For these text inputs the browser will validate and provide feedback to the user based on rules for the declared type.\nType Syntax Description Demo date \u003cinput type=\"date\" name=\"flightDate\"/\u003e Browser validates the value is a valid date format. Some browsers provide a date picker. email \u003cinput type=\"email\" name=\"emailAddress\"/\u003e Browser validates the value is a valid email address format. number \u003cinput type=\"number\" name=\"fuelTemp\"/\u003e Browser validates the value is a valid number format. Example \u003cform action=\"https://handlers.education.launchcode.org/request-parrot\" method=\"post\"\u003e \u003clabel\u003eEmail\u003cinput type=\"email\" name=\"emailAddress\"/\u003e\u003c/label\u003e \u003clabel\u003eReport Date\u003cinput type=\"date\" name=\"reportDate\"/\u003e\u003c/label\u003e \u003clabel\u003eCrew Count\u003cinput type=\"number\" name=\"crewCount\" min=\"1\" max=\"10\"/\u003e\u003c/label\u003e \u003cbutton\u003eSend Report\u003c/button\u003e \u003c/form\u003e Submitted Values\nemailAddress=c.danvers@us.af.mil reportDate=2019-03-08 crewCount=8 ",
    "description": "",
    "tags": null,
    "title": "Specialized Text Inputs",
    "uri": "/user-input-with-forms/reading/specialized-text-inputs/index.html"
  },
  {
    "content": "JavaScript provides many useful methods for string objects. Recall that a method is a function that “belongs to” a specific object. Methods will typically result in some operation being carried out on the data within an object. For strings, this means that our methods will typically transform the characters of the given string in some way.\nAs we have learned, strings are immutable. Therefore, string methods will not change the value of a string itself, but instead will return a new string that is the result of the given operation.\nWe saw this behavior in the toLowerCase example.\nExample let nonprofit = \"LaunchCode\"; console.log(nonprofit.toLowerCase()); console.log(nonprofit); Console Output\nlaunchcode LaunchCode While nonprofit.toLowerCase() evaluated to \"launchcode\", the value of nonprofit was left unchanged. This will be case for each of the string methods.\nCommon String Methods Here we present the most commonly-used string methods. You can find documentation for other string methods at:\nW3Schools MDN Method Syntax Description indexOf stringName.indexOf(substr) Returns the index of the first occurrence of the substring in the string, and returns -1 if the substring is not found. toLowerCase stringName.toLowerCase() Returns a copy of the given string, with all uppercase letters converted to lowercase. toUpperCase stringName.toUpperCase() Returns a copy of the given string, with all lowercase letters converted to uppercase. trim stringName.trim() Returns a copy of the given string with the leading and trailing whitespace removed. replace stringName.replace(searchChar, replacementChar) Returns a copy of stringName, with the first occurrence of searchChar replaced by replacementChar. slice stringName.slice(i, j) Returns the substring consisting of characters from index i through index j-1. Tip String methods can be combined in a process called method chaining. Given word = 'JavaScript';, word.toUpperCase() returns JAVASCRIPT. What would word.slice(4).toUpperCase() return?.\nCheck Your Understanding Follow the links in the table above for the replace, slice, and trim methods. Review the content and then answer the following questions.\nQuestion What is printed by the following code?\nlet language = \"JavaScript\"; language.replace('J', 'Q'); language.slice(0,5); console.log(language); \"JavaScript\" \"QavaScript\" \"QavaSc\" \"QavaS\" Question Given language = 'JavaScript';, what does language.slice(1,6) return?\n\"avaScr\" \"JavaSc\" \"avaSc\" \"JavaS\" Question What is the value of the string printed by the following program?\nlet org = \" The LaunchCode Foundation \"; let trimmed = org.trim(); console.log(trimmed); \" The LaunchCode Foundation \" \"The LaunchCode Foundation\" \"TheLaunchCodeFoundation\" \" The LaunchCode Foundation\" ",
    "description": "",
    "tags": null,
    "title": "String Methods",
    "uri": "/stringing-characters-together/reading/string-methods/index.html"
  },
  {
    "content": "Submitting Your Work Note Make sure to change the name of the studentgrade.specx.js file located in the spec directory to studentgrade.spec.js to run all tests once more.\nOnce your Rover class is completed and you have 14 passing tests, you are ready to submit.\nTip Make sure that you did not edit either studentgrading.spec.js, grading.js, or any file in the helpers directory inside spec. Changes to these files could affect your grade.\nIn Canvas, open the Mars Rover assignment and click the “Submit” button. An input box will appear.\nCopy the URL for your github repository and paste it into the box, then click “Submit” again.\n",
    "description": "",
    "tags": null,
    "title": "Task 5: Submitting Your Work",
    "uri": "/assignments/mars-rover/submitting-your-work/index.html"
  },
  {
    "content": "Before you submit your work, you should test out your code.\nTest Words First run some test words with your program. Here are some words you can use to test your code:\nJavaScript = 24 points using Scrabble, 10 using Simple Score, and 16 using Bonus Vowels. Scrabble = 14 points using Scrabble, 8 using Simple Score, and 12 using Bonus Vowels. Zox = 19 points using Scrabble, 3 using Simple Score, and 5 using Bonus Vowels. Example Output Review the code for each test word to see that it works as expected. Here is an example of the output you may see.\n$ node index Let's play some Scrabble! Enter a word to score: rum Which scoring algorithm would you like to use? 0 - Simple: One point per character 1 - Vowel Bonus: Vowels are worth 3 points 2 - Scrabble: Uses scrabble point system Enter 0, 1, or 2: 1 Score for 'june': 8 Autograding Tests Your starter code came with a suite of tests your TA can use to verify certain behaviors in your code. These tests can be found in the folder named test. To see how your code will do with these tests, you can run the command npm test in the terminal. If you see a test failed and you are not quite sure why, we encourage you to reach out to course staff for assistance.\nSubmitting Your Work Follow the submission instructions in Assignment 0 to submit your work. Remember to copy the link to your repo and paste it in the submission box on Canvas so your TA knows you are ready to have your work graded.\nBonus Missions Currently, the prompts accept ANY input values. The user could enter something other than 0, 1, or 2 when selecting the scoring algorithm, and they could enter numbers or symbols when asked for a word. Modify your code to reject invalid inputs and then re-prompt the user for the correct information. Score words spelled with blank tiles by adding ' ' to the newPointStructure object. The point value for a blank tile is 0. ",
    "description": "",
    "tags": null,
    "title": "Task 5: Submitting Your Work",
    "uri": "/assignments/scrabble-scorer/submitting-your-work/index.html"
  },
  {
    "content": "At this point, you may be asking yourself Why am I learning anonymous functions? They seem strange, and their utility may not be immediately obvious. While the opinions of programmers differ, there are two main reasons why we think anonymous functions are important to understand.\nAnonymous Functions Can Be Single-Use There are many situations in which you will need to create a function that will only be used once. To see this, recall one of our earlier examples.\nExample The anonymous function created in this example cannot be used outside of setTimeout.\nsetTimeout(function () { console.log(\"The future is now!\"); }, 5000); Defining an anonymous function at the same time it is passed as an argument prevents it from being used elsewhere in the program.\nAdditionally, in programs that use lots of functions—such as web applications, as you will soon learn—defining functions anonymously, and directly within a function call, can reduce the number of names you need to create.\nAnonymous Functions Are Ubiquitous in JavaScript JavaScript programmers use anonymous functions a lot. Many programmers use anonymous functions with the same gusto as that friend of yours who puts hot sauce on everything.\nJust because an anonymous function isn’t needed to solve a problem doesn’t mean that it shouldn’t be used to solve the problem. Avoiding JavaScript code that uses anonymous functions is impossible.\nAny programming problem in JavaScript can be solved without using anonymous functions. Thus, the extent to which you use them in your own code is somewhat a matter of taste. We will take the middle road throughout the rest of this course, regularly using both anonymous and named functions.\nCheck Your Understanding Question Explain the difference between named and anonymous functions, including an example of how an anonymous function can be used.\n",
    "description": "",
    "tags": null,
    "title": "Why Use Anonymous Functions?",
    "uri": "/more-on-functions/reading/why-anonymous-functions/index.html"
  },
  {
    "content": "In this step, you will create the following: Four clickable buttons Three of them will use the props you passed from the App() function One will display all of the satellites Inside the Buttons.jsx component: Import the satData as satData. Pass the props created from the App() function: filterByType, setSat, and displaySats. Update the first button: This function needs to return a \u003cdiv\u003e that used the map function to iterate over the displaySats variable.\nProvide two callbacks for the map function: id and sat. The map function will return the first \u003cbutton\u003e. Inside the \u003cbutton\u003e tag create the following: An onClick method that points to filterByType() function. Set the key equal to id. Between the \u003cbutton\u003e tags, replace \"Placeholder Button\" with {sat} Orbit. 7 8 9 10 11 12 13 14 {displaySats.map((sat, id) =\u003e { return ( \u003cbutton onClick={() =\u003e filterByType(sat)} key={id}\u003e {sat} Orbit \u003c/button\u003e ); })} //code continues Update the second button: This button needs to be outside of the map function. Inside the \u003cbutton\u003e tag, create an onClick function that points to setSat. Pass satData to setSat. Next ",
    "description": "",
    "tags": null,
    "title": "Task 4: Update Buttons.jsx",
    "uri": "/assignments/orbit-report/update-buttons/index.html"
  },
  {
    "content": "With your application set up, you are ready to make your first component.\nCreating a Component Create a directory called components within src. Inside components make a new file called Hello.jsx Write a function called Hello that does not have any parameters and returns a \u003cdiv\u003e that contains one \u003cp\u003e tag that just says “Hello World!”. At the front of your function declaration add export default. This will allow us to import it into other files. At this point, your Hello.jsx file should look something like this:\nexport default function Hello() { return( \u003cdiv\u003e \u003cp\u003eHello World!\u003c/p\u003e \u003c/div\u003e ); } Warning Components can only return one parent element of HTML. If you look at the code above, the \u003cdiv\u003e is the parent element and \u003cp\u003e is the child element. If we placed the \u003cp\u003e tag outside of the \u003cdiv\u003e tag, we would get an error and the app would not run. As you add more and more HTML to a component, make sure that your code only has one parent element!\nCalling Your Component If you ran your app, you wouldn’t see your new component. Time to change that by calling it in the App component.\nRefactoring default App.jsx Inside src, locate App.jsx. The default App.jsx file will look like the following code block:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import { useState } from 'react' import reactLogo from './assets/react.svg' import viteLogo from '/vite.svg' import './App.css' function App() { const [count, setCount] = useState(0) return ( \u003c\u003e \u003cdiv\u003e \u003ca href=\"https://vitejs.dev\" target=\"_blank\"\u003e \u003cimg src={viteLogo} className=\"logo\" alt=\"Vite logo\" /\u003e \u003c/a\u003e \u003ca href=\"https://react.dev\" target=\"_blank\"\u003e \u003cimg src={reactLogo} className=\"logo react\" alt=\"React logo\" /\u003e \u003c/a\u003e \u003c/div\u003e \u003ch1\u003eVite + React\u003c/h1\u003e \u003cdiv className=\"card\"\u003e \u003cbutton onClick={() =\u003e setCount((count) =\u003e count + 1)}\u003e count is {count} \u003c/button\u003e \u003cp\u003e Edit \u003ccode\u003esrc/App.jsx\u003c/code\u003e and save to test HMR \u003c/p\u003e \u003c/div\u003e \u003cp className=\"read-the-docs\"\u003e Click on the Vite and React logos to learn more \u003c/p\u003e \u003c/\u003e ) } export default App Remove all highlighted lines as shown above and add the following code below:\nAdd an import statement to the top of App.jsx importing your component from the correct file. In this case, your import statement would look like: import Hello from \"./components/Hello\".\nInside the App() function, within the \u003cdiv\u003e tags, add the following line:\n\u003cHello /\u003e At this point, your App.jsx component should look something like this:\nimport { useState } from 'react' import './App.css' import Hello from \"./components/Hello\"; function App() { return ( \u003c\u003e \u003cdiv\u003e \u003cHello /\u003e \u003c/div\u003e \u003c/\u003e ) } export default App Run your application using npm run dev to see your rendered component!\n",
    "description": "",
    "tags": null,
    "title": "Make a New Component",
    "uri": "/react-lsn1/reading/first-component/index.html"
  },
  {
    "content": "Besides this book, this class uses additional platforms for enrollment, assignments, and grading.\nCanvas LaunchCode monitors your progress in this class through a management system called Canvas. It provides a central location to manage the flow of information, but it does not hold the actual course content. Instead, it links to the lessons you need, and it keeps a record of your completed assignments and scores.\nLogin to Canvas Access Canvas and the course materials at this link . To login, use your launchcode.org username and password, which are the same ones you used to apply for this class.\nCanvas Dashboard After logging in, you will arrive at your dashboard. Your Canvas dashboard displays the LaunchCode courses you can access, upcoming due dates, and several menu items.\nClicking on a course title takes you to that class’ homepage. This page shows upcoming due dates, announcements, general information, and menu options. You will probably use the Syllabus and Assignments options the most often.\nSyllabus Page The syllabus page provides general information, such as a description of the class, the timeline for the course, a calendar, and a todo list. Scrolling down on the page shows the Course Summary, which holds links to individual tasks (reading, quizzes, assignments, etc.).\nThis page is a good place to answer the questions “What do I need to do next?” and “How can I quickly find and review an old topic?”.\nAssignments Page This page sorts required tasks by date or type. We regularly add new tasks to this list so check back here often. Old content remains active, allowing you to use the links for reference and review.\nClicking on a specific title brings up information about that task, including the due date, points possible, instructions, and links.\nEven though much of the course content can be accessed without logging in, the best choice is to begin your course work from within Canvas. That way your progress gets recorded and your scores will update smoothly as you complete quizzes. Also, submitting files for the larger assignments should only be done through Canvas.\nNote If you are in a part-time class, your assignments will be organized into modules for each class. The modules are locked in order so you have to work in the order of the class. Past students have reported that the system with modules have helped them stay on task and helped them more easily keep track of the structure of the class.\n",
    "description": "",
    "tags": null,
    "title": "Class Platforms",
    "uri": "/introduction/reading/class-platforms/index.html"
  },
  {
    "content": "We will need Node.js to run JavaScript code in our IDE.\nSetting up Node Installing Node on your computer also installs the NPM Command Line Interface (CLI), which allows you to run specialized commands in the terminal .\nFollow this link to the Node website , and examine the selection screen:\nThe LTS version of Node is an older, reliable build that has been tested, debugged, and runs well. The Current version brings in newer features, but it is still being tested. Either option works for this course, but we recommend downloading the LTS version.\nClick on the Windows or MacOS icon to download the installer to your computer. If you have a different operating system, select its 64-bit option from the list below the icons.\nRun the installation program and follow the on-screen instructions.\nAccept the license agreement. When asked for the installation location, etc., use the default options. Verify that the installation was successful by opening a new terminal window and running the command node -v. The output should match the version you downloaded.\n$ node -v v##.##.# Note After installing new programs, you will need to open a new terminal window to run their commands for the first time. This includes node both Node.js and Git. If you see a ‘_ is not recognized as an internal or external command’ error (Windows) or ‘command not found’ error (Mac), this might be the case.\nNote At the time of this walkthrough was last updated, December 2023, the LTS version of node is 20.9.0. As long as your node version is 20.x.x then you should not encounter any issues within this book.\nTroubleshooting: If it doesn’t install, try adding sudo before npm and then run the command again.\n",
    "description": "",
    "tags": null,
    "title": "Installing Node",
    "uri": "/installations/install-node/index.html"
  },
  {
    "content": "The general syntax for this method is:\nMath.random() This method returns a random decimal value between 0 and 1, which can be stored in a variable or used in a calculation.\nNote that 0 is a possible selection, but 1 is NOT.\nExample 1 2 3 4 for (i=0; i\u003c5; i++){ let randNum = Math.random(); console.log(randNum); } Console Output\n0.34992592600591066 0.11861535165960668 0.019710093901842862 0.7751799992655235 0.46782849511194136 Generate a Random Integer If a random integer must be generated, the result of Math.random() can be manipulated with operators (+, -, *, /) and other Math methods.\nThe trick to creating a random integer is to multiply Math.random() by a whole number and then round the result to remove the decimal portion. The choice of using the ceil, floor, or round method affects the numbers generated.\nExplore the example below:\nExample 1 2 3 4 for (i=0; i \u003c 5; i++){ let num = Math.random()*10; console.log(`floor = ${Math.floor(num)}, ceil = ${Math.ceil(num)}, round = ${Math.round(num)}`); } Console Output\nfloor = 0, ceil = 1, round = 0 floor = 6, ceil = 7, round = 7 floor = 2, ceil = 3, round = 3 floor = 8, ceil = 9, round = 8 floor = 9, ceil = 10, round = 10 After multiplying Math.random() by 10, applying the floor method gives numbers between 0 and 9. Using the ceil method shifts the range up one digit, generating values between 1 and 10. Using the round method gives the widest range, generating numbers between 0 and 10.\nRather than trying to remember which method to use, one choice is to ALWAYS use floor to round to an integer:\nMath.floor(Math.random()*10) generates a number from 0 - 9. Math.floor(Math.random()*120) generates a number from 0 - 119. To start our range at 1, just add 1 to the rounded value:\nMath.floor(Math.random()*10) + 1 generates a number from 1 - 10. Math.floor(Math.random()*120) + 1 generates a number from 1 - 120. By changing the value that multiplies Math.random() we specify the range for the numbers we want to generate.\nMath.floor(Math.random()*maxValue) generates a number from 0 to (maxValue-1). Math.floor(Math.random()*maxValue) + 1 generates a number from 1 to maxValue. ",
    "description": "",
    "tags": null,
    "title": "Math.random Examples",
    "uri": "/appendices/math-method-examples/random-examples/index.html"
  },
  {
    "content": "The general syntax for this method is:\nMath.round(number) This method returns number rounded to the nearest integer value.\nNumerical strings can also be evaluated, but should be avoided as a best practice.\nExample 1 2 3 4 console.log(Math.round(1.33)); console.log(Math.round(-28.7)); console.log(Math.round(8.5)); console.log(Math.round(\"101.45\")); Console Output\n1 -29 9 101 Math.round also works on arrays, but must be combined with the map array method. The syntax for this is:\narrayName.map(Math.round) Example 1 2 3 let numbers = [1.33, 4, 8.5, -15.523, 8.49]; console.log(numbers.map(Math.round)); Console Output\n[ 1, 4, 9, -16, 8 ] ",
    "description": "",
    "tags": null,
    "title": "Math.round Examples",
    "uri": "/appendices/math-method-examples/round-examples/index.html"
  },
  {
    "content": ".push() And .pop() Examples .push() The general syntax for this method is:\narrayName.push(item1, item2, ...) This method adds one or more items to the END of an array and returns the new length.\nThe new items may be of any data type.\nExample let arr = ['a', 'b', 'c']; console.log(arr.push('d', 'f', 42)); console.log(arr); Output\n6 ['a', 'b', 'c', 'd', 'f', 42] .pop() The general syntax for this method is:\narrayName.pop() This method removes and returns the LAST element in an array.\nNo arguments are placed inside the parentheses ().\nExample let arr = ['a', 'b', 'c', 'd', 'e']; arr.pop(); console.log(arr); Output\ne ['a', 'b', 'c', 'd'] ",
    "description": "",
    "tags": null,
    "title": "push and pop Examples",
    "uri": "/appendices/array-method-examples/push-pop-examples/index.html"
  },
  {
    "content": "The general syntax for the style property:\nelement.style.aStyleProperty The style property is an object that allows you to read and update the INLINE style properties of the element. The style property does NOT read or update styles defined in a \u003cstyle\u003e tag or an external CSS file linked with a \u003clink\u003e tag.\nExample \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eDOM Examples\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003estyle property Example\u003c/h1\u003e \u003cdiv id=\"strawberry\" style=\"color: red;\"\u003eStrawberry\u003c/div\u003e \u003cdiv id=\"blackberry\" style=\"color: purple; font-size: 5px\"\u003eBlackberry\u003c/div\u003e \u003cscript\u003e let strawberry = document.querySelector(\"#strawberry\"); console.log(strawberry.style.color); let blackberry = document.querySelector(\"#blackberry\"); console.log(blackberry.style.fontSize); // Update the font size of strawberry strawberry.style.fontSize = \"45px\"; console.log(strawberry.style.fontSize); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Console Output\nred 5px 45px ",
    "description": "",
    "tags": null,
    "title": "style property Examples",
    "uri": "/appendices/dom-method-examples/style-property-examples/index.html"
  },
  {
    "content": "The Math methods provide useful actions, but each one is fairly specific in what it does (e.g. taking a square root). At first glance, this might seem to limit how often we need to call on Math. However, the methods can be manipulated or combined to produce some clever results.\nRandom Selection From an Array To select a random item from the array happiness = ['Hope', 'Joy', 'Peace', 'Love', 'Kindness', 'Puppies', 'Kittens', 'Tortoise'], we need to randomly generate an index value from 0 to 7. Since Math.random() returns a decimal number between 0 and 1, the method on its own will not work.\nThe Math.random appendix page describes how to generate random integers by combining the random and floor methods. We will use this functionality now.\nLet’s define a function that takes an array as a parameter. Since we might not know how many items are in the array, we cannot multiply Math.round() by a specific value. Fortunately, we have the length property…\nExample Open up KindessSelection.js in javascript-projects/objects-and-math/chapter-examples. Run the code to see how it works!\n1 2 3 4 5 6 7 8 9 10 function randomSelection(arr){ let index = Math.floor(Math.random()*arr.length); return arr[index]; } let happiness = ['Hope','Joy','Peace','Love','Kindness','Puppies','Kittens','Tortoise']; for (i=0; i \u003c 8; i++){ console.log(randomSelection(happiness)); } Console Output\nTortoise Love Kindness Hope Kittens Kindness Love Hope The happiness array has a length of 8, so in line 2 Math.floor(Math.random()*arr.length) evaluates as Math.floor(Math.random()*8), which generates an integer from 0 to 7. Line 3 then returns a random selection from the array.\nRounding to Decimal Places The ceil, floor, and round methods all take a decimal value and return an integer, but what if we wanted to round 5.56789123 to two decimal places? Let’s explore how to make this happen by starting with a simpler example.\nMath.round(1.23) returns 1, but what if we want to round to one decimal place (1.2)? We cannot alter what round does—it always returns an integer. However, we CAN change the number used as the argument.\nLet’s multiply 1.23 by 10 (1.23*10 = 12.3) and then apply the method. Math.round(12.3) returns 12. Why do this? Well, if we divide 12 by 10 (12/10 = 1.2) we get the result of rounding 1.23 to one decimal place.\nCombining these steps gives us Math.round(1.23*10)/10, which returns the value 1.2.\nLet’s return to 5.56789123 and step through the logic for rounding to two decimal places:\nStep Description Math.round(5.56789123*100)/100 Evaluate the numbers in () first: 5.56789123*100 = 556.789123 Math.round(556.789123)/100 Apply the round method to 556.789123 557/100 Perform the division 557/100 = 5.57 The clever trick for rounding to decimal places is to multiply the original number by some factor of 10, round the result, then divide the integer by the same factor of 10. The number of digits we want after the decimal are shifted in front of the ‘.’ before rounding, then moved back into place by the division.\nDecimal Places In Answer Multiply \u0026 Divide By Syntax 1 10 Math.round(number*10)/10 2 100 Math.round(number*100)/100 3 1000 Math.round(number*1000)/1000 Check Your Understanding Question Which of the following correctly rounds 12.3456789 to 4 decimal places?\nMath.round(12.3456789)*100/100 Math.round(12.3456789*100)/100 Math.round(12.3456789*10000)/10000 Math.round(12.3456789)*10000/10000 ",
    "description": "",
    "tags": null,
    "title": "Combining Math Methods",
    "uri": "/objects-and-math/reading/math-applications/index.html"
  },
  {
    "content": "There is another JavaScript construct that can also be used for iteration, the while loop. The while loop provides a much more general mechanism for iterating. Like a for loop, it uses a condition to determine whether the loop body will continue to execute. Unlike a for loop, however, it does not have initial and update expressions.\nwhile Loop Syntax The general syntax of a while loop looks like this:\nwhile (boolean expression) { body } A while loop will continue to repeat as long as its boolean expression evaluates to true. The condition typically includes a value or variable that is updated within the loop, so that the expression eventually becomes false.\nFlow of Execution of the while Loop We can visualize the flow of execution of a while loop as follows.\nHere is the flow of execution for a while loop:\nEvaluate the condition, which yields a value of true or false. If the condition is false, exit the while loop and continue execution at the next statement after the loop body. If the condition is true, execute the loop body and then go back to step 1. for Loops Rewritten as while Loops We can use the while loop to create any type of iteration we wish, including anything that we have previously done with a for loop. For example, consider our initial for loop example.\n1 2 3 for (let i = 0; i \u003c 51; i++) { console.log(i); } This can be rewritten as a while loop. Check out while-Loop-Example.js in loops/chapter-examples in javascript-projects to see how!\n1 2 3 4 5 6 let i = 0; while (i \u003c 51) { console.log(i); i++; } Instead of relying on the initial and update expressions, as we do in a for loop, we must manage the state of our loop manually. To do this, before entering the while loop, we will create the variable i and initialize it to 0, the first number we want to print. This variable plays the same role as the loop variable in a for loop. Every iteration will print i and then increment i to the next value, until it reaches the value 51. The loop continues to iterate until the condition i \u003c 51 evaluates to false.\nYou can almost read the while statement as if it were in a natural language: while i is less than 51, continue executing the body of the loop.\nExample What happens if you forget to include i++ at the end of the while loop above?\nBeyond for Loops We stated earlier that while loops are more flexible than for loops. Now we will look at an example that illustrates this.\nThis program is an example of input validation. It prompts the user to enter a positive number, converting the input string to the number data type. If the number is not positive, then the user is prompted again within the body of the loop. As long as the user continues to input non-positive numbers, the loop will continue to iterate.\n1 2 3 4 5 6 7 8 9 const input = require('readline-sync'); let num = input.question('Please enter a positive number:'); num = Number(num); while (num \u003c= 0) { num = input.question('Invalid input. Please enter a positive number:'); num = Number(num); } This example illustrates the additional flexibility provided by while loops. While we use for loops to iterate over fixed collections (a string, an array, a collection of integers), the while loop can be used to iterate in more general circumstances. For the input validation example, at runtime it cannot be determined how many times the loop will repeat.\nInfinite Loops, Revisited It is easier to create an infinite while loop than an infinite for loop. To see this, consider what happens to our first while loop example if we forget to update the loop variable.\n1 2 3 4 5 let i = 0; while (i \u003c 51) { console.log(i); } This is an infinite loop. The variable i is initialized to 0 and never updated, so the condition i \u003c 51 will always be true. If you ran this program, you would see an never-ending list of zeros.\nEven when we remember to update the counter, we must be careful to make sure that the condition will eventually be false.\n1 2 3 4 5 6 let i = 0; while (i \u003c 51) { console.log(i); i--; } In this case, i-- decreases the value of the counter. Since i starts at 0, i \u003c 51 will always be true. If you ran this program, you would see an ever-expanding list of negative numbers.\nTip At some point, everyone creates an infinite loop. When this happens to you, typing control-c will usually force your program to stop.\nCheck Your Understanding Question True/False: You can rewrite any for loop as a while loop.\nQuestion The following code contains an infinite loop. Which is the best explanation for why the loop does not terminate?\n1 2 3 4 5 6 7 8 9 let n = 10; let answer = 1; while (n \u003e 0) { answer = answer + n; n = n + 1; } console.log(answer); n starts at 10 and is incremented by 1 each time through the loop, so it will always be positive. answer starts at 1 and is incremented by n each time, so it will always be positive You cannot compare n to 0 in a while loop. You must compare it to another variable. In the while loop body, we must set n to false, and this code does not do that. ",
    "description": "",
    "tags": null,
    "title": "while Loops",
    "uri": "/loops/reading/while-loops/index.html"
  },
  {
    "content": "Learning Objectives Upon completion of this chapter, you should be able to do the following:\nDescribe how to debug programs using console.log Explain the three common error types: syntax error, runtime error, logic error Give examples of each of the three common error types Explain some best practices to avoid errors and debugging Explain how ReferenceError and SyntaxError may occur, with examples Key Terminology While reading this chapter, you will notice the following key terms listed by the page they first appear on. As you read, you should make note of the definitions of these terms.\nWhat is Debugging? bugs debugging syntax errors runtime errors logic errors Categories of Errors parsing stage execution stage syntax exceptions Diagnosing Error Messages token syntax highlighting Error Types error type built-in object Chapter Content Reading Exercises: Debugging Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 6: Errors and Debugging",
    "uri": "/errors-and-debugging/index.html"
  },
  {
    "content": "While debugging is an unavoidable part of programming, you can reduce the number of bugs you encounter by working carefully.\nStart Small This is probably the best piece of advice for programmers at every level. It can be tempting to sit down and write an entire program all at once. However, this leaves a large number of possibilities when the program does not work. The errors could be hiding anywhere in the code. The more code, the more possibilities exist. Where to start? How to figure out what went wrong?\nWhen you start work on a large program, break the process down into smaller steps. Begin coding one very small part—even if that’s just 2 lines of code. Then make sure the program runs properly before adding the next small part.\nRegularly running your code is quick and easy, and doing so gives you immediate feedback about how the code will run.\nKeep It Working Once you have a small part of your program working, the next step is to figure out something small to add to it. If you keep adding small pieces to the program, one at a time, it is much easier to figure out what went wrong. Any error that occurs was almost certainly introduced by the last line or two of code that was added. Less new code makes it easier to locate the problem.\nHere is your new mantra, “Get something working and keep it working.” Repeat this throughout your career as a programmer. It’s a great way to avoid frustration and reduce stress while creating amazing (and working) code.\nGet something working and keep it working.\nResearch has shown that with every little success, your brain releases a tiny bit of a chemical that makes you happy. So you can keep yourself happy and make programming more enjoyable by creating lots of small victories for yourself.\n",
    "description": "",
    "tags": null,
    "title": "How to Avoid Debugging",
    "uri": "/errors-and-debugging/reading/how-to-avoid-debugging/index.html"
  },
  {
    "content": "As you progress through this class, you will find yourself having to fix problems in your code. Whether the code simply won’t run or is giving you the wrong answer, fixing problems with code is a vital part of being a programmer. The process of working through issues in code is called debugging. We will cover debugging in depth in a later chapter, but here is what we need to know now.\nErrors are common and even the most experienced programmers are regularly debugging their code. Asking for help from peers and mentors can be a key part of the process. Google is very much an acceptable resource when it comes to debugging. Asking for Help Before asking for help, make sure that you have the answers to some of the questions that may be asked of you and that your questions to the person who is helping you are detailed. “My code doesn’t work” or “Why doesn’t my code work?” are difficult questions for someone to answer. “I tried using console.log() like the chapter outlined, but the screen says ‘Invalid Input’. What does that mean and how might I go about addressing it?” is a good question to ask.\nHere are some tips on what information you might need when asking for help:\nAsk Google for help first. If you see an error message as opposed to “Hello World!”, copy it into Google and search. You may find the answer right away! If you don’t find the answer or are not sure you understand it, make note of that. Make sure to document everything. The steps you took before you encountered the problem, screenshots of what the error message is, what your application should be able to do. This is all helpful information for the person assisting you. When asking your question, make sure that the person knows what documentation you have. If you took a screenshot or saved Google results related to the error message, inform the person who is helping you before you all start working together on the issue. When trying to fix an error in code, many people start by following the exact same steps to see if they get the same results. The more information you can give the person who is helping you, the easier it will be for them to help you.\nNote These tips also apply to whenever you encounter a technical issue. Having screenshots and a recorded set of steps that you took before encountering the issue can help tech support figure out how to correct the problem and assist you!\n",
    "description": "",
    "tags": null,
    "title": "Fixing Errors in Your Code",
    "uri": "/how-to-write-code/reading/debugging/index.html"
  },
  {
    "content": "Your First Program We are going to walk you through a very simple workflow, or sequence of steps, to start coding.\nRead the Instructions Every starter code repository (repo) in this course will contain instructions. We strongly suggest you read ALL of the instructions before writing any code. This will help you understand the goal of your code and may explain any hurdles you might encounter while building your program.\nWe suggest reading the rest of this page before diving into the code. Since this is the first time you are pulling from our GitHub repository, you will need to set up your new PAT, create a directory on your computer to store your work, and practice with the terminal. You will do great!\nStarter Code When you have finished reading through the instructions, use this starter code to complete your first program.\nOpen your terminal You will use the terminal to create a location to store the code repos. The terminal will also communicate with GitHub.\nRun the following command: ls This will list any files or directories (folders) wherever you are in the terminal.\nIt may look like this:\nls Console Output\nApplications Desktop Downloads Documents ... Choose a folder where you would like to store your course work. This example stores work on the Desktop; you may choose a different location if you desire.\nUse the following command to change directory, or move, into that folder: cd \u003clocation-name\u003e cd Desktop Make a directory (folder) to save your course work: mkdir \u003cdirectory-name\u003e mkdir LaunchCode To verify if your directory exists run the ls command again. You should see your new directory listed. Move into your new directory with the following command: cd \u003cdirectory-name\u003e cd LaunchCode You are now ready to add the repo to your directory.\nGo to GitHub You will be provided links to all of the repos in the course. You will need to fork and clone them to your computer. When you fork a repo, you are making a copy of the original code. Any changes you make to the forked repo will not be applied to the original code. This keeps the original starter code intact for the next student. Cloning the repo moves the repo code onto your computer. If the code is not on your computer, you will not be able to work with it.\nMake sure you are signed into your GitHub account.\nGo to the starter code repo and fork it. A. The original repo. Notice the Lauchcode rocket next to the name.\nB. The Fork button. Click this to create a fork. You should be redirected to your fork once you click this button.\nYour forked repo will look like this: A. The repo will have the same name, but below it will be a link to the original repo.\nB. Click the green \u003c\u003e Code button. This will open a new dropdown menu.\nC. In the dropdown menu, select HTTPS. A URL will appear. Copy that URL.\nGitHub has documentation on Forking a repository and Cloning your forked repository if you would like more guidance.\nHandling Changes to the Original Repo Occasionally, a change is made to the original repo that you forked. These changes may be additions to the code, updates to a package version that you are using, or something else that you would really like to be included in your forked repo.\nTo get these changes, Git has a process in place called “fetching the upstream”. You do NOT have to do any of this right now or even be able to explain exactly how this works, but we encourage you to bookmark this page in case you are ever directed to fetch the upstream.\nNow what is the upstream? The upstream here is the repo you forked, in this case, LaunchCodeEducation/js-hello-world. Your repo (speudusa/js-hello-world in the above example image) is set up as the origin. With this distinction in place, let’s look at the commands required.\nRun the command, git remote -v. If you only see the origin repo listed, you need to add an upstream. You can do so with the command git remote add upstream \u003cPASTE-UPSTREAM-URL-HERE\u003e. Run git remote -v to make sure that you now have both an origin repo and an upstream repo listed. With an upstream set up, run the command git fetch upstream. Once this command is done running, run the command git merge upstream/main. Now if you compare your code, you should see the change that was made in your upstream repo in your origin repo too. Just a reminder that we are sharing this information with you now in case you need it, not because it is a required portion of this walkthrough.\nNote You may be wondering what main is in the above command. main is what we call a branch and we will be learning more about what a branch is later in this book!\nCheck out this article from Github for more information on each of these steps!\nBack to the Terminal Return to your terminal. You should be in the directory for your course work.\nRun the following command: git clone \u003cpaste-the-URL-here\u003e\ngit clone https://github.com/YOUR-GITHUB-USERNAME/REPO-NAME.git Your PAT will act as your password to perform HTTPS Git operations. For example, if you are working on a repo with the example URL, https://github.com/username/repo.git , your terminal might look like the following:\nNote If you set up your github account to work with SSH instead of a personal-access token then you will not be asked to enter your username or password.\ngit clone https://github.com/username/repo.git Username: your_username Password: your_token If you will be pushing and pulling from a repository multiple times in quick succession, you can save your PAT in memory for a short time. Run the command:\ngit config credential.helper 'cache --timeout=3600' The next time you access your remote repo, Git will ask for your username and PAT. It will then remember your credentials for a certain amount of time. In the example above, timeout=3600 saves your information for 1 hour (3600 seconds). You can adjust the amount of time up or down as needed.\nOpen Visual Studio Code We haven’t learned how to code yet, but we can still write and run our first program. This exercise asks you to create and run small amounts of code, and it reinforces the LaunchCode principle of learning by doing.\nWe have used the phrase Hello, World as an example throughout this chapter because it represents the traditional first program for a new coder. Printing a single message is one of the simplest tasks a program can carry out.\nHello, World will be your first program as well. Welcome to the club!\nOpen your IDE, and open your new repo. You should see a file tree with the same files from the repo. Double click on hello.js to open the file. You should see instructions and console.log(\"Hello\");. You can type in this file now. Follow the instructions to complete your first program.\nEnter your code on line 7 to print ‘Hello, World! Open a terminal inside Visual Studio Code. If you need a refresher, checkout the installation guide . Inside your terminal type the following commands npm install (We will explore this more in future chapters). You will see that more files and directories have been added to your project. That is expected. Next type the command node hello.js. This should run the program, which in this case prints your message in the terminal. node hello.js Hello World! Another way to run your program is to use the Run and Debug button found on the left icon menu of Visual Studio Code. Set it to Node.js for this project. Try out the other prompts starting at line 10. When you are done with this code, you will need to push it up to your GitHub repo. This is how you use git to track each change in your code. git status This will show you all the files you changed in red. Note that many of these were added by the npm install command. This is expected. git add . This will ‘stage’, or prepare all the changed files in this directory to be updated in your GitHub repo. git status This will show you all your staged files in green, which are now ready to update in GitHub. git commit -m \"\u003ctype a message here\u003e\" This will ‘commit’, or finalize your changes in git. Between the quotes, replace the text and carrot symbols \u003c \u003e with a short message describing your changes. This will help you remember what you did while looking through many commits later. git push This will actually send the committed changes to your GitHub repo. Example of staging and pushing up your latest commit Colors may not match exactly as in your terminal.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 git status On branch main Your branch is ahead of 'origin/main' by 1 commit. (use \"git push\" to publish your local commits) Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git restore \u003cfile\u003e...\" to discard changes in working directory) modified: hello.js Untracked files: (use \"git add \u003cfile\u003e...\" to include in what will be committed) package-lock.json no changes added to commit (use \"git add\" and/or \"git commit -a\") git add . git status On branch main Your branch is ahead of 'origin/main' by 1 commit. (use \"git push\" to publish your local commits) Changes to be committed: (use \"git restore --staged \u003cfile\u003e...\" to unstage) modified: hello.js new file: package-lock.json git commit -m \"now says Hello World\" [main b1bb194] now says Hello World 2 files changed, 3457 insertions(+), 1 deletion(-) create mode 100644 package-lock.json computer:js-hello-world username$$ git push Enumerating objects: 9, done. Counting objects: 100% (9/9), done. Delta compression using up to 10 threads Compressing objects: 100% (7/7), done. Writing objects: 100% (7/7), 31.59 KiB | 15.80 MiB/s, done. Total 7 (delta 3), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (3/3), completed with 1 local object. To https://github.com/USERNAME/js-hello-world.git 408d555..b1bb194 main -\u003e main Line 1 git status used to check on the latest version of the project. Line 6 notes Changes not staged for commit. We need to add these. Line 17 git add . will add these to GitHub when we are ready to push up. Line 28 git commit -m \"now says Hello World\" A commit is like taking a photo of the latest version of your code. The message (-m) acts like a caption to keep track of the changes. Line 32 git push sends our latest code up to GitHub. We will learn more about these in a later chapter.\nNote When writing your commit messages, you will encounter problems if you include punctuation inside of double quotes \"This wont work!\".\nIf you have a strong desire to include punctuation, you must wrap your commit message inside of single quotes 'Like this!'.\nBack to GitHub You should see your latest version of your code along with your commit message.\nCheck Your Understanding Question Which of the following correctly prints Coding Rocks? There may be more than one valid option.\nconsole.log(Coding Rocks) console.log(Coding Rocks); console.log('Coding Rocks') console.log(\"Coding Rocks'); console.log(\"Coding Rocks\"); ",
    "description": "",
    "tags": null,
    "title": "Your First Program",
    "uri": "/how-programs-work/reading/your-first-program/index.html"
  },
  {
    "content": "Using our knowledge of forms, the DOM, and HTTP, the commanders of our favorite space shuttle program asked us to create a quick launch checklist. We have four fields that need to be filled out with vital information: the pilot’s name, the co-pilot’s name, the fuel levels, and the mass of the cargo.\nOur pilot, Chris, and the co-pilot, Blake, have been hard at work securing the cargo and filling the shuttle tank. All we need to do is use validation to ensure that we have all of the info for the space shuttle program and make sure no one prematurely launches the shuttle.\nRequirements Create a Launch Checklist Form for astronauts to fill out in preparation for launch. The form should do the following:\nUse preventDefault() to prevent a request from being sent out and the page reloading.\nValidate the user-submitted data to ensure the following:\nThe user entered something for every field. The user entered text for names and numbers for fuel and cargo levels. With validation, update a list of what is currently ready or not ready for the shuttle launch.\nIndicate what is good or bad about the shuttle and whether it is ready for launch by using the DOM to update the CSS.\nFetch some planetary JSON to update the mission destination with vital facts and figures about where the shuttle is headed.\nAssignment Tasks Task 1: Setting Up the Starter Code Task 2: Adding Validation Task 3: Fetching Planetary Data Task 4: Submitting Your Work ",
    "description": "",
    "tags": null,
    "title": "Assignment 5: Launch Checklist",
    "uri": "/assignments/launch-checklist/index.html"
  },
  {
    "content": "Finally, we need some JSON to fill in the crew on the mission destination. Our planetary data can be found in JSON format . Review the list and decide which planet you want to send our intrepid crew to and make note of the index number.\nNote When fetching more than one JSON object, we get an array of all of the JSON objects. In this case, that means an array of our possible mission destinations. When picking the mission destination, just pick the item in the array you want and start counting at 0.\nIn scriptHelper.js, you have three functions for this task: myFetch(), pickPlanet(), and addDestinationInfo(). First, review the comments in addDestinationInfo(). This is the format of the innerHTML for the missionTarget div, which you can locate using the document parameter of addDestinationInfo(). addDestinationInfo() does not need to return anything. pickPlanet() takes in one argument: a list of planets. Using Math.random(), return one planet from the list with a randomly-selected index. myFetch() has some of the code necessary for fetching planetary JSON, however, it is not complete. You need to add the URL and return response.json().\nNow it is time to make use of these helper functions in script.js. We provided some of the code necessary:\nlet listedPlanets; // Set listedPlanetsResponse equal to the value returned by calling myFetch() let listedPlanetsResponse; listedPlanetsResponse.then(function (result) { listedPlanets = result; // console.log(listedPlanets); }).then(function () { // console.log(listedPlanets); // Below this comment call the appropriate helper functions to pick a planet fom the list of planets and add that information to your destination. }) First, do as the comments in the code tell you and set listedPlanetsResponse equal to the value returned when calling myFetch(). This value is going to be a promise. If we head to our browser and open up our developer tools, we can now see a list of the planets. Then using pickPlanet() and addDestinationInfo(), select a planet at random from listedPlanets and pass that information to addDestinationInfo(). Reload your page and check out your site to see the mission target information.\n",
    "description": "",
    "tags": null,
    "title": "Task 3: Fetching Planetary Data",
    "uri": "/assignments/launch-checklist/planet-fetch/index.html"
  },
  {
    "content": "The End Result After you implement everything, the following form submission would result in the proper updates to the launchStatus and faultyItems list.\nWith only 890 liters of fuel, the status of the launch becomes red and states that the shuttle is not ready. The list has also updated to indicate that that is not enough fuel for the shuttle to launch.\nIf the user forgets to enter the cargo mass, then an alert pops up letting the user know that all fields are required.\nIf the user switches up the information that needs to go in the fields, then an alert pops up letting the user know that they have tried to enter invalid information.\nSubmission Even if everything is working perfectly with your site, the autograder may still be counting something as wrong. Here are some steps you can take to make sure your great work is counted as such!\nMake sure that all of your methods are complete in scriptHelper.js! The autograder needs to check your logic for each of the methods. script.js should contain calls to these functions. If the tests are failing, make sure that you did not modify bundle.js or remove \u003cscript src = \"bundle.js\"\u003e\u003c/script\u003e from index.html. The autograder needs bundle.js linked as a script in index.html in order to run properly. ",
    "description": "",
    "tags": null,
    "title": "Task 4: Submitting Your Work",
    "uri": "/assignments/launch-checklist/submission/index.html"
  },
  {
    "content": "A checkbox input represents a box to check. Checkbox inputs can be used by themselves or in groups. Checkbox inputs are best used with \u003clabel\u003e tags.\nType Syntax Description Demo checkbox \u003cinput type=\"checkbox\" name=\"signUp\"/\u003e A small box for marking form option as checked. sign up Examples Example One checkbox. No value attribute is set, so the default value of on is submitted.\n\u003clabel\u003ecrew\u003cinput type=\"checkbox\" name=\"crewReady\"/\u003e\u003c/label\u003e Submitted (if checked)\ncrewReady=on Example Multiple checkbox inputs. All with different name attributes.\n\u003cdiv\u003eActivities\u003c/div\u003e \u003clabel\u003ecooking\u003cinput type=\"checkbox\" name=\"cooking\"/\u003e\u003c/label\u003e \u003clabel\u003erunning\u003cinput type=\"checkbox\" name=\"running\"/\u003e\u003c/label\u003e \u003clabel\u003emovies\u003cinput type=\"checkbox\" name=\"movies\"/\u003e\u003c/label\u003e Submitted (if cooking and movies are checked)\ncooking=on\u0026movies=on Example Multiple checkbox inputs with the SAME name attribute.\n\u003cdiv\u003eIngredients\u003c/div\u003e \u003clabel\u003eOnion\u003cinput type=\"checkbox\" name=\"ingredient\" value=\"onion\"/\u003e\u003c/label\u003e \u003clabel\u003eButter\u003cinput type=\"checkbox\" name=\"ingredient\" value=\"butter\"/\u003e\u003c/label\u003e \u003clabel\u003eRice\u003cinput type=\"checkbox\" name=\"ingredient\" value=\"rice\"/\u003e\u003c/label\u003e Submitted (if butter and rice are checked)\ningredient=butter\u0026ingredient=rice Check Your Understanding Question What is the default value submitted for a \u003ccheckbox\u003e when checked?\n",
    "description": "",
    "tags": null,
    "title": "Checkbox Input",
    "uri": "/user-input-with-forms/reading/checkbox-input/index.html"
  },
  {
    "content": "If you had microscope powerful enough to view the data stored on a computer’s hard drive, or in its memory, you would see lots of 0s and 1s. Each such 0 and 1 is known as a bit. A bit is a unit of measurement, like a meter or a pound. Collections of computer data are measured in bits; every letter, image, and pixel you interact with on a computer is represented by bits.\nWe work with more complex data when we program, including numbers and strings. This section examines how such data is represented within a computer.\nRepresenting Numbers A byte is a set of 8 bits. Bytes look like 00101101 or 11110011, and they represent a binary number, or a base-2 number. A binary number is a number representation that uses only 0s and 1s. The numbers that you are used to, which are built out of the integers 0…9, are decimal numbers, or base-10 numbers.\nSince each bit can have one of two values, each byte can have one of 8 = 256 different values.\nIt may not be obvious, but every decimal integer can be represented as a binary integer, and vice versa. There are 256 different values a byte may take, each of which can be used to represent a decimal integer, from 0 to 255.\nNote We will not go into binary to decimal number conversion. If you are interested in learning more, there are many tutorials online that can show you the way.\nIn this way, the bits in a computer can be viewed as integers. If you want to represent values greater than 255, just use more bits!\nRepresenting Strings Strings are collections of characters, so if we can represent each character as a number, then we’ll have a way to go from a string to a collection of bits, and back again.\nCharacter Encodings Unlike the natural translation between binary and decimal numbers, there is no natural translation between integers and characters. For example, you might create a pairing of 0 to a, 1 to b, and so on. But what integer should be paired with $ or a tab? Since there is no natural way to translate between characters and integers, computer scientists have had to make such translations up. Such translations are called character encodings.\nThere are many different encodings, some of which continue to evolve as our use of data evolves. For instance, the most recent versions of the Unicode character encoding include emoji characters, such as 🌮.\nThe ASCII Encoding Most of the characters that you are used to using—including letters, numbers, whitespace, punctuation, and symbols—are part of the ASCII (pronounced ask-ee) character encoding. This standard has changed very little since the 1960s, and it is the foundation of all other commonly-used encodings.\nNote ASCII stands for American Standard Code for Information Interchange, but most programmers never remember that, so you shouldn’t try to either.\nASCII provides a standard translation of the most commonly-used characters to one of the integers 0…127, which means each character can be stored in a computer using a single byte.\nASCII maps a to 97, b to 98, and so on for lowercase letters, with z mapping to 122. Uppercase letters map to the values 65 through 90. The other integers between 0 and 127 represent symbols, punctuation, and other assorted odd characters. This scheme is called the ASCII table, and rather than replicate it here, we refer you to an excellent one online .\nIn summary, strings are stored in a computer using the following process:\nBreak a string into its individual characters. Use a character encoding, such as ASCII, to convert each of the characters to an integer. Convert each integer to a series of bits using decimal-to-binary integer conversion. Fun Fact JavaScript uses the UTF-16 encoding, which includes ASCII as a subset. We will rarely need anything outside of its ASCII subset, so we will usually talk about “ASCII codes” in JavaScript.\nCharacter Encodings in JavaScript JavaScript provides methods to convert any character into its ASCII code and back.\nThe string method charCodeAt takes an index and returns the ASCII code of the character at that index.\nExample let nonprofit = \"LaunchCode\"; console.log(nonprofit.charCodeAt(0)); console.log(nonprofit.charCodeAt(1)); console.log(nonprofit.charCodeAt(2)); console.log(nonprofit.charCodeAt(3)); console.log(nonprofit.charCodeAt(4)); console.log(nonprofit.charCodeAt(5)); console.log(nonprofit.charCodeAt(6)); console.log(nonprofit.charCodeAt(7)); console.log(nonprofit.charCodeAt(8)); console.log(nonprofit.charCodeAt(9)); Console Output\n76 97 117 110 99 104 67 111 100 101 To convert an ASCII code to an actual character, use String.fromCharCode().\nExample let codes = [76, 97, 117, 110, 99, 104, 67, 111, 100, 101]; let characters = String.fromCharCode(codes[0]) + String.fromCharCode(codes[1]) + String.fromCharCode(codes[2]) + String.fromCharCode(codes[3]) + String.fromCharCode(codes[4]) + String.fromCharCode(codes[5]) + String.fromCharCode(codes[6]) + String.fromCharCode(codes[7]) + String.fromCharCode(codes[8]) + String.fromCharCode(codes[9]); console.log(characters); Console Output\nLaunchCode ",
    "description": "",
    "tags": null,
    "title": "Encoding Characters",
    "uri": "/stringing-characters-together/reading/encoding-characters/index.html"
  },
  {
    "content": "DOM and JavaScript can handle numerous event types. We will discuss a few different types of events here. As you continue your studies of the DOM and events, you may find these two reference links helpful.\nW3Schools Event reference . MDN Event reference . load Event The DOM includes the load event, which is triggered when the window, elements, and resources have been loaded by the browser. Why is it important to know when things have loaded? Remember you can’t interact with HTML elements in JavaScript unless they have been loaded into the DOM.\nPreviously, we were moving the \u003cscript\u003e element below any HTML elements that we needed to reference in the DOM. Using the load event on the global variable window is an alternative to \u003cscript\u003e placement. When the load event has triggered on the window as a whole, we can know that all the elements are ready to be used.\nExample A \u003cscript\u003e tag is in \u003cheader\u003e and all DOM code is inside load event handler.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eWindow Load Event\u003c/title\u003e \u003cscript\u003e // add load event handler to window window.addEventListener(\"load\", function() { // put DOM code here to ensure elements have been loaded console.log('window loaded'); let ring = document.getElementById(\"ring-button\"); ring.addEventListener(\"click\", function (event) { console.log(\"ring ring\"); }); let knock = document.getElementById(\"knock-button\"); knock.addEventListener(\"click\", function (event) { console.log(\"knock knock\"); }); }); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"toolbar\"\u003e \u003cbutton id=\"ring-button\"\u003eRing Bell\u003c/button\u003e \u003cbutton id=\"knock-button\"\u003eKnock on Door\u003c/button\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e Console Output (if “Knock on Door” button is clicked)\nwindow loaded knock knock mouseover and mouseout Events There are many mouse related DOM events. We have already used the click event. Another example of a mouse event is the mouseover event, which is triggered when the mouse cursor enters an element.\nExample We can use mouseover event to add a \"\u003e\" to the innerHTML of the element that the mouse cursor has been moved over.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eMouseover Event\u003c/title\u003e \u003cscript\u003e window.addEventListener(\"load\", function() { let list = document.getElementById(\"lane-list\"); list.addEventListener(\"mouseover\", function (event) { let element = event.target; element.innerHTML += \"\u003e\"; console.log(\"target\", element); }); }); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e Mouseover Race \u003cul id=\"lane-list\"\u003e \u003cli\u003eLane 1\u003c/li\u003e \u003cli\u003eLane 2\u003c/li\u003e \u003cli\u003eLane 3\u003c/li\u003e \u003c/ul\u003e \u003c/body\u003e \u003c/html\u003e Example HTML Output (if the mouse is moved over elements in the list)\nMouseover Race Lane 1\u003e\u003e\u003e\u003e\u003e\u003e\u003e Lane 2\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Lane 3\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Similarly, there is a mouseout event that is triggered when the cursor leaves a given element.\nCheck Your Understanding Question Which error occurs when you try to access an element that has not been loaded into the DOM?\nQuestion What is true when the load event is triggered on window?\nThe console is clear. All elements and resources have been loaded by the browser. Your files have finished uploading. ",
    "description": "",
    "tags": null,
    "title": "Event Types",
    "uri": "/dom-and-events/reading/event-types/index.html"
  },
  {
    "content": "Operators and Operands Now that we can store data in variables, let’s explore how we can generate new data from existing data.\nAn operator is one or more characters that represents a computation like addition, multiplication, or division. The values an operator works on are called operands.\nThe following are all legal JavaScript expressions whose meaning is more or less clear:\n20 + 32 hour - 1 hour * 60 + minute minute / 60 5 ** 2 (5 + 9) * (15 - 7) For example, in the calculation 20 + 32, the operator is + and the operands are 20 and 32.\nThe symbols + and -, and the use of parentheses for grouping, mean in JavaScript what they mean in mathematics. The asterisk (*) is the symbol for multiplication, and ** is the symbol for exponentiation. Addition, subtraction, multiplication, and exponentiation all do what you expect.\nExample console.log(2 + 3); console.log(2 - 3); console.log(2 * 3); console.log(2 ** 3); console.log(3 ** 2); Console Output\n5 -1 6 8 9 We use the same terminology as before, stating that 2 + 3 returns the value 5.\nWhen a variable name appears in the place of an operand, it is replaced with the value that it refers to before the operation is performed. For example, suppose that we wanted to convert 645 minutes into hours. Division is denoted by the operator /.\nExample let minutes = 645; let hours = minutes / 60; console.log(hours); Console Output\n10.75 In summary, operators and operands can be combined to create expressions that are evaluated upon execution. Let’s discuss some specific types of operators\nArithmetic Operators Some of most commonly-used operators are the arithmetic operators, which carry out basic mathematical operations. These behave exactly as you are used to, though the modulus operator (%) may be new to you.\nOperator Description Example Addition (+) Adds the two operands 2 + 3 returns 5 Subtraction (-) Subtracts the two operands 2 - 3 returns -1 Multiplication (*) Multiplies the two operands 2 * 3 returns 6 Division (/) Divides the first operand by the second 6 / 2 returns 3 Modulus (%) Aka the remainder operator. Returns the integer remainder of dividing the two operands 7 % 5 returns 2 Exponentiation (**) Calculates the base (first operand) to the exponent (second operand) power, that is, baseexponent 3 ** 2 returns 95 ** -1 returns 0.2 Increment (++) Adds one to its operand. If used before the operand (++x), returns the value of its operand after adding one; if used after the operand (x++), returns the value of its operand before adding one If x is 2, then ++x sets x to 3 and returns 3, whereas x++ returns 2 and, only then, sets x to 3 Decrement (--) Subtracts one from its operand. The return value is analogous to that for the increment operator If x is 2, then --x sets x to 1 and returns 1, whereas x-- returns 2 and, only then, sets x to 1 While the modulus operator (%) is common in programming, it is not used much outside of programming. Let’s explore how it works with a few examples.\nThe % operator returns the remainder obtained by carrying out integer division of the first operand by the second operand. Therefore, 5 % 3 is 2 because 3 goes into 5 one whole time, with a remainder of 2 left over.\nExamples 12 % 4 is 0, because 4 divides 12 evenly (that is, there is no remainder) 13 % 7 is 6 6 % 2 is 0 7 % 2 is 1 The last two examples illustrate a general rule: An integer x is even exactly when x % 2 is 0 and is odd exactly when x % 2 is 1.\nNote The value returned by a % b will be in the range from 0 to b (not including b).\nTip If remainders and the modulus operator seem tricky to you, we recommend getting additional practice at Khan Academy .\nOrder of Operations When more than one operator appears in an expression, the order of evaluation depends on the rules of precedence. JavaScript follows the same precedence rules for its arithmetic operators that mathematics does.\nParentheses have the highest precedence and can be used to force an expression to evaluate in the order you want. Since expressions in parentheses are evaluated first, 2 * (3 - 1) is 4, and (1 + 1) ** (5 - 2) is 8. You can also use parentheses to make an expression easier to read, as in (minute * 100) / 60, even though it doesn’t change the result. Exponentiation has the next highest precedence, so 2 ** 1 + 1 is 3 and not 4, and 3 * 1 ** 3 is 3 and not 27. Can you explain why? Multiplication, division, and modulus operators have the same precedence, which is higher than addition and subtraction, which also have the same precedence. So 2 * 3 - 1 yields 5 rather than 4, and 5 - 2 * 2 is 1, not 6. Operators with the same precedence are evaluated from left-to-right. So in the expression 6 - 3 + 2, the subtraction happens first, yielding 3. We then add 2 to get the result 5. If the operations had been evaluated from right to left, the result would have been 6 - (3 + 2), which is 1. Tip The acronym PEMDAS can be used to remember order of operations:\nP = parentheses\nE = exponentiation\nM = multiplication\nD = division\nA = addition\nS = subtraction\nNote Due to an historical quirk, an exception to the left-to-right rule is the exponentiation operator **. A useful hint is to always use parentheses to force exactly the order you want when exponentiation is involved:\n// the right-most ** operator is applied first console.log(2 ** 3 ** 2) // use parentheses to force the order you want console.log((2 ** 3) ** 2) Console Output\n512 64 Check Your Understanding Question What is the value of the following expression?\n16 - 2 * 5 / 3 + 1 14 24 3 13.666666666666666 Question What is the output of the code below?\nconsole.log(1 + 5 % 3); Question What is the value of the following expression?\n2 ** 2 ** 3 * 3 768 128 12 256 ",
    "description": "",
    "tags": null,
    "title": "Operations",
    "uri": "/data-and-variables/reading/operations/index.html"
  },
  {
    "content": "Earlier, we said that a parameter “behaves like a variable that exists only within the function.” While this is true, the relationship between variables and parameters is a bit more complicated.\nFunction Scope The scope of a variable is the extent to which a variable is visible within a program. Scope consists of all locations within a program where a variable can be used or modified. Introducing functions gives us one of our first examples of limited variable scope—a situation in which a variable is not visible throughout an entire program.\nIn particular, a variable defined using let within a function is not visible outside of that function.\nExample This function takes a string and returns the result of removing all hyphens, -, from the string.\nfunction removeHyphens(str) { let strWithoutHyphens = '' for (let i = 0; i \u003c str.length; i++) { if (str[i] !== '-') { strWithoutHyphens += str[i]; } } return strWithoutHyphens; } let launchCodePhone = \"314-254-0107\"; console.log(removeHyphens(launchCodePhone)); console.log(strWithoutHyphens); Console Output\n3142540107 ReferenceError: strWithoutHyphens is not defined (rest of error message omitted) The last line of this program tries to print the variable strWithoutHyphens to the console, resulting in an error. The previous line calls removeHyphens, at the end of which strWithoutHyphens has the value \"3142540107\". However, once the function finishes execution all variables and parameters within the function are destroyed. This is why the last line results in a ReferenceError; there is no variable named strWithoutHyphens in existence when that line executes.\nThis is what we mean when we refer to scope. A variable is not necessarily usable throughout an entire program. Where it can be used depends on the context in which it is defined. For variables and parameters within a function, their scope is known as function scope. This means that they are only visible within the function in which they are defined.\nVariable Shadowing We just learned that variables and parameters defined within a function are not visible outside of that function. The opposite scenario is more complicated; a variable defined outside a function may be visible within the function, in certain circumstances.\nExample In some cases, a variable defined outside of a function may be visible within the function.\nlet message = \"Hello, World!\"; function printMessage() { console.log(message); } printMessage(); Console Output\nHello, World! Even though message is defined outside the function, it is still visible within the function. When printMessage is called and console.log(message); executes, message has the value \"Hello, World!\", so that value is printed to the console. This means that the scope of message extends to the function printMessage.\nWarning It is NOT the case that all variables defined outside of a function are visible within every function. The reality is a bit more nuanced than this, and will be explored in depth in a later chapter.\nThere is, however, a specific type of variable that is visible to every function, known as a global variable. We remarked earlier in this section that a global variable is created when initializing a variable without using let, const, or var, and they should be used very rarely.\nTry It! What is the output of the following program? Form a hypothesis for yourself before running it.\nOnce you have answered that question, try relocating the declaring message to other locations to see how it affects the program. For example, you might try placing it within or after printMessage.\nlet message = \"Hello, World!\"; function printMessage() { console.log(message); } printMessage(); message = \"Goodbye\"; printMessage(); An interesting thing happens when a function parameter has the same name as a variable that is in-scope.\nExample let message = \"Hello, World!\"; function printMessage(message) { console.log(message); } printMessage(\"Goodbye\"); Console Output\nGoodbye While the variable message declared on line 1 is technically visible within printMessage (that is, it is in-scope), it is hidden by the function parameter of the same name. When printMessage(\"Goodbye\") is called and console.log(message) executes, message has the value \"Goodbye\", which is the argument passed into the function. This phenomenon is called shadowing, based on the metaphor that a function parameter “casts it’s shadow over” a variable of the same name, effectively hiding it.\nThere is no good reason to intentionally use variable shadowing in your program. In fact, doing so can lead to confusion over which of the two variables is being used in a given situation. For this reason, you should avoid naming variables and function parameters the same name.\nCheck Your Understanding Question What does the following code output?\nlet num = 42; function isEven (num) { return num % 2 === 0; } console.log(isEven(43)); ",
    "description": "",
    "tags": null,
    "title": "Parameters and Variables",
    "uri": "/functions/reading/parameter-variables/index.html"
  },
  {
    "content": "Quick Review In the previous chapter, we learned how to define a function and its parameters.\nExample function addTwoToNumber(num){ return num += 2; } console.log(addTwoToNumber(12)); Console Output\n14 When called, the parameter num is passed an argument, which in this case is the number 12. The function executes and returns the value 14, which the console.log statement prints.\nFunctions Can Call Other Functions Functions should only accomplish one (preferably simple) task. To solve more complicated tasks, one small function must call other functions.\nExample function addTwoToNumber(num){ return num += 2; } function addFiveToNumber(value){ let result = addTwoToNumber(value) + 3; return result; } console.log(addFiveToNumber(12)) Console Output\n17 Of course, there is no need to write a function to add 5 to a value, but the example demonstrates calling a function from within another function.\nWhat Is Recursion? In programming, the divide and conquer strategy solves a problem by breaking it down into smaller, simpler pieces. If these pieces can all be solved in exactly the same way, then we gain an additional advantage. Solving the big problem becomes a process of completing and combining the smaller parts.\nSplitting up a large task into smaller, identical pieces allows us to reuse a single function rather than coding several different functions. We accomplish this by either:\nSetting up a loop to call one function lots of times, OR Building a function that splits up the large problem for us, until a simplest case is found and solved. Recursion is the process of solving a larger problem by breaking it into smaller pieces that can all be solved in exactly the same way. The clever idea behind recursion is that instead of using a loop, a function simply calls itself over and over again, with each step reducing the size of the problem.\nThrough recursion, a problem eventually gets reduced to a very simple task, which can be immediately solved. This small answer sets up the solution for the previous step, which in turn solves the next bigger step. Properly built, the function combines all of the small answers to solve the original problem.\nMany new programmers (and even veteran ones) find recursion an abstract and tricky concept. One helpful way to approach the idea is to walk through an example.\n",
    "description": "",
    "tags": null,
    "title": "Recursion",
    "uri": "/more-on-functions/reading/recursion/index.html"
  },
  {
    "content": "In this step, you will create the following: A table that provides the following data about the satellites:\nName Type of Satellite Launch Date Status Comments have been provided to help structure the table. You can keep them or remove them.\nInside the Table.jsx component: Notice that the Table function starts with the sat prop provided. Start by updating the table header. It needs a total of four \u003cth\u003e tags. They need to hold text for the following data points: Name, Type of Satellite, Launch Date, and Status. The body of the table will use the map function to render the data based on which button a user selects. Iterate through the sat prop using map; use the following callbacks: id and data. The map function will return data to each row in the table. The \u003ctr\u003e tag in the table body needs a key. Set the key equal to the id. Create a total of four \u003ctd\u003e tags. Use dot notation to assign the correct object key. The code below would render the name of a satellite. \u003ctd\u003e{data.name}\u003c/td\u003e The value for each \u003ctd\u003e tag needs to correspond to the \u003cth\u003e tags. This means that we want names of satellites to be rendered in a column of names. For the Status, create a conditional that will tell a user if a satellite is active or inactive based on its operational value. Status Check You should have a Banner, four buttons, and a table. When you click on a button, satellites with the selected orbit type should be rendered.\nGreat job! You are ready for the next steps.\nStep 6 contains optional styling features. You can skip this step, if you would like.\nStep 7 contains information for running the auto-grading tests. You will need to do step 7.\n",
    "description": "",
    "tags": null,
    "title": "Task 5: Update Table.jsx",
    "uri": "/assignments/orbit-report/update-table/index.html"
  },
  {
    "content": "Throughout this book, you will find a variety of different sections and practice exercises. We are writing this guide to help you make the most of the book.\nConcept Checks Many pages end with a “Check Your Understanding” header. This section is full of questions for you to double check that you understand the concepts in the reading. Although your score does not count towards your final grade in the class, you should use it to help evaluate your understanding of the main concepts. After you read the chapter, you will take a quiz in Canvas that includes all of these questions.\nExamples Examples are times when we tie a concept we have just learned to a potential real world application.\nThe label “Try It” signals an example that includes code you can modify and augment to quickly reinforce what you have just read. Open up your code editor and play around with these!\nSupplemental Content Occasionally, you will find a link to another resource. While not required reading, these additional resources can boost your learning with videos, other examples, and more information about the code.\nJavaScript in Context Our approach is different from other ways you can learn JavaScript. The book focuses on programming fundamentals. These fundamentals are problem-solving and transferable concepts. While we will cover the exact way to perform certain tasks in JavaScript, we want to remind you that these tasks are relatively common and many programming languages have ways to carry them out. As you review them, focus on learning what the concept is and how it works to ensure that you are reading to cover the same concept in another language. In reality, software applications are not just one language. Many of them require you to use multiple programming languages together to accomplish the goal. So as you progress in your career and start building these complex applications, you may have to learn more programming languages!\n",
    "description": "",
    "tags": null,
    "title": "Using This Book",
    "uri": "/introduction/reading/using-this-book/index.html"
  },
  {
    "content": ".reverse() Example The general syntax for this method is:\narrayName.reverse() This method is straightforward - it reverses the order of the elements in the array.\nNo arguments are placed inside the parentheses ().\nExample let arr = ['At', 'banana', 'orange', 'apple', 'zoo']; arr.reverse(); console.log(arr); Output\n[ 'zoo', 'apple', 'orange', 'banana', 'At' ] ",
    "description": "",
    "tags": null,
    "title": "reverse Example",
    "uri": "/appendices/array-method-examples/reverse-examples/index.html"
  },
  {
    "content": "JavaScript, like most programming languages, provides a mechanism for terminating a loop before it would complete otherwise. The break keyword, when used within a loop, will immediately terminate the execution of any loop. Program execution then continues at the next line of code below the loop.\nExample This loop executes 12 times, for values of i from 0 to 11. During the twelfth iteration, i is 11 and the condition i \u003e 10 evaluates to true for the first time and execution reaches the break statement. The loop is immediately terminated at that point.\n1 2 3 4 5 6 7 8 9 for (let i = 0; i \u003c 42; i++) { // rest of loop body if (i \u003e 10) { break; } } The break statement can also be used within a while loop. Consider a situation where we are searching for a particular element in an array. (We have seen that JavaScript has array methods that can carry out array searches, but many programming languages do not.)\nWe can use a while loop to say, while we have not reached the end of the array, continue iterating. We can then include a break within a conditional check to say, when we have found the element we are searching for, exit the loop.\nExample A while loop can be used with break to search for an element in an array.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 let numbers = [ /* some numbers */ ]; let searchVal = 42; let i = 0; while (i \u003c numbers.length) { if (numbers[i] === searchVal) { break; } i++; } if (i \u003c numbers.length) { console.log(\"The value\", searchVal, \"was located at index\", i); } else { console.log(\"The value\", searchVal, \"is not in the array.\"); } Notice that we use a while loop in this example, rather than a for loop. This is because our loop variable, i, is used outside the loop. When we use a for loop in the way we have been, the loop variable exists only within the loop.\n",
    "description": "",
    "tags": null,
    "title": "Terminating a Loop with break",
    "uri": "/loops/reading/terminating-loops/index.html"
  },
  {
    "content": "If you still cannot find the bug in your code after using the strategies outlined in this chapter, do not hesitate to reach out to other programmers.\nWhether you are asking your teaching assistant, another student, or a stranger in an online forum, you should first be able to answer the 3 questions outlined below.\nNot only will these questions help others assist you more directly, but they may just lead you to the answer yourself!\nWhat is the problem with your code? Describe the error you are experiencing with as much detail as possible.\nBad: “My program is broken.”\nBad: “I’m getting this error.”\nGood: “There is a ReferenceError on line 23, but it’s not clear to me what’s causing it.”\nWhat have you done to try to address the problem? Another programmer can glean a lot of information by hearing what you have already tried.\nBad: Asking for help immediately.\nBad: Using trial and error without any specific direction.\nGood: “I added user input validation, but I am still seeing the problem.”\nWhere have you looked for an answer? Bad: “I haven’t looked online at all.”\nBad: “I Googled ‘js range error’ and didn’t see anything.”\nGood: “I Googled ‘js range error boolean expression’ and found a question on Stack Overflow that seemed relevant. I tried the recommended solution, but it didn’t fix my problem.”\n",
    "description": "",
    "tags": null,
    "title": "Asking Good Questions",
    "uri": "/errors-and-debugging/reading/asking-good-questions/index.html"
  },
  {
    "content": "That was a lot. Here is a quick version of the workflow.\n1. Read the Instructions 2. Open the terminal ls can list files and directories in your current location cd \u003cdirectory-name\u003e changes your location to the named directory mkdir \u003cdirectory-name\u003e creates a new directory 3. Go to GitHub Fork the repo Clone the repo to your computer 4. Open Visual Studio Code Open your new repo Open the terminal - make sure you are in your project directory Run the command: npm install Write your code Run your code often to check your progress Save your changes 5. Push up to GitHub In the terminal run the following commands: git status git add . git status - make sure you added things you wanted git commit -m \"with a message\" git push 6. Verify your changes are in your GitHub repo ",
    "description": "",
    "tags": null,
    "title": "Workflow Recap",
    "uri": "/how-programs-work/reading/workflow-recap/index.html"
  },
  {
    "content": "Learning Objectives Understand strings, like arrays, are indexed collections Index into a string using bracket notation Describe what it means for strings to be immutable Find the length of a string using the .length method Create strings with special characters: \\n, \\t, unicode (e.g. ‘\\u03a9’) Include quotes with strings by escaping them Use template literals to create strings that rely on variable values Use common string methods: indexOf, charAt, toLowerCase, toUpperCase, trim, replace, slice Understand how ASCII allows characters to be represented as numbers Convert characters from string to ASCII codes and back using charCodeAt and String.fromCharCode Key Terminology collection character template literal bracket notation ASCII Unicode object property method Content Links Reading Exercises: Strings ",
    "description": "",
    "tags": null,
    "title": "Chapter 7: Stringing Characters Together",
    "uri": "/stringing-characters-together/index.html"
  },
  {
    "content": "As with variables, choosing good, descriptive names for the functions you write is important. It makes your code more readable, and therefore more maintainable and more bug-resistent.\nUse Camel Case As with variables, use camel case. All functions in JavaScript should begin with a lowercase letter, with the first letter of subsequent words capitalized.\nExample Good\nconst astronautCount = 7; const fuelTempCelsius = -225; let isReady = false; Bad\nconst AstronautCount = 7; const fuel_temp_celsius = -225; let is_ready = false; Use Verb/Noun Pairs When Applicable A function carries out an action, and it often produces some specific output or effect. Therefore, using a verb/noun pair can go a long way toward making it clear what a function does. A good verb can describe the action, and a good noun can describe the output, or the object that is being affected by the function.\nExample Good\nprepareForLiftoff fillFuelTank getCountdownStatus isReadyForLiftoff Bad\nliftoff fillup countdownStatus isReady As we noted earlier, for boolean functions it is conventional that their names start with “is” or “has” whenever possible.\nCreating a verb/noun pair for a function name doesn’t always make sense, but when it does, you should use this format to create a good, descriptive name.\nUse Descriptive Names We have repeatedly reminded you to use descriptive names, but now we want to expand on this point. You should prefer long, descriptive names over short, abbreviated names. If you can read a function name and understand what it does from the name alone, then the function has a good name.\nExample Good\nconvertCelsiusToFahrenheit isValidLaunchCode updateMissionControl Bad\nconvertC validCode msgToMC If you find yourself writing a comment to describe what your function does, consider whether a better name might remove the need for such additional explanation. The best function (and variable) names are those that are self-documenting—descriptive enough not to need further explanation.\nUsing self-documenting names means that the code that uses your function will be more readable, since your explanatory comments are not visible where the function is used. Additionally, it is easy for comments to become inaccurate; when you update your code to change behavior, there is nothing forcing you to also update your comments. For this reason, some programmers live by the maxim, “Comments lie.” While we won’t go so far as to say that you should never use comments in your code, we do believe that comments should not be used to make up for poor function and variable names.\nCheck Your Understanding Question Which is the BEST name for the following function?\nfunction myFunc(radius) { let area = Math.PI * radius**2; return area; } area calculateAreaOfCircle circle shape ",
    "description": "",
    "tags": null,
    "title": "Naming Functions",
    "uri": "/functions/reading/naming-functions/index.html"
  },
  {
    "content": "The String Operator + So far we have only seen operators that work on operands which are of type number, but there are operators that work on other data types as well. In particular, the + operator can be used with string operands to concatenate, or join together two strings.\nExample \"Launch\" + \"Code\" evaluates to \"LaunchCode\"\nLet’s compare + used with numbers to + used with strings.\nExample console.log(1 + 1); console.log(\"1\" + \"1\"); Console Output\n2 11 This example demonstrates that the operator + behaves differently based on the data type of its operands.\nWarning So far we have only seen examples of operators working with data of like type. For the examples 1 + 1 and \"1\" + \"1\", both operands are of type number and string, respectively.\nIt is possible, however, to mix types with an expression such as 1 + \"1\". The results of doing so can be unexpected, and at this stage of your coding journey we strongly advise against creating such expressions.\nWe will explore such “mixed” operations in a later chapter.\nCompound Assignment Operators A common programming task is to update the value of a variable in reference to itself.\nExample let x = 1; x = x + 1; console.log(x); Console Output\n2 Line 2 may seem odd to you at first, since it uses the value of the variable x to update x itself. This technique is not only legal in JavaScript (and programming in general) but is quite common. It essentially says, “update x to be one more than its current value.”\nThis action is so common, in fact, that it has a shorthand operator, +=. The following example has the same behavior as the one above.\nExample let x = 1; x += 1; console.log(x); Console Output\n2 The expression x += 1 is shorthand for x = x + 1.\nThere is an entire family of such shorthand operators, known as compound assignment operators.\nOperator name Shorthand Meaning Addition assignment a += b a = a + b Subtraction assignment a -= b a = a - b Multiplication assignment a *= b a = a * b Division assignment a /= b a = a / b ",
    "description": "",
    "tags": null,
    "title": "Other Operators",
    "uri": "/data-and-variables/reading/other-operators/index.html"
  },
  {
    "content": "Radio inputs allow a user to pick one option out of a grouping of options. Radio inputs with the same name are grouped. Only one radio input in a group can be chosen at a time. The value attribute of the chosen radio input will be submitted. Radio inputs are best used with \u003clabel\u003e tags.\nType Syntax Description Demo radio \u003cinput type=\"radio\" name=\"crewReady\" value=\"yes\"/\u003e A small circle that allows selecting one of multiple values. Used in groups of two or more. yesno Example \u003cform action=\"https://handlers.education.launchcode.org/request-parrot\" method=\"post\"\u003e Flight Rating: \u003clabel\u003eRough\u003cinput type=\"radio\" name=\"flightRating\" value=\"rough\"/\u003e\u003c/label\u003e \u003clabel\u003eFew Bumps\u003cinput type=\"radio\" name=\"flightRating\" value=\"fewBumps\"/\u003e\u003c/label\u003e \u003clabel\u003eSmooth\u003cinput type=\"radio\" name=\"flightRating\" value=\"smooth\"/\u003e\u003c/label\u003e \u003cbutton\u003eSend Report\u003c/button\u003e \u003c/form\u003e Submitted Values\nflightRating=smooth Check Your Understanding Question Should a group of radio inputs have the same value for the name attribute?\n",
    "description": "",
    "tags": null,
    "title": "Radio Input",
    "uri": "/user-input-with-forms/reading/radio-input/index.html"
  },
  {
    "content": "To ease into the concept of recursion, let’s start with a loop task.\nIn the Arrays chapter, we examined the join method , which combines the elements of an array into a single string. If we have arr = ['L', 'C', '1', '0', '1'], then arr.join('') returns the string 'LC101'.\nWe can reproduce this action with either a for or a while loop.\nJoining Array Elements With a Loop Examine the code samples below:\nExample Use a for loop to iterate through the array and add each entry into the newString variable. let arr = ['L', 'C', '1', '0', '1']; let newString = ''; for (i = 0; i \u003c arr.length; i++){ newString = newString + arr[i]; } console.log(newString); console.log(arr); Console Output\n'LC101' ['L', 'C', '1', '0', '1'] Example Use a while loop to add the first element in the array to newString, then remove that element from the array.\nlet arr = ['L', 'C', '1', '0', '1']; let newString = ''; while (arr.length \u003e 0){ newString += arr[0]; arr.shift(); } console.log(newString); console.log(arr); Console Output\n'LC101' [ ] Inside each loop, the code simply adds two strings together—whatever is stored in newString plus one element from the array. In the for loop, the element is the next item in the sequence of entries. In the while loop, the element is always the first entry from whatever remains in the array.\nOK, the loops join the array elements together. Now let’s see how to accomplish the same task without a for or while statement.\nBring In Recursion Concepts First, state the problem to solve: Combine the elements from an array into a string.\nSecond, split the problem into small, identical steps: Looking at the loops above, the “identical step” is just adding two strings together - newString and the next entry in the array.\nThird, build a function to accomplish the small steps: Let’s call the function combineEntries, and we will set an array as the parameter.\nfunction combineEntries(arrayName){ //TODO: Add code here } We want combineEntries to repeat over and over again until the task is complete.\nHow do we make this happen without using for or while?\nIdentifying the Base Case for and while loops end when a particular condition evaluates to false. In the examples above, these conditions are i \u003c arr.length and arr.length \u003e 0, respectively.\nWith recursion, we do not know how many times combineEntries must be called. To make sure the code stops at the proper time, we need to identify a condition that ends the process. This is called the base case, and it represents the simplest possible task for our function.\nif the base case is true, the recursion ends and the task is complete. if the base case is false, the function calls itself again.\nWe check for the base case like this:\nfunction combineEntries(arrayName){ if (baseCase is true){ //solve last small step //end recursion } else { //call combineEntries again } } For the joining task, the base case occurs when we pass in a one-element array (e.g. [ 'L' ]). With no other elements to join together, the function just needs to return 'L'.\nLet’s update combineEntries to check if the array contains only one item.\nfunction combineEntries(arrayName){ if (arrayName.length \u003c= 1){ return arrayName[0]; } else { //call combineEntries again } } arrayName.length \u003c= 1 sets up the condition for ending the recursion process. If it is true, the single entry gets returned, and the function stops. Otherwise, combineEntries gets called again.\nNote We define our base case as arrayName.length \u003c= 1 rather than arrayName.length === 1 just in case an empty array [] gets passed to the function.\nThe Case for the Base What if we accidentally typed arrayName.length === 2 as the condition for ending the recursion? If so, it evaluates to true for the array ['0', '1'], and the function returns '0'. However, this leaves the element '1' in the array instead of adding it to the string. By mistyping the condition, we ended the recursion process too soon.\nSimilarly, if we used arrayName[0] === 'Rutabaga' as the condition, then any array that does NOT contain the string 'Rutabaga' would never match the base case. In situations where the base case cannot be reached, the recursion process either throws an error, or it continues without end—an infinite loop.\nCorrectly identifying and checking for the base case is critical to building a working recursive process.\nCheck Your Understanding Question We can use recursion to remove all of the ‘i’ entries from the array ['One', 'i', 'c', 'X', 'i', 'i', 54].\nConsider the code sample below, which declares the removeI function.\nfunction removeI(arr) { if (baseCase is true){ //return final array //end recursion } else { //remove one 'i' entry from array //call removeI function again } }; Which TWO of the following work as a base case for the function? Feel free to test the options in VScode to check your thinking.\n!arr.includes('i') arr.includes('i') arr.indexOf('i')===-1 arr.indexOf('i') !== -1 Question The factorial of a number (n!) is the product of a positive, whole number and all the positive integers below it.\nFor example, four factorial is 4! = 4*3*2*1 = 24, and 5! = 5*4*3*2*1 = 120.\nConsider the code sample below, which declares the factorial function.\nfunction factorial(integer) { if (baseCase is true){ //solve last step //end recursion } else { //call factorial function again } }; Which of the following should be used as base case for the function?\ninteger === 1 integer \u003c 1 integer === 0 integer \u003c 0 ",
    "description": "",
    "tags": null,
    "title": "Recursion Walkthrough: The Base Case",
    "uri": "/more-on-functions/reading/walkthrough-recursion/index.html"
  },
  {
    "content": "Aside from letters, numbers, and symbols, there is another class of characters that we will occasionally use in strings, known as special characters. These characters consist of special character combinations that all begin with a \\ (backslash). They allow us to include characters in strings that would be difficult or impossible to include otherwise, such as Unicode characters that are not on our keyboards, control characters, and whitespace characters.\nThe most commonly-used special characters are \\n and \\t, which are the newline and tab characters, respectively. They work as you would expect.\nExample console.log(\"A message\\nbroken across lines,\\n\\tand indented\"); Console Output\nA message broken across lines, and indented We can also represent Unicode characters (most of which aren’t on a normal keyboard) using special character combinations of the form \\uXXXX, where the Xs are combinations referenced by the Unicode table . This allows us to use character sets other than the basic Latin characters that English is based on, such as Greek, Cyrillic, and Arabic, as well as a wider array of symbols.\nExample console.log(\"The interrobang character, \\u203d, combines ? and !\"); Console Output\nThe interrobang character, ‽, combines ? and ! We can also use the backslash, \\, to include quotes within a string. This is known as escaping a character.\nExample console.log(\"\\\"The dog's favorite toy is a stuffed hedgehog,\\\" said Chris\"); Console Output\n\"The dog's favorite toy is a stuffed hedgehog,\" said Chris Check Your Understanding Question Which of the options below prints 'Launch' and 'Code' on separate lines?\nconsole.log('Launch\\nCode'); console.log('Launch/nCode'); console.log('Launch', 'Code'); console.log('Launch\\tCode'); console.log('Launch/tCode'); ",
    "description": "",
    "tags": null,
    "title": "Special Characters",
    "uri": "/stringing-characters-together/reading/special-characters/index.html"
  },
  {
    "content": "Assignment Overview Project Introduction Task 1: Getting Started Task 2: Create the Banner Component Task 3: Update App.jsx Task 4: Update Buttons.jsx Task 5: Update Table.jsx Task 6: Optional Styling Task 7: Running the Auto-grading Tests ",
    "description": "",
    "tags": null,
    "title": "Assignment 6: Orbit Report",
    "uri": "/assignments/orbit-report/index.html"
  },
  {
    "content": "Styling has been provided if you would like to add it to your project.\nYou can start by importing styling.css into the following components:\nBanner.jsx Table.jsx Buttons.jsx Inside Buttons.jsx update the \u003cdiv\u003e in line 6 so that its className is equal to flex-container.\nReminder: This step is optional.\nNext ",
    "description": "",
    "tags": null,
    "title": "Task 6: Optional Styling",
    "uri": "/assignments/orbit-report/styling/index.html"
  },
  {
    "content": "As you work your way through this course you might find yourself wondering why we chose specific technologies and what job opportunities are available to someone with your newfound skillset.\nBelow you will find brief descriptions on the main technologies used in this course. Do not worry about understanding what each technology is used for at this very moment. This is just meant to serve as an outlook on what to expect throughout the course. You will learn more about each technology individually as you progress through the book.\nUnit 1 Technologies JavaScript: Reference back to this page React is a library developed and maintained by Facebook. This is one of the most widely used web technology used by front-end developers today. Node.js is a popular web technology primarily used for running JavaScript code on the server-side as opposed to the client-side. git is an open-source version-control system that you will be using throughout this course in order maintain code that you have written. JavaScript and React are considered cornerstones of building the part of websites users interact with called the front end. Many web development jobs ask for some knowledge of front end development and JavaScript.\nUnit 2 Technologies Once you complete Unit 1 you will move on to Unit 2 of this program. Unit 2 will involve learning either Java/Spring or C#/ASP.NET\nJava Spring C# ASP.NET These Unit 2 technologies are oftentimes used for the back end of a website. We will explore more about what the back end is in Unit 2, but lots of web development jobs ask for some understanding of back end development too.\nNote You may find yourself gravitating towards either front end or back end development throughout the course. That is totally to be expected! Many developers feel that they are stronger in one of these two areas. As you starting your journey in web development, we aim to teach you both so that you can decide which areas of web development you like the most yourself!\nDatabases Regardless of which Unit 2 programming language you learn you will be working with a MySQL database. You can find more on MySQL below.\nMySQL Additional Information You can also view the 2023 Stack Overflow developer survey results related to technologies here: Survey Results . While these surveys are cool, we want to note that this survey covers multiple industries. While Python is towards the top of the list in terms of popularity, you won’t find us teaching it to you in this class. That is because it is an immensely popular language in the field of data and not popular at all in web development.\n",
    "description": "",
    "tags": null,
    "title": "Technologies in This Course",
    "uri": "/introduction/reading/technologies-in-course/index.html"
  },
  {
    "content": "Content Links concat Examples includes Example indexOf Examples join Examples push and pop Examples reverse Example shift and unshift Examples slice Examples sort Examples splice Examples split Examples ",
    "description": "",
    "tags": null,
    "title": "Array Method Examples",
    "uri": "/appendices/array-method-examples/index.html"
  },
  {
    "content": ".shift() And .unshift() Examples .shift() The general syntax for this method is:\narrayName.shift() This method removes and returns the FIRST element in an array.\nNo arguments are placed inside the parentheses ().\nExample let arr = ['a', 'b', 'c', 'd', 'e']; arr.shift(); console.log(arr); Output\n'a' ['b', 'c', 'd', 'e'] .unshift() The general syntax for this method is:\narrayName.unshift(item1, item2, ...) This method adds one or more items to the START of an array and returns the new length.\nThe new items may be of any data type.\nExample let arr = ['a', 'b', 'c']; arr.unshift('hello', 121); console.log(arr); Output\n5 ['hello', 121, 'a', 'b', 'c'] ",
    "description": "",
    "tags": null,
    "title": "shift and unshift Examples",
    "uri": "/appendices/array-method-examples/shift-unshift-examples/index.html"
  },
  {
    "content": "The for loop is typically used to iterate through a fixed set of values that can be determined before the loop executes. This is why we say that a for loop exhibits definite iteration.\nOn the other hand, the while loop is more flexible, as we saw with the example of validating user input. In that case, we could not determine in advance how many times the loop would iterate; it depended entirely on the values provided by the user during program execution. For this reason, a while loop is often described as indefinite iteration. We expect that eventually the condition controlling the iteration will evaluate to false and the iteration will stop. (Unless we have an infinite loop, which is a problem we want to avoid.)\nWhile we saw that any for loop can be written as a while loop by manually creating and updating a loop variable, it is preferable to use a for loop when iterating over a collection or iterating a fixed number of times. Manually updating the variable in a while loop is more work for you, the programmer, and can lead to infinite loops if not handled properly.\nCheck Your Understanding Question You are asked to program a robot to move tennis balls from one box (Box #1) to another (Box #2), one-by-one. The robot should continue moving balls until Box #1 is empty, and balls may be added to the box after the robot begins its work.\nWhich type of loop should you use to write the program?\nwhile loop for loop Question You are asked to write a program similar to the one above, with the modification that a user may give the robot a specific number of balls to move from Box #1 to Box #2. (You can assume there will always be more balls than the user has asked the robot to move.)\nWhich type of loop should you use to write the program?\nwhile loop for loop ",
    "description": "",
    "tags": null,
    "title": "Choosing Which Loop to Use",
    "uri": "/loops/reading/choosing-loops/index.html"
  },
  {
    "content": "Learning Objectives Upon completion of this chapter, you should be able to do the following:\nUnderstand arrays, like strings, are indexed collections Create an array literal Create an array of size n with Array(n) Create arrays that store multiple types of values Create arrays that store other arrays (i.e. multi-dimensional arrays) Access elements within multi-dimensional arrays Find the length of an array using the .length method Index into an array using bracket notation Set an element of an array using bracket notation assignment Describe what it means for arrays to be mutable Understand what happens when asking for an element at index at which no element exists Use common array methods: concat, join, split, push, pop, shift, unshift, slice, reverse, sort, indexOf Convert character arrays to strings using .join('') Convert strings to characters arrays using .split('') Key Terminology While reading this chapter, you will notice the following key terms listed by the page they first appear on. As you read, you should make note of the definitions of these terms.\nArrays Are Like Strings array array length Working with Arrays index undefined mutable Array Methods .includes() .indexOf() .reverse() .sort() .pop() .push() .shift() .splice() .unshift() .concat() .join() .slice() .split() Multi-Dimensional Arrays multi-dimensional array Content Links Reading Exercises: Arrays Studio: Strings and Arrays ",
    "description": "",
    "tags": null,
    "title": "Chapter 8: Arrays Keep Things in Order",
    "uri": "/arrays/index.html"
  },
  {
    "content": "The practice of using functions to build other functions is known as function composition, or simply composition. To demonstrate, we consider a specific example.\nPalindrome Checker A palindrome can be defined as a word that is spelled the same backwards and forwards. Some examples are “tacocat”, “kayak”, and “racecar”.\nNote There are other factors that are sometimes included in the definition of a palindrome. For example, an alternative definition is that a palindrome is a sentence or phrase that contains letters in the same order, whether considered from beginning-to-end, or end-to beginning, ignoring punctuation, case, and spaces.\nWe want to write a boolean function—a function that returns true or false—to determine if a word is a palindrome.\nOne way to state the palindrome condition is to say that a palindrome is a string that is equal to its reverse. In other words, we can test for palindromes by taking a string, reversing it, and then comparing the reversed string to the original. If the two are equal, we have a palindrome.\nTo that end, it would be very useful to have a function that reversed a string, wouldn’t it?\nThe reverse Function Let’s write a function that, given a string, returns its reverse.\nOne approach uses the accumulator pattern:\nfunction reverse(str) { let reversed = ''; for (let i = 0; i \u003c str.length; i++) { reversed = str[i] + reversed; } return reversed; } This is the same algorithm that we used previously to :ref:reverse a string \u003creverse-string\u003e.\nAnother approach is to use the fact that there is a reverse method for arrays, and that the methods split and join allow us to go from strings to arrays and back (this was covered in array methods ).\nfunction reverse(str) { let lettersArray = str.split(''); let reversedLettersArray = lettersArray.reverse(); return reversedLettersArray.join(''); } Let’s break down the steps carried out by this function:\nTurn the string into an array of characters. We call str.split(''), using the empty string as the splitting character, returns an array of the individual characters that make up the string. Reverse the array of characters. To do this, we use the built-in array method reverse. Join the reversed character array into a string. We call .join(''). Joining with the empty string is the same as concatenating each of the individual characters together into a single string. Try It! Use method chaining to reduce the reverse function to a single line. Open the link below the source code above to give it a shot.\nThe isPalindrome Function Using our reverse function for strings, we can create our palindrome checker. Recall that our approach will be to take the string argument, reverse it, and then compare the reversed string to the original string.\nfunction reverse(str) { return str.split('').reverse().join(''); } function isPalindrome(str) { return reverse(str) === str; } Since isPalindrome uses our reverse function, this is an example of composition.\nTry It! Does our isPalindrome function work? Run it yourself to see!\nFunctions Should Do Exactly One Thing An important consideration when writing a function is size. By “size” we mean that functions should be short and, more importantly, do exactly one thing.\nThis principle is easier to state than to put into practice. For example, what if we had written isPalindrome without breaking out the reverse code into a separate function?\nfunction isPalindrome(str) { let reversed = str.split('').reverse().join(''); return reversed === str; } This function is still short, which is good. But does it do one thing (check if a string is a palindrome) or multiple things (check the string, and reverse a string)? This is a bit subjective, and here the answer is certainly debatable.\nSome cases will be much more clear-cut, however. Consider the sandwich function, makeSandwich, from the section A Good Function Writing Process . Suppose we wanted to expand the capability of our program to not only make a sandwich, but to also pour a beverage (to go along with our lunch). It would be a bad idea to amend our function to do both, ending up with a function that has a name like makeSandwichAndPourDrink.\nA much better solution would look like this:\nfunction makeSandwich( /*parameters*/ ) { // make the sandwich } function pourDrink( /*parameters*/ ) { // pour the drink } function makeLunch( /*parameters*/ ) { makeSandwich( /*parameters*/ ); pourDrink( /*parameters*/ ); } Why is this better? Smaller functions are easier to debug, for one thing. And by separating single responsibilities into individual functions, we also make our code easier to read and more reusable. In looking at the makeLunch function, it is very clear what is going on. First, it makes a sandwich, then it pours a drink.\nWere the makeLunch function to simply contain all of the code necessary to carry out both tasks, there would be no clear separation between one task and the other, and the only way we might describe the various sections of the larger function would be to use comments. And, as we have discussed , comments should be a secondary option for explaining your code.\n",
    "description": "",
    "tags": null,
    "title": "Composing Functions",
    "uri": "/functions/reading/composing-functions/index.html"
  },
  {
    "content": "console.log works fine for printing static (unchanging) messages to the screen. If we wanted to print a phrase greeting a specific user, then console.log(\"Hello, Dave.\"); would be OK as long as Dave is the actual user.\nWhat if we want to greet someone else? We could change the string inside the () to be 'Hello, Sarah' or 'Hello, Elastigirl' or any other name we need. However, this is inefficient. Also, what if we do not know the name of the user beforehand? We need to make our code more general and able to respond to different conditions.\nIt would be great if we could ask the user to enter a name, store that string in a variable, and then print a personalized greeting using console.log. Variables to the rescue!\nRequesting Data To personalize the greeting, we have to get input from the user. This involves displaying a prompt on the screen (e.g. “Please enter a number:”), and then waiting for the user to respond. Whatever information the user enters gets stored for later use.\nAs we saw earlier, each programming language has its own way of accomplishing the same task. For example, the Python syntax is input(\"Please enter your name: \"), while C# uses Console.ReadLine();.\nJavaScript also has a built-in module for collecting data from the user, called readline-sync. Unfortunately, using this module requires more than a single line of code.\nSyntax Gathering input from the user requires the following setup:\nconst input = require('readline-sync'); let info = input.question(\"Question text... \"); There is a lot going on here behind the scenes, but for now you should follow this bit of wisdom:\nI turn the key, and it goes.\nMost of us do not need to know all the details about how cars, phones, or microwave ovens work. We just know enough to interact with them in our day to day lives. Similarly, we do not need to understand how readline-sync works at this time. We just need to know enough to collect information from a user.\nAs you move through the course, you WILL learn about all of the pieces that fit together to make this process work. For now, here is a brief overview.\nLoad the Module In line 1, const input = require('readline-sync') pulls in all the functions that allow us to get data from the user and assigns them to the variable input.\nRecall that const ensures that input cannot be changed.\nHow to Prompt the User To display a prompt and wait for a response, we use the following syntax: let info = input.question(\"Question text... \");.\nWhen JavaScript evaluates the expression, it follows the instructions:\nDisplay Question text on the screen. Wait for the user to respond. Store the data in the variable info. For our greeting program, we would code let name = input.question(\"Enter your name: \");. The user enters a name and presses the Return or Enter key. When this happens, any text entered is collected by the input function and stored in name.\nTry it! const input = require('readline-sync'); let name = input.question(\"Enter your name: \"); Note that after entering a name, the program does not actually DO anything with the information. If we want to print the data as part of a message, we need to put name inside a console.log statement.\nAfter line 3, add console.log(\"Hello, \" + name + \"!\");, then run the code several times, trying different responses to the input prompt.\nBy storing the user’s name inside name, we gain the ability to hold onto the data and use it when and where we see fit.\nTry adding another + name term inside the console.log statement and see what happens. Next, add code to prompt the user for a second name. Store the response in otherName, then print both names using console.log.\nTry It! Update your code to request a user’s first and last name, then print an output that looks like:\nFirst name: Elite Last name: Coder Last, First: Coder, Elite Critical Input Detail There is one very important quirk about the input function that we need to remember. Given console.log(7 + 2);, the output would be 9.\nNow explore the following code, which prompts the user for two numbers and then prints their sum:\nconst input = require('readline-sync'); let num1 = input.question(\"Enter a number: \"); let num2 = input.question(\"Enter another number: \"); console.log(num1 + num2); Run the program, enter your choice of numbers, and examine the output. Do you see what you expected?\nIf we enter 7 and 2, we expect an output of 9. We do NOT expect 72, but that is the result printed. What gives?!?!?\nThe quirk with the input function is that it treats all entries as strings, so numbers get concatenated rather than added. Just like “Hello, \" + “World” outputs as Hello, World, “7” + “2” outputs as 72.\nJavaScript treats input entries as strings!\nIf we want our program to perform math on the entered numbers, we must use type conversion to change the string values into numbers.\nTry It! Use Number to convert num1 and num2 from strings to numbers. Run the program and examine the result. Instead of using two steps to assign num1 and then convert it, combine the steps in line 3. Place input.question(\"Enter a number: \") inside the Number function. Run the program and examine the result. Repeat step 2 for num2 What happens if a user enters Hi instead of a number? Check Your Understanding Question What is printed when the following program runs?\nconst input = require('readline-sync'); let info = input.question(\"Please enter your age: \"); //The user enters 25. console.log(typeof info); string number info 25 ",
    "description": "",
    "tags": null,
    "title": "Input with readline-sync",
    "uri": "/data-and-variables/reading/input-readline-sync/index.html"
  },
  {
    "content": "Congratulations! Identifying the base case is often the trickiest part of building a recursive function.\nWe’ve made it this far with combineEntries:\nfunction combineEntries(arrayName){ if (arrayName.length \u003c= 1){ return arrayName[0]; } else { //call combineEntries again } } Now we are ready to take the next step.\nA Visual Representation To help visualize what happens during recursion, let’s start with the base case ['L']:\nNothing complicated here. combineEntries sees only one item in the array, so it returns 'L'.\nNow consider an array with two elements, ['L', 'C']:\nIn this case, combineEntries executes the else statement. We have no code for this yet, but we can still consider the logic:\ncombineEntries returns 'L' and calls itself again using what is left inside the array (['C']). When passed ['C'], which is the base case, combineEntries returns 'C'. The strings 'L' and 'C' get combined and returned as the final result. Next, consider an array with three elements ['L', 'C', '1']:\nAs before, combineEntries executes the else statement, and we can follow the logic:\ncombineEntries returns 'L' and calls itself again using what is left inside the array (['C', '1']). When passed ['C', '1'], combineEntries returns 'C' and calls itself again using what is left inside the array (['1']). When passed ['1'], which is the base case, combineEntries returns '1'. The strings 'C' and '1' get combined and returned. The strings 'L' and 'C1' get combined and returned as the final result. As we make the array longer, combineEntries calls itself more times. Each call evaluates a smaller and smaller section of the array until reaching the base case. This sets up a series of return events - each one selecting a single entry from the array. Rather than building 'LC101' from left to right, recursion constructs the string starting with the base case and adding new characters to the front:\nValue Returned Description '1' Base case. Returns the element from an array of length 1. '01' Combines the first element from an array of length 2 with the base case value. '101' Combines the first element from an array of length 3 with the two previous values. 'C101' Combines the first element from an array of length 4 with the three previous values. 'LC101' Combines the first element from an array of length 5 with the four previous values. Recursive processes all follow this approach. Each call to the function reduces a problem into a slighly smaller piece. The reduction continues until reaching the simplest possible form—the base case. The base case is then solved, and this creates a starting point for completing all of the previous steps.\nA Function Calls Itself So how do we code the else statement in combineEntries? Recall what needs to happen each time the statement runs:\nSelect the first element in the array, Call combineEntries again with a smaller array. Bracket notation takes care of part a: arrayName[0].\nFor part b, remember that the slice methoed returns selected entries from an array. To return everything BUT the first entry in arr = ['L', 'C', '1', '0', '1']``, use ``arr.slice(1).\nLet’s add the bracket notation and the slice method to our function:\nfunction combineEntries(arrayName){ if (arrayName.length \u003c= 1){ return arrayName[0]; } else { return arrayName[0]+combineEntries(arrayName.slice(1)); } } Each time the else statement runs, it extracts the first element in the array with arrayName[0], then it calls itself with the remaining array elements (arrayName.slice(1)).\nFor combineEntries(['L', 'C', '1', '0', '1']);, the sequence would be:\nStep Description 1 First call: Combine 'L' with combineEntries(['C', '1', '0', '1']). 2 Second call: Combine 'C' with combineEntries(['1', '0', '1']). 3 Third call: Combine '1' with combineEntries(['0', '1']). 4 Fourth call: Combine '0' with combineEntries(['1']). 5 Fifth call: Base case returns '1'. To get the final result, proceed up the chain:\nStep Description 5 Return '1' to the fourth call. 4 Return '01' to the third call. 3 Return '101' to the second call. 2 Return 'C101' to the first call. 1 Return 'LC101' as the final result. Check Your Understanding Question What if we wanted to take a number (n) and add it to all of the positive integers below it? For example, if n = 5, the function returns 5 + 4 + 3 + 2 + 1 = 15.\nConsider the code sample below, which declares the decreasingSum function.\nfunction decreasingSum(integer) { if (integer === 1){ return integer; } else { //call decreasingSum function again } } Which of the following should be used in the else statement to recursively call decreasingSum and eventually return the correct answer?\nreturn integer + (integer-1); return integer + (decreasingSum(integer)); return integer + (decreasingSum(integer-1)); return decreasingSum(integer-1); ",
    "description": "",
    "tags": null,
    "title": "Making a Function Call Itself",
    "uri": "/more-on-functions/reading/making-function-call-itself/index.html"
  },
  {
    "content": "Select inputs create a clickable menu that displays options and allows the user to select one. The available options are defined by \u003coption\u003e tags inside of the \u003cselect\u003e\u003c/select\u003e tag.\n\u003coption\u003e tags have a value attribute which defines the value submitted if that option is selected. The text inside the \u003coption\u003eOption text\u003c/option\u003e is what is displayed in the select menu.\nType Syntax Description Demo select \u003cselect name=\"weather\"\u003e\u003coption value=\"1\"\u003eclear\u003c/option\u003e\u003coption value=\"2\"\u003ecloudy\u003c/option\u003e\u003c/select\u003e A menu that allows selection of one option. Requires options to be in \u003coption\u003e tags. clearcloudy Example \u003cform action=\"https://handlers.education.launchcode.org/request-parrot\" method=\"post\"\u003e \u003clabel\u003eOperation Code: \u003c!-- includes empty value \"Select One\" option --\u003e \u003cselect name=\"operation\"\u003e \u003coption value=\"\"\u003e* Select One *\u003c/option\u003e \u003coption value=\"1\"\u003eSimulation\u003c/option\u003e \u003coption value=\"2\"\u003eRocket Test\u003c/option\u003e \u003coption value=\"3\"\u003eCrew Related\u003c/option\u003e \u003c/select\u003e \u003c/label\u003e \u003clabel\u003eFacility: \u003cselect name=\"facility\"\u003e \u003coption value=\"johnson\"\u003eJohnson Space Center, TX\u003c/option\u003e \u003coption value=\"kennedy\"\u003eKennedy Space Center, FL\u003c/option\u003e \u003coption value=\"white-sands\"\u003eWhite Sands Test Facility, NM\u003c/option\u003e \u003c/select\u003e \u003c/label\u003e \u003cbutton\u003eSend Report\u003c/button\u003e \u003c/form\u003e Default Form Values\nSelect “Rocket Test” and “White Sands Test Facility, NM”\nSubmitted Values\noperation=2 facility=white-sands Check Your Understanding Question For a select input, what determines the value that is submitted during form submission?\n",
    "description": "",
    "tags": null,
    "title": "Select Input",
    "uri": "/user-input-with-forms/reading/select-input/index.html"
  },
  {
    "content": "Earlier, we used concatenation to combine strings and variables together in order to create specific output:\nExample let name = \"Jack\"; let currentAge = 9; console.log(\"Next year, \" + name + \" will be \" + (currentAge + 1) + \".\"); Console Output\nNext year, Jack will be 10. Unfortunately, this process quickly gets tedious for any output that depends on multiple variables. Often, concatenation requires multiple test runs of the code in order to check for syntax errors and proper spacing within the output. Fortunately, JavaScript offers us a better way to accomplish this process.\nTemplate literals allow for the automatic insertion of expressions (including variables) into strings.\nWhile normal strings are enclosed in single or double quotes (' or \"), template literals are enclosed in back-tick characters, ``. Within a template literal, any expression surrounded by ${ } will be evaluated, with the resulting value included in the string.\nExample Template literals allow for variables and other expressions to be directly included in strings.\nlet name = \"Jack\"; let currentAge = 9; console.log(`Next year, ${name} will be ${currentAge + 1}.`); Console Output\nNext year, Jack will be 10. Besides allowing us to include data in strings in a cleaner, more readable way, template literals also allow us to easily create multi-line strings without using string concatenation or special characters.\nExample 1 2 3 4 5 6 7 8 9 let poem = `The mind chases happiness. The heart creates happiness. The soul is happiness And it spreads happiness All-where. – Sri Chinmoy`; console.log(poem); Console Output\nThe mind chases happiness. The heart creates happiness. The soul is happiness And it spreads happiness All-where. – Sri Chinmoy Note The ECMAScript specifications define the standard for JavaScript. The 6th edition, known as ES2015, added template literals. Not only are template literals relatively new to JavaScript, but you may encounter environments—such as older web browsers—where they are not supported.\nCheck Your Understanding Question Mad Libs are games where one player asks the group to supply random words (e.g. “Give me a verb,” or, “I need a color”). The words are substituted into blanks within a story, which is then read for everyone’s amusement. In elementary school classrooms, giggles and hilarity often ensue. TRY IT!\nRefactor the following code to replace the awkward string concatenation with template literals. Be sure to add your own choices for the variables.\nlet pluralNoun = ; let name = ; let verb = ; let adjective = ; let color = ; console.log(\"JavaScript provides a \"+ color +\" collection of tools — including \" + adjective + \" syntax and \" + pluralNoun + \" — that allows \"+ name +\" to \"+ verb +\" with strings.\") ",
    "description": "",
    "tags": null,
    "title": "Template Literals",
    "uri": "/stringing-characters-together/reading/template-literals/index.html"
  },
  {
    "content": "Run the Tests This project uses unit tests to help auto-grade your work. The tests should pass based on the files you create and their behavior.\nRun the tests when you reach this section of the instructions. You may run them as you work on the project. These tests are looking to see if your components render. They do not provide help in creating the project.\nWarning In order to pass this assignment, you must pass the workflow tests in GitHub Actions .\nTo Run the Tests in Your Terminal Use these steps to start the tests:\nIn the terminal, cd into the project directory. Run the following commands to start the tests: npm test You should see the following BEFORE you do any of the project: AFTER completing your project, you should see the following test results:\nTesting Information \"Final App function should contain a BANNER with title\" tests verify that you created a Banner component and it contains a title of sorts. In this case, it says “Orbit Report”\n\"Final App function should contain 4 BUTTONS: Low, Medium, High, and All Orbits\" tests verify the behavior of your application. The buttons will not render in the App function if you don’t code them properly.\n\"Final App function should contain TABLE with values in both headers and cells\" tests use a testing data set to check the behavior of your table. The test data is passed, and should be rendered into the table correctly using your map functions.\nTroubleshooting Vitest Vite uses Vitest for testing React applications. It should already be part of your project. Vitest is configured in such a way that the tests are the exact same for Vitest and Jest, but it runs slightly differently and will have different output.\nIf you are not able to get the tests to run, make sure you are running the command inside the project repo.\nVitest will wait for you to change a file before re-running any tests. If you are trying to make changes and the tests aren’t re-running, check that you have saved those changes and exit Vitest with either q or Ctrl+C and run npm test to restart.\n",
    "description": "",
    "tags": null,
    "title": "Task 7: Running the Auto-grading Tests",
    "uri": "/assignments/orbit-report/testing/index.html"
  },
  {
    "content": "Content Links confirm Examples getElementById Examples querySelector and querySelectorAll Examples innerHTML Examples style property Examples ",
    "description": "",
    "tags": null,
    "title": "DOM Method Examples",
    "uri": "/appendices/dom-method-examples/index.html"
  },
  {
    "content": ".slice() Examples The general syntax for this method is:\narrayName.slice(starting index, ending index) This method copies a range of elements from one array into a new array. slice does NOT change the original array, but returns a new array.\nThe ending index is optional. If it is left out, slice returns a new array that includes everything from the starting index to the end of the original array.\nIf both indices are used, the new array contains everything from the starting index up to, but NOT including the ending index.\nExample let arr = ['a', 'b', 'c', 'd', 'e']; arr.slice(2); arr.slice(1,4); console.log(arr); Output\n[ 'c', 'd', 'e' ] [ 'b', 'c', 'd' ] ['a', 'b', 'c', 'd', 'e'] ",
    "description": "",
    "tags": null,
    "title": "slice Examples",
    "uri": "/appendices/array-method-examples/slice-examples/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUse iteration to repeat the execution of a code block Properly write for and while loops Use for and while loops in appropriate contexts Key Terminology Here is a list of key terms for this chapter broken down by the page the term first appears on. You should make note of these terms and their definitions.\nIteration iteration DRY for Loops for loop definite iteration initial expression loop condition update expression loop variable loop body Breaking Down the for Statement infinite loop The Accumulator Pattern pattern accumulator pattern accumulator while Loops input validation Choosing Which Loop to Use definite iteration indefinite iteration Chapter Content Reading Exercises: Loops Studio: Loops Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 9: Repeating with Loops",
    "uri": "/loops/index.html"
  },
  {
    "content": "In order to function (ba-dum chhhh), recursion must fulfill four conditions:\nA series of small, identical steps combine to solve a larger problem. A base case must be defined. When true, this simplest case halts the recursion. A recursive function repeatedly calls itself. Each time the recursive function is called, it must alter the data/variables/conditions in order to move closer to the base case. Benefits of Recursion: Fewer lines of code required to accomplish a task, Makes code cleaner and more readable. Drawbacks of Recursion: More abstract than using loops, Code is “more readable” only if the reader understands recursion. Recursion in a Nutshell Build a single function to break a big problem into a slightly smaller version of the exact same problem. The function repeatedly calls itself to reduce the problem into smaller and smaller pieces. Eventually, the function reaches a simplest case (the base), which it solves. Solving the base case sets up the solutions to all of the previous steps. Why Do I Need To Know Recursion? If you ask veteran programmers how often they use recursion, you will get answers ranging from “Not since I had to do it in school,” to “Very regularly.” Some programmers avoid recursion like the plague, while others look forward to using it wherever it fits.\nMost of the recursion problems you encounter in your tech career can be solved with loops instead. However, recursion is a skill most programmers will see and are expected to know, even if they do not use it all the time. How deep you need to dive depends entirely on the type of job you get, your team members, and your personal preference.\nLet’s use an analogy. At some point in time, most teens must “solve a quadratic” in school (e.g. find ‘x’ in x :sup:2 + 2x - 35 = 0). Perhaps you fondly remember doing this yourself. As kids, we were expected to know how to solve a quadratic, but as adults, the need to do this varies. Some of us must frequently find x, while others only need to solve one or two equations a year. Still others do not see quadratics again until their own kids learn about them.\nSince their future jobs might not require it, why do teens need to learn how to solve quadratics? Because at some point in time they will have to do it again (if only to shock their kids), and they need to be ready when that happens.\nThe same is true for recursion.\nLearn it. Love it. Use it.\n",
    "description": "",
    "tags": null,
    "title": "Recursion Wrap-Up",
    "uri": "/more-on-functions/reading/recursion-wrap-up/index.html"
  },
  {
    "content": "Validating form inputs before submitting the form can make the user experience much smoother. Some input types have built-in browser validation for basic formats such as numbers and email addresses. We can use event handlers to perform more complex validation on form input values.\nForm Inputs and the DOM Before we can validate what the user has typed we need to understand how to use form inputs with the DOM. Remember that the DOM is a JavaScript representation of the HTML document. \u003cinput\u003e tags can be selected and referenced like any other HTML element.\nTo read the value of an input, we can check the value attribute. We can also assign a new value to input.value which will update the value shown in the input.\nExample This example will log the value of an input, update the input’s value, and then log it again when the button is clicked.\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eCheck input value with DOM\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform\u003e \u003clabel\u003eLanguage \u003cinput type=\"text\" name=\"language\" id=\"language\" value=\"JavaScript\"\u003e \u003c/label\u003e \u003c/form\u003e \u003cbutton id=\"update\"\u003eUpdate Input Value\u003c/button\u003e \u003cscript\u003e let button = document.getElementById(\"update\"); // add event handler for when button clicked button.addEventListener(\"click\", function() { let input = document.getElementById(\"language\"); console.log(input.value); // now update the value in the input input.value = input.value + \" rocks!\"; console.log(input.value); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Question What happens when you click the button multiple times?\nSteps to Add Validation Add an event handler for the window load event Within the window’s load handler, add an event handler for the form submit event Retrieve input values that need to be validated from the DOM. Within the form’s submit handler, check the input values using conditional statements If the values are valid, allow the form submission If the values are NOT valid, inform the user and STOP form submission Each of these steps involves additional details, which we will now break down.\nExample Let’s start this by showing an alert box when the form submit event is triggered.\n\u003chtml\u003e \u003chead\u003e \u003ctitle\u003eForm Validation\u003c/title\u003e \u003cstyle\u003e label {display: block;} body {padding: 25px;} \u003c/style\u003e \u003c/head\u003e \u003cscript\u003e window.addEventListener(\"load\", function() { let form = document.querySelector(\"form\"); form.addEventListener(\"submit\", function(event) { alert(\"submit clicked\"); }); }); \u003c/script\u003e \u003cbody\u003e \u003cform method=\"POST\" action=\"https://handlers.education.launchcode.org/request-parrot\"\u003e \u003clabel\u003eUsername \u003cinput type=\"text\" name=\"username\"\u003e\u003c/label\u003e \u003clabel\u003eTeam Name \u003cinput type=\"text\" name=\"team\"\u003e\u003c/label\u003e \u003cbutton\u003eSubmit\u003c/button\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e Follow Along as We Add Validation Use the javascript-projects/user-input-with-validation/chapter-examples/form-validation directory for the following instructions to add validation to the above example.\nGet Reference to Inputs\nTo validate what the user has typed, we can get a reference to the input elements in the DOM and check the value property of each. Let’s change the submit event handler to display the value of the username input in an alert box. To do that, we are going to use document.querySelector(\"input[name=username]\"), which uses an attribute selector to select the \u003cinput\u003e that has name=\"username\".\n\u003cscript\u003e window.addEventListener(\"load\", function() { let form = document.querySelector(\"form\"); form.addEventListener(\"submit\", function(event) { let usernameInput = document.querySelector(\"input[name=username]\"); // alert the current value found in the username input alert(\"username: \" + usernameInput.value); }); }); \u003c/script\u003e Alert the Input Values When Submitted\nNow that we know how to get the value of an input, we can add conditional statements. Let’s add code that opens an alert box if either input value is empty.\n\u003cscript\u003e window.addEventListener(\"load\", function() { let form = document.querySelector(\"form\"); form.addEventListener(\"submit\", function(event) { let usernameInput = document.querySelector(\"input[name=username]\"); let teamName = document.querySelector(\"input[name=team]\"); if (usernameInput.value === \"\" || teamName.value === \"\") { alert(\"All fields are required!\"); } }); }); \u003c/script\u003e We are making progress. Now if you click Submit with one or both of the inputs empty, then an alert message appears telling you that both inputs are required. However, the form is still submitted even if the data is invalid.\nPrevent Form Submission\nWe should prevent the form submission from happening until all inputs have valid values. We can use the event parameter and event.preventDefault() to stop the form submission. event.preventDefault() prevents default browser functionality from happening, like form submission when \u003cbutton\u003e tags are clicked inside of a form. Remember that event handler functions are passed an event argument which represents the event that the handler is responding to.\n\u003cscript\u003e window.addEventListener(\"load\", function() { let form = document.querySelector(\"form\"); form.addEventListener(\"submit\", function(event) { let usernameInput = document.querySelector(\"input[name=username]\"); let teamName = document.querySelector(\"input[name=team]\"); if (usernameInput.value === \"\" || teamName.value === \"\") { alert(\"All fields are required!\"); // stop the form submission event.preventDefault(); } }); }); \u003c/script\u003e Check Your Understanding Question What method on the event object can be used to stop a form submission?\n",
    "description": "",
    "tags": null,
    "title": "Validation with JavaScript",
    "uri": "/user-input-with-forms/reading/validation-with-javascript/index.html"
  },
  {
    "content": "After wading through all of the new syntax necessary to create a function, you might be asking yourself, Why would I ever want to do this? Good question! We have a few answers.\nFunctions Reduce Repetition Like loops, functions help us keep our code DRY. When we need to repeat the same basic task in multiple parts of a program, a function will allow us to package up that task into a neat, reusable form. Loops enable the same task to be repeated many times in succession, while functions enable the same task to be repeated in different portions of a program.\nFunctions Make Your Code More Readable Placing a piece of functionality within a function allows us to put a name on that functionality. Consider our palindrome example . One way to write that function is:\nfunction isPalindrome(str) { let reversed = ''; for (let i = 0; i \u003c str.length; i++) { reversed = str[i] + reversed; } return reversed === str; } While the variable name reversed is descriptive, giving us a sense of what is going on with the for loop, the function becomes even more readable when we break out the reversing behavior into a separate function.\nfunction reverse(str) { let reversed = ''; for (let i = 0; i \u003c str.length; i++) { reversed = str[i] + reversed; } return reversed; } function isPalindrome(str) { return reverse(str) === str; } Aside from following the principle that functions should do only one thing, the logic within isPalindrome is more clear and self-descriptive. The function itself says, a string is a palindrome if it is equal to its reverse. To draw this same conclusion from the example above, without a reverse function, we are required to analyze more of the program’s logic.\nFunctions Reduce Complexity Large programs can be broken down into smaller parts using functions. Imagine a car built out of a single, large piece of metal. Were such a car to break down, diagnosing the problem would be difficult, and fixing it nearly impossible. The mechanic would have to determine where the issue was, then cut apart the bad portion, create a custom-made replacement portion, and weld it into place.\nThe complexity of this situation becomes much less when a car is made up of lots of small parts, each of which can be tested and replaced individually. The same thing happens with code. While there are many other organizational units for programs—including modules, files, and packages—functions are the most basic and universal organizational tool.\nFunctions Enable Code Sharing Encapsulating behavior within a function makes it easy to reuse that code within a program, but it also allows you to share that behavior across files and even different projects. This becomes critically important when you start working on bigger programs that consist of a large number of files.\nYou will explore this idea in the Modules chapter .\nFunctions Save Millions of Lives Every Day Okay, not really. But the point is, functions are incredibly powerful tools that you will come to appreciate and find indispensable. Ask a professional programmer if they could do their job without functions, and the answer will be an emphatic “NO!”\nWhile functions may seem abstract and difficult to learn at first, repeated practice will lead to mastery. We promise that your work will be worth it.\n",
    "description": "",
    "tags": null,
    "title": "Why Create Functions?",
    "uri": "/functions/reading/why-create-functions/index.html"
  },
  {
    "content": ".sort() Examples The general syntax for this method is:\narrayName.sort() This method arranges the elements of an array into increasing order. For strings, this means alphabetical order. HOWEVER, the results are not always what we expect.\nExample Alphabetical order?\nlet letters = ['f', 'c', 'B', 'X', 'a']; letters.sort(); console.log(letters); Output\n[ 'B', 'X', 'a', 'c', 'f' ] From the alphabet song, we know that ‘a’ comes before ‘B’ (and certainly before ‘X’), but JavaScript treats capital and lowercase letters differently. The default sort order places capital letters before lowercase.\nExample let mixed = ['a', 'A', 20, 40]; mixed.sort(); console.log(mixed); Output\n[ 20, 40, 'A', 'a' ] When numbers and strings are sorted, the default order places numbers before all letters.\nExample Numerical sorting.\nlet numbers = [2, 8, 10, 400, 30]; numbers.sort(); console.log(numbers); Output\n[ 10, 2, 30, 400, 8 ] Here, JavaScript gets truly bizarre. How is 8 larger than 400?\nWhen JavaScript sorts, it converts all entries into strings by default. Just like ‘Apple’ comes before ‘Pear’ because ‘A’ comes before ‘P’, the string ‘400’ begins with a ‘4’, which comes before any string starting with an ‘8’. Looking only at the first digit in each number, we see the expected progression (1, 2, 3, 4, 8).\nLater in this course, we will explore ways to fix this issue and correctly sort numerical arrays.\n",
    "description": "",
    "tags": null,
    "title": "sort Examples",
    "uri": "/appendices/array-method-examples/sort-examples/index.html"
  },
  {
    "content": "Learning Objectives Understand the role of functions in making code modular and reusable Create programmer-defined functions Explain what a function is Write a function with no parameters, a single parameter, and multiple parameters Call a function, with and without parameters Understand the behavior of parameters that are not provided by the caller Use a return statement to complete execution of a function Use a return statement to provide a value to the function caller Explain what a return statement does Understand variable scope as it pertains to functions Explain what variable shadowing is Write a function that calls another function Use properly descriptive names when defining functions Key Terminology Introduction function method indexOf encapsulation Creating Functions TypeScript abstraction Parameters and Variables scope Content Links Reading Exercises: Functions Studio: Functions ",
    "description": "",
    "tags": null,
    "title": "Chapter 10: Functions Are at Your Beck and Call",
    "uri": "/functions/index.html"
  },
  {
    "content": "Next Steps After completing the assignments for this course, you will be ready for the next unit. In the next unit, you will work with a statically typed language such as Java or C#. The syntax may vary, but you have been equipped with the skills to complete all of the assignments and projects.\nGreat job on completing unit 1!\n",
    "description": "",
    "tags": null,
    "title": "Next Steps",
    "uri": "/assignments/next-steps/index.html"
  },
  {
    "content": " Math.abs Examples Math.ceil, floor, and trunc Examples Math.max and Math.min Examples Math.pow and Math.sqrt Examples Math.random Examples Math.round Examples ",
    "description": "",
    "tags": null,
    "title": "Math Method Examples",
    "uri": "/appendices/math-method-examples/index.html"
  },
  {
    "content": ".splice() Examples The general syntax for this method is:\narrayName.splice(index, number of elements to change, item1, item2, ...); Inside the parentheses (), only the first argument is required.\nThe splice method modifies one or more elements anywhere in the array. Entries can be added, removed, or changed. This method requires practice.\nHang on, here we go:\nRemoving Elements To remove elements from an array, the splice method needs 1 or 2 arguments.\nGiven only one argument, splice(index) removes every entry from index to the end of the array.\nExample let arr = ['a', 'b', 'c', 'd', 'e', 'f']; arr.splice(2); //Everything from index 2 and beyond is removed. console.log(arr); Output\n['a', 'b'] With two arguments, splice(index, number of items) starts at index and removes the specified number of items from the array.\nExample let arr = ['a', 'b', 'c', 'd', 'e', 'f']; arr.splice(2,3); //Start at index 2 and remove 3 total entries. console.log(arr); arr.splice(1,1); //Start at index 1 and remove 1 entry. console.log(arr); Output\n[ 'a', 'b', 'f' ] [ 'a', 'f' ] Adding or Replacing Elements To add or replace elements in an array, the splice method requires 3 or more arguments.\nTo add elements, set the number of elements argument to 0 and follow this with the new items.\nExample splice(index, 0, new item) starts at index and INSERTS the new items. Existing elements get shifted further down the array.\nlet arr = ['a', 'b', 'c', 'd', 'e', 'f']; arr.splice(2,0,'hello'); //Start at index 2, remove 0 entries, and add 'hello'. console.log(arr); Output\n[ 'a', 'b', 'hello', 'c', 'd', 'e', 'f' ] To replace elements in an array, the number of elements argument must be a positive integer. Follow this with the new items for the array.\nExample splice(index, number of items, new items) starts at index and REPLACES the number of items with the new ones.\nlet arr = ['a', 'b', 'c', 'd', 'e', 'f']; arr.splice(2,3,'hello', 9); //Start at index 2, replace 3 entries with 'hello' and 9. console.log(arr); Output\n[ 'a', 'b', 'hello', 9, 'f' ] ",
    "description": "",
    "tags": null,
    "title": "splice Examples",
    "uri": "/appendices/array-method-examples/splice-examples/index.html"
  },
  {
    "content": "As mentioned in the terminal chapter, the essence of the command line is text. Since this is quite different from how many may be used to using their computers, this tutorial is meant to help you picture how your machine is responding when you input common commands into the terminal.\nYour computer is basically a file storage system. Sure, you may have many applications installed. But where do they all live? In folders. Aka, directories. The basics of terminal usage involve navigating these directories.\nLet’s take a look at a given project opened in your VSCode editor:\nNote If you would like to follow along with the commands below you can find an identical directory structure within your javascript-projects/terminal-commands directory.\nSample file tree in VSCode\nWhen working in the terminal, it can be helpful to think of yourself as physically inside of the project’s file system. File trees, like the one above, are common visualization tools. Here’s another map-like option for imagining your file system:\nSample file system map\nWe’ll navigate through and edit this sample project folder for the remainder of this tutorial.\nCurrent Directory (.) Imagining you are inside of this file system, . is a reference to your location, or current directory.\nStarting at the top directory, launchcode_courses, . represents your current location.\nYour current directory is launchcode_courses.\nHere, your terminal will look something like this:\ncomputer:launchcode_courses user$ Most of what you see to the left of the command prompt symbol, $ will be different on your machine. The basic structure here is \u003cmachine_name\u003e:\u003ccurrent_directory\u003e \u003cuser_name\u003e$.\nNote Some users choose to alter what they see before the command prompt. For the purposes of this tutorial, we will simply use \u003ccurrent_directory\u003e $ as the prompt.\n. itself is not a command. If you type only . into the terminal, you’re not really telling the machine to do anything just yet.\nIf you’re curious, try it.\nNote Most commands require you to press Enter when you are ready to run.\nYou will probably see a somewhat cryptic message, like this:\nlaunchcode_courses $ . bash: .: filename argument required .: usage: . filename [arguments] launchcode_courses $ That’s ok! Basically, we just entered an incomplete command. Our syntax wasn’t quite right. Keep reading and we’ll see how to properly use ..\nIf you move into lc_101, . then refers to that directory. We’ll cover how to move locations in the cd command section later in this walkthrough.\nlaunchcode_courses $ cd ./lc_101/ lc_101 $ You may notice that the \u003ccurrent_directory\u003e has updated but apart from that, the computer doesn’t give us much response. This is quite common and is a reason why our file system visuals come in handy to help remind us what we’re doing.\nBack in our map, we’ve done this:\nWe’re now in lc_101\nParent Directory (..) .. is a reference to your parent directory, aka the directory that CONTAINS your current location.\nRemember the VSCode file tree? That containment structure is represented through indentation:\nlaunchcode_courses contains data_analysis and lc_101.\nBy the end of the current directory section, we found ourselves inside of lc_101.\nWe’re still in lc_101.\nlaunchcode_courses is the parent directory of both the lc_101 and data_analysis directories. While we’re in lc_101, .. refers to launchcode_courses.\nMoving further down into unit_1,\nlc_101 $ cd ./unit_1/ unit_1 $ We’re now in unit_1.\n.. now refers to lc101. ../.. here refers to launchcode_courses.\nLike . (current directory), .. isn’t a command itself, but rather a notation. We’re now ready to tackle our first command!\npwd Command Entering the pwd command in your terminal returns your current location, aka your working directory.\nunit_1 $ pwd /launchcode_courses/lc_101/unit_1 unit_1 $ The working directory is another term for the current directory. Think of this command as like the ‘You are here’ star on our file maps.\nWe’re still in unit_1.\nYou’re basically just telling the computer to give you your current location. This may seem basic, but this one is essential. You need to know your current location when working in the terminal. A lot of beginner programmers simply enter commands into the terminal without mind to where they are. pwd is like a sanity check - a quick way to ensure that you know where you are and what you’re doing. It’s the file system counterpart to Git’s git status.\nls Command Entering the ls command in your terminal returns the contents of your current directory. Recall, we’re in unit_1.\nWe’re still in unit_1.\nunit_1 $ pwd /launchcode_courses/lc_101/unit_1 unit_1 $ ls about_me.html hello_world.js styles.css All of that looks to be in order. Let’s move back out into lc_101 and run ls from there.\nunit_1 $ pwd /launchcode_courses/lc_101/unit_1 unit_1 $ ls about_me.html hello_world.js styles.css unit_1 $ cd .. lc_101 $ pwd /launchcode_courses/lc_101 lc_101 $ ls unit_1 lc_101 $ Notice that the pwd was used after we moved. Also pay attention that ls only gives us a view one level deep. Now let’s talk about how we move between directories.\ncd Command cd \u003cpath_name\u003e relocates you to the provided path. We’ve seen it before, now let’s explore this command some more.\nRemember, we’re inside lc_101,\nWe’re in lc_101.\nTo change directories to our parent directory, we run the following:\nlc_101 $ pwd /launchcode_courses/lc_101 lc_101 $ cd .. launchcode_courses $ pwd /launchcode_courses launchcode_courses $ It’s pretty self-explanatory, now we’re back in launchcode_courses.\nWe’re back to launchcode_courses.\nNot surprisingly, to go down into data_analysis, we run cd ./data_analysis/.\nlaunchcode_courses $ pwd /launchcode_courses launchcode_courses $ cd ./data_analysis/ data_analysis $ pwd /launchcode_courses/data_analysis data_analysis $ We’ve made it to data_analysis.\nOk, so we know how to move one level above our current location (into our parent directory) and how to move one level below our working directory. But what if we wanted to get back to lc_101 from where we are now, in data_analysis?\nIn order to move to a directory that is contained within the same parent as our working directory, we need to first go back up into the parent.\ndata_analysis $ pwd /launchcode_courses/data_analysis data_analysis $ cd lc_101 bash: cd: lc_101: No such file or directory data_analysis $ pwd /launchcode_courses/data_analysis data_analysis $ cd ../lc_101/ lc_101 $ pwd /launchcode_courses/lc_101 lc_101 $ Do you see the faulty command? We tried running cd lc_101 from inside data_analysis but the terminal did not recognize that path name from inside the data_analysis directory.\nWe already know how to move to a parent directory, cd .., above we see how we can move into a parent directory and down into one of its children all in one command, cd ../lc_101/.\nHere’s a visual of where we’ve just been\nPath to move to a peer directory.\nFor practice, let’s go from our current spot in lc_101, down into final_project.\nlc_101 $ pwd /launchcode_courses/lc_101 lc_101 $ cd .. launchcode_courses $ pwd /launchcode_courses launchcode_courses $ ls data_analysis lc_101 launchcode_courses $ cd data_analysis/ data_analysis $ ls cities.sql final_project lakes.json data_analysis $ cd final_project/ final_project $ pwd launchcode_courses/data_analysis/final_project final_project $ Above, we check our location as we navigate to make sure we know where we’re going. If we’re really confident though, we can accomplish moving from lc_101 to final_project all in one go. Let’s say we moved back to lc_101 already.\nlc_101 $ pwd /launchcode_courses/lc_101 lc_101 $ cd ../data_analysis/final_project/ final_project $ pwd launchcode_courses/data_analysis/final_project final_project $ Are you starting to see how terminal navigation can get you places swiftly?\nLet’s do one more quick move for fun. To go back to lc_101, all we need to do is cd ../../lc_101/.\nfinal_project $ pwd launchcode_courses/data_analysis/final_project final_project $ cd ../../lc_101/ lc_101 $ pwd launchcode_courses/lc_101 lc_101 $ Perhaps you noticed that the computer does not return anything to you after a successful cd command. In the navigation samples above, we frequently rely on the pwd command and the ls command to remind us where we are and what paths are available to us.\nmkdir Command mkdir \u003cnew_directory_name\u003e creates a new directory inside your current location.\nWe’re in the lc_101 directory.\nWe’re back in lc_101.\nHere, let’s create a directory for Unit 2 materials.\nlc_101 $ pwd launchcode_courses/lc_101 lc_101 $ ls unit_1 lc_101 $ mkdir unit_2 lc_101 $ ls unit_1 unit_2 lc_101 $ Again, the computer does not return anything to you after this command and simply responds ready to accept another prompt. But we can see from our helpful ls command that a new directory has been created.\nAnd we can visualize our changes like this:\nmkdir creates a new directory\nNote While mkdir creates a new directory, it does not place us into that directory. Additionally, we don’t need to be in the parent of the newly created directory. We can run mkdir from anywhere within the file system, as long as we use the appropriate file path.\nrm Command rm \u003citem_to_remove\u003e removes a given item from the file tree.\nLet’s say we decide we no longer need our cities.sql data. We can remove it!\nFor fun - and practice! - let’s remove it while we’re still located in the lc_101 directory.\nlc_101 $ pwd launchcode_courses/lc_101 lc_101 $ rm ../data_analysis/cities.sql lc_101 $ pwd launchcode_courses/lc_101 lc_101 $ ls ../data_analysis/ final_project lakes.json lc_101 $ See what we did there? Instead of moving into the parent directory of cities.sql, we just used the longer file path relative to our location in lc_101. And to check that our rm command did what we expected? Well we also checked that right from our spot in lc_101 with ls and a longer path.\nHere’s the map of what we’ve done:\ncities.sql is gone!\nTo remove a directory entry, rather than simply a file, requires an option on the command. An option is an additional character, or set of characters, added on the end of a text command to give the computer more instructions related to your command. Options are usually indicated with a -. We’ll talk more about the presence of options in the man command section.\nA common method to remove a directory is to use the -r option, although there are other choices.\nLet’s say we no longer want our unit_2 directory. We’re still in lc_101.\nlc_101 $ ls unit_1 unit_2 lc_101 $ rm unit_2 rm: unit_2: is a directory lc_101 $ ls unit_1 unit_2 lc_101 $ rm -r unit_2 lc_101 $ ls unit_1 lc_101 $ Notice that simply using rm in line 3 returns a response telling us that the item we’ve asked to remove is a directory. However, using rm -r in line 7 successfully removes the unit_2 directory.\nBack in our map:\nunit_2 is gone without a trace\ncp Command cp \u003csource_path\u003e \u003ctarget_path\u003e copies the item at the source and puts it in the target path. The item can be a file or whole directory and is named within its own source path.\nTake our sample file tree above. We’re still in lc_101 and say we want to copy our lakes.json file and place that copy inside the final_project directory.\nlc_101 $ pwd launchcode_courses/lc_101 lc_101 $ cd ../data_analysis/ data_analysis $ pwd launchcode_courses/data_analysis data_analysis $ ls final_project lakes.json data_analysis $ cp ./lakes.json ./final_project/ data_analysis $ ls final_project lakes.json data_analysis $ ls ./final_project/ lakes.json data_analysis $ We didn’t need to cd into data_analysis but since we are dealing with a file contained within it, it made sense to do so. Once we ran our cp command, we checked the contents of both data_analysis and data_analysis/final_project to verify the copy was made.\nAnd of course, now there are two lakes.json.\nlakes.json double take\nWe can think of cp as basically copy and paste, since the target path is included in the command.\nmv Command mv \u003citem_to_move\u003e \u003ctarget_path\u003e moves an item to the provided target path. The item being moved can be a single file or a whole directory. When referring to the item being moved, its source path is required, just like the cp command.\nStill in data_analysis, lets move data_analysis/lakes.json into lc_101.\ndata_analysis $ mv ./lakes.json ../lc_101/ data_analysis $ pwd launchcode_courses/data_analysis data_analysis $ ls final_project data_analysis $ ls ../lc_101/ lakes.json unit_1 data_analysis $ As usual, we use ls to verify our results. Now our map looks like the following:\nmv moves one of the lakes.json.\ntouch Command touch \u003cnew_file_name\u003e creates a new file.\nBack in data_analysis, lets add a new cafes.json file to our directory.\ndata_analysis $ pwd launchcode_courses/data_analysis data_analysis $ ls final_project data_analysis $ touch cafes.json data_analysis $ ls cafes.json final_project data_analysis $ Here’s what that gives us:\ntouch adds a file\nclear Command clear wipes your terminal window of any previously run commands and outputs in case you need a clean screen to think straight.\nYou probably won’t encounter a scenario where you need to clear your terminal, but it can be a nice command to know if you’re a minimalist.\nThere’s no change to our file map to show when this command is run. And in the terminal window, as soon as enter is hit, the command results in what looks like a new window.\ndata_analysis $ man Command man is your best friend. Running man \u003ccommand\u003e gives you a manual entry of what that command does, what options it takes, and more documentation than you could ever need. It’s so thorough, it makes this guide blush. Any command you think you may need, but you’re not sure how to use it, or maybe you want to do something specific and are wondering if there’s a specialized option for it, use man to get more info!\nPractice looking up some of the commands you know; maybe you’ll learn a new option or two!\nSome other terminal stuff you should know when using the manual:\nScrolling: Some entries are very long! They will probably need to be scrolled through. You’ll know there’s more to read if you see : at the bottom of your terminal window. You can use your keyboard’s arrow keys to navigate the entry. If you reach the bottom of the entry, you’ll see a line that reads END. Exiting: Once you’re finished reading, you’ll need to exit the manual page using the q command. Exiting Programs ctrl + c Details ctrl + c can be used to exit a running program.\nSome programs take different commands to exit. ctrl + c is sometimes the command to quit a running program and other times used to prompt the running program for an different exit command.\nq q is another command for exiting a running program. Notably, it is needed to exit the :ref:terminal-man pages.\n",
    "description": "",
    "tags": null,
    "title": "Terminal Commands Tutorial",
    "uri": "/appendices/terminal-commands/index.html"
  },
  {
    "content": "Setting Up Visual Studio Code Before we start coding on our computer, we need to make sure we have the right tools! Programmers use integrated development environments (IDE) to write and run their code. The development environment we will be using for this class is Visual Studio Code . In addition to simply writing and running code, Visual Studio Code has tools that recognize errors in our code and has an integrated terminal so we can navigate through our filesystem to find the files that need our attention.\nNote Visual Studio Code is very customizable. Once you have everything set up, you can take additional steps to personalize your workspace such as changing the theme.\nGo to the Visual Studio Code download page and download the appropriate version.\nMac Users Please ensure that you download the correct version depending on your chip type. If you have an M1 or M2 you are running on Apple Silicon. If you have a different chip, you are most likely running on an Intel chip. If you are not sure, click on the Apple icon in the top left of your screen. Select “About this Mac”. You should see information regarding your Chip. And don’t hesitate to do an internet search about your chip if you are still not sure.\nOpen your new copy of Visual Studio Code. To open one of your coding projects, go to File \u003e Open and select the project you want to work on.\nTo start working with the terminal, look for the Terminal tab in the top menu. To open at new terminal, Terminal \u003e New Terminal. The new terminal window will open on the bottom of your IDE.\nWindows Users The terminal is in powershell, not Git Bash. To change this, open the Command Palette by going to View \u003e Command Palette. Type “Select Default Profile” in the search window and select “Terminal: Select Default Profile” from the menu. Change the default to Git Bash.\nNow every time you open the terminal, it will default to bash!\nNote If Git Bash is not an option when attempting to change the terminal profile, try downloading the Github Pull Requests and Issues extension . This extension comes with terminal integration. Restart Visual Studio Code and then go into the Command Palette again to change the terminal profile. More Resources You can further explore resources within Visual Studio Code by viewing the documentation .\n",
    "description": "",
    "tags": null,
    "title": "Visual Studio Code Installation",
    "uri": "/installations/install-visual-studio/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nCreate and use anonymous functions Explain how an anonymous function can be called, even though it doesn’t have a defined name Explain common uses of anonymous functions Use recursion to create algorithms that solve recursive problems Use functions as input parameters to other functions Describe the concept of a recursive problem, including the definitions of base case and recursive case Explain how base cases are important in preventing infinite recursion Key Terminology Here is a list of key terms for this chapter broken down by the page the term first appears on. You should make note of these terms and their definitions.\nFunctions as Values function; as a value Passing Functions as Arguments setTimeout map Recursion recursion Recursion Walkthrough: The Base Case base case Content Links Reading Exercises: More on Functions Studio: More Functions ",
    "description": "",
    "tags": null,
    "title": "Chapter 11: More on Functions",
    "uri": "/more-on-functions/index.html"
  },
  {
    "content": ".split() Examples The general syntax for this method is:\nstringName.split('delimiter') split is actually a string method, but it complements the array method join.\nsplit divides a string into smaller pieces, which are stored in a new array. The delimiter argument determines how the string is broken apart.\nExample let numbers = \"1,2,3,4\"; let word = \"Rutabaga\"; let phrase = \"Bookkeeper of balloons.\" let arr = []; arr = numbers.split(','); //split the string at each comma. console.log(arr); arr = phrase.split(' '); //split the string at each space. console.log(arr); arr = word.split(''); //split the string at each character. console.log(arr); Output\n['1', '2', '3', '4'] ['Bookkeeper', 'of', 'balloons.'] ['R', 'u', 't', 'a', 'b', 'a', 'g', 'a'] ",
    "description": "",
    "tags": null,
    "title": "split Examples",
    "uri": "/appendices/array-method-examples/split-examples/index.html"
  },
  {
    "content": "Learning Objectives Upon completing everything in this chapter, you should be able to do the following:\nCreate and use object literals in JS Use the Math module for common mathematical operations Key Terminology Here is a list of key terms in this chapter broken down by the page the term first appears on. Make note of the term and its definition as you read along.\nObjects and Why They Matter Objects Key Key/value pair object literal property method Content Links Reading Exercises: Objects and Math Studio: Objects and Math Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 12: Objects and the Math Object",
    "uri": "/objects-and-math/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nImport external modules Create and import custom modules Explain why modules are useful for organizing and sharing code Use require to import modules Reference and use modules properties Install external Node mudules using npm Create a module and import it with another file in the same project Use the module.exports object to expose modules properties Key Terminology Here is a list of key terms for this chapter broken down by the page the term first appears on. You should make note of these terms and their definitions.\nWhat are Modules Modules Require Modules require relative path NPM NPM Exporting Modules export Content Links Reading Exercises: Modules Studio: Boosting Confidence Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 13: Modules",
    "uri": "/modules/index.html"
  },
  {
    "content": "Learning Objectives Upon completing the content in this chapter, you should be able to do the following:\nWrite unit tests to test the behavior of functions Identify proper test cases for which a test should be written Understand the importance of testing in creating well-functioning code Use test-driven development to define the behavior of code before writing it, and to ensure that code is properly tested Key Terminology Here is a list of key terms for this chapter, broken down by the page they first appear on. Make note of these terms and their definitions.\nWhy Test Your Code? unit testing regression self-documenting code Hello, Jest! Jest unit testing framework test suite specification spec expectation matcher Test-Driven Development test-driven development refactoring code Chapter Content Reading Exercises: Unit Testing Studio: Unit Testing Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 14: Unit Testing",
    "uri": "/unit-testing/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUnderstand the contexts in which a variable may be declared: block/local, global,execution context Understand and properly declare variables in the best context for the intended use Describe shadowing, and how it affects variable visibility Explain variable hoisting Key Terminology Here is a list of key terms for this chapter broken down by the page the term first appears on. You should make note of these terms and their definitions.\nIntroduction scope local scope global scope execution context Using Scope shadowing variable shadowing variable hoisting Content Links Reading Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 15: Scope",
    "uri": "/scope/index.html"
  },
  {
    "content": "Setting Up Your Terminal Familiarizing yourself with the terminal on your machine is vital for any programmer. Over the course of this program and your career, you will find yourself navigating to it frequently.\nNote You will often find yourself coming across terms such as the terminal and the command line.\nA terminal is a program that runs a shell which allows the user to enter commands.\nThe command-line is any interface that allows the user to enter text-based commands. The terminal is an example of a command-line interface. Many programs and software have their own command-line interface in order to interact with them. For example git is a version control tool that has its own command-line interface that you will be using throughout the course.\nNote Once you have your terminal setup on your machine, make sure to pin it to the taskbar or add it to your dock!\nMac Users Good news! The Terminal application comes with every Mac.\nYou can access it in one of two ways:\nThrough the Finder Open a new Finder window and navigate to the Applications folder. Inside the Applications folder, you will find a Utilities folder. Open the Utilities folder, and inside is the Terminal application! Through LaunchPad If you are a fan of the LaunchPad features on Apple computers, hit the F4 key. Inside the Other or Utilities folder, you can find the Terminal. If you are still struggling to find the Terminal application, you can do a simple search in the Finder for it!\nSome terminal commands require the addition of sudo at the front of the command. This name gives the user super user rights. sudo is often required when installing software from the terminal.\n$ sudo install mocha Password: The Terminal will ask you for your machine’s password.\nTip When typing, don’t be alarmed if you don’t see your keystrokes while typing your password. Your machine is still receiving this information.\nPress enter when you are finished. If you’re attempting to run a command from the terminal and receive a permissions error, check if adding sudo to your command will resolve the error.\nWindows Users In order to get your terminal up and running, you have to first install Git Bash .\nNote When you are doing your Git Bash setup, you only need to leave the default selected.\nOnce Git Bash is installed on your machine, you can find the folder for it through the Home screen.\nInside the folder, simply select Git Bash to open the appropriate terminal.\n",
    "description": "",
    "tags": null,
    "title": "Terminal Setup",
    "uri": "/installations/terminal-setup/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nDescribe the meaning of special primitive types undefined and null and provide examples of situations in which they may be used Understand the difference between primitive and object types, including what it means for primitive types to be immutable List the 5 primitive types in JS: string, number, boolean, null, and undefined. Key Terminology Here is a list of key terms you should know from this chapter.\nprimitive undefined 1 null Chapter Content Reading Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 16: More on Types",
    "uri": "/more-on-types/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nEffectively throw and catch exceptions to improve user experience and make debugging easier Explain what an exception is and why exceptions are used Write a program using a try/catch block Catch exceptions only when something meaningful can be done Throw exceptions with clear, descriptive messages Throw exceptions only when the program can not be properly executed in the given state Give at least three examples of standard exceptions Explain how a finally block works and when one should be used Create negative tests to verify that code throws an exception when necessary Key Terminology Here is a list of key terms for this chapter broken down by the page the term first appears on. You should make note of these terms and their definitions.\nIntroduction exception stacktrace Error SyntaxError ReferenceError TypeError Throw throws Exceptions and Control Flow control flow try catch finally Content Links Reading Exercises: Exceptions Studio: Strategic Debugging Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 17: Exceptions",
    "uri": "/exceptions/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nCreate and instantiate classes Use inheritance to share behavior and data Key Terminology Here is a list of key terms for this chapter, broken down by the page the term first appears on.\nWhat are Classes? class Declaring and Calling a Class instance Inheritance Object-oriented programming inheritance child classes parent classes Chapter Content Reading Exercises: Classes Studio: Classes Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 18: Classes",
    "uri": "/classes/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nNavgiate through your filesystem effectively Create new files Copy existing files Remove directories or files List contents of a directory Understand the difference between an absolute and relative path. Understand the difference between a graphical user interface and a command line interface Key Terminology Here is a list of key terms for this chapter broken down by the page the term first appears on. You should make note of these terms and their definitions.\nWhat is a terminal anyways? graphical user interface (GUI) command line interface (CLI) terminal shell Filesystem and Paths filesystem directory subdirectory root directory parent directory absolute path relative path How to Do Stuff in the Terminal prompt Content Links Reading Exercises Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 19: Terminal",
    "uri": "/terminal/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nCreate static HTML pages using a variety of different tags inside the body. Key Terminology Here is a list of key terms for this chapter, based on the page the term first appears on. Make note of these terms and their definitions.\nBackground request response Hypertext markup languages element tag semantic html HTML Tags attributes Chapter Content Reading Exercises: HTML Studio: Making Headlines Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 20: We Built the Internet on HTML",
    "uri": "/html/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nAdd styles to static HTML pages using CSS Explain how CSS allows for separation of display and document structure Describe the 3 locations that style rules may be placed and when one location may be preferred over the others: external, document, inline Use CSS rules at each of the 3 possible locations Describe precedence between CSS rules based on location Use basic CSS rule types: font-size, color, font-family, background-color, text-align, etc Describe the following simple selector types, and situations in which each is preferred: element, ID, class Describe inline and block display; for common elements identify their default display Key Terminology What is CSS? css CSS Structure rule selector element selector id selector class selector Reading Exercises: CSS Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 21: Styling the Web With CSS",
    "uri": "/styling-css/index.html"
  },
  {
    "content": "Learning Objectives After completing all the content in this chapter, you should be able to do the following:\nGain a deeper understanding of what Git is and why programmers use it. Work with Git to version control personal work. Learn how Git can be used to manage teamwork. Key Terminology Here is a list of key terms in this chapter broken down by the page the term first appears on. As you read through this chapter, make note of these terms and their definitions.\nWhat is Git? repository commit Merging in Git merge merge conflict stash Chapter Content Reading Exercises: Git Studio: Communication Log Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 22: Git More Collaboration",
    "uri": "/git/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUnderstand the DOM is used to make dynamic web pages Use DOM objects and methods to alter an HTML web page Understand what events are and that JavaScript is an event driven language Handle and trigger events in JavaScript Differentiate between dynamic and static web pages Describe how the JavaScript environment of a browser is different from other JavaScript environments, such as Node.js Use the to include JavaScript into an HTML page Know to put your after the elements you want to alter, unless using load events Understand what the Document Object Model (DOM) is Understand and use the global variable window and these methods and properties: window.alert(), window.console, window.confirm(), window.location. Understand and use the global variable document and these methods and properties: document.title, document.getElementById(), document.querySelector(), document.querySelectorAll() Understand and use Element methods and properties: element.innerHTML, element.style, element.getAttribute(), element.setAttribute(), element.addEventListener() Know that JavaScript is an event driven programming language Key Terminology Here is a list of key terms for this chapter, broken down by the page the term first appears on.\nJavaScript in the Browser static dynamic The DOM DOM (Document Object Model) Events event event-driven inline event handler Handling Triggering Event Listeners listener jQuery bubbling Event Types mouseover event mouseout event load event Chapter Content Reading Exercises: The DOM and Events Studio: The DOM and Events Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 23: The DOM and Events",
    "uri": "/dom-and-events/index.html"
  },
  {
    "content": "Learning Objectives After completing all the content in this chapter, you should be able to do the following:\nUnderstand how the HTTP protocol enables web communication Key Terminology Here is a list of key terms for this chapter, broken down by the page they first appear on. Make note of these terms and their definitions as you read through the chapter content.\nHow the Internet Works client-server model server client protocol HTTP HTTPS TCP/IP DNS domain names IP address nameserver loopback address uniform resource locator URL web address scheme host port path root path query string HTTP at a Glance requests responses Requests request method request headers Responses response line response code response headers Chapter Content Reading Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 24: HTTP, the Postal Service of the Internet",
    "uri": "/http/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nCreate a form using HTML Understand the main form element attributes, action and method Properly use common inputs: text, submit, radio, checkbox, select, textarea, password, email Use label elements to add human-readable labels to form inputs Use the name attribute to identify inputs in the submitted data Understand and describe form submission Use event handlers to validate form data Know how to cancel form submission using event.preventDefault() Key Terminology Here is a list of key terms for this chapter, broken down by the page the term first appears on. As you read along, make note of these terms and their definitions.\nForms form input self-closing label focus Form Submission form submission POST Form Submission form handlers Validation with JavaScript preventDefault Chapter Content Reading Exercises: Forms Studio: HTTP and Forms Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 25: User Input with Forms",
    "uri": "/user-input-with-forms/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nUnderstand why data formats are necessary Rules of the JSON data format Know difference between JSON and XML Key Terminology Here is a list of key terms for this chapter, broken down by the page the term first appears on. As you read along, make note of these terms and their definitions.\nIntroduction Graphical User Interface GUI Application Programming Interface API Data Formats and JSON data format JavaScript Object Notation JSON Chapter Content Reading Exercises: JSON Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 26: JSON",
    "uri": "/json/index.html"
  },
  {
    "content": "Learning Objectives Upon completing all the content in this chapter, you should be able to do the following:\nMake a request to an API using fetch Handle a response from an API Understand the asynchronous cycle of network requests Familiar with terms AJAX and XHR (XmlHttpRequest) Key Terminology Here is a list of key terms for this chapter, broken down by the page the term first appears on.\nFetching Data fetch Asynchronous and Promises Asynchronous Synchronous AJAX requests promise Chapter Content Reading Exercises: Fetch Studio: Fetch \u0026 JSON Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 27: Fetch",
    "uri": "/fetch/index.html"
  },
  {
    "content": "Learning Objectives After you complete everything in this chapter, you should be able to do the following:\nSpeak to why different frameworks and libraries may use an extension of superset of JavaScript. Understand additional elements of ECMAScript 2015 or ES6 Differentiate between an extension and superset of JavaScript. Key Terminology These are the key terms you should make note of as you read the chapter. The terms are broken down by the page they appear on.\nThe JavaScript-y Way Vanilla JavaScript VanillaJS ECMAScript ECMAScript2015 ES6 arrow function spread operator Map for/of loop map() JavaScript Syntax Extensions syntax extension JSX JavaScript XML Supersets superset TypeScript statically typed dynamically typed Transpilation transpilation transpiler source-to-source compiler Babel Content Links Reading Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 28: The Modern JavaScript Landscape",
    "uri": "/modern-js/index.html"
  },
  {
    "content": "Learning Objectives Upon completing the content in this chapter, you should be able to do the following:\nDiscuss the importance of JS libraries and why developers choose React for their projects. Create a new React application with a tool called “Create React App”. Understand what a component is and the difference between a functional and class component. Create and style a new component Key Terminology Throughout this chapter, you should make note of the following key terms organized by the pages they appear on.\nIntroduction library framework React React Components components functional components class components props Create a React Application Create React App Content Links Reading Exercises: Chores vs. Hobbies Studio: A Few of Your Favorite Recipes Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 29: React, Part 1",
    "uri": "/react-lsn1/index.html"
  },
  {
    "content": "Learning Objectives Upon completing the content in this chapter, you should be able to do the following:\nIncorporate JavaScript expressions into HTML rendering. Use conditional rendering to display or not display certain elements. Use the following syntax: if/else Embedded expressions with logical operators such as \u0026\u0026 Ternary conditional operator ? : Create a list to display the elements in an array using the mapmethod. Key Terminology Arrow Functions Fragments if/else Ternary operator map ",
    "description": "",
    "tags": null,
    "title": "Chapter 30: React, Part 2",
    "uri": "/react-part-2/index.html"
  },
  {
    "content": "Learning Objectives Once you have completed everything in this chapter, you should be able to do the following:\nUnderstand what state is in React. Understand the underlying processes of changing the state in React. Work with event handlers to change a component’s state. Be able to render a form and understand what happens when the form is submitted. Key Terminology Here is a list of key terms you should make note of throughout the chapter on the page that they appear.\nAn Introduction to State in React state state variable state setter function hooks Changes in State Virtual DOM reconciliation Content Links Reading Exercises Studio Next Steps ",
    "description": "",
    "tags": null,
    "title": "Chapter 31: React, Part 3",
    "uri": "/react-lsn3/index.html"
  },
  {
    "content": " If you can’t fly then run, if you can’t run then walk, if you can’t walk then crawl, but whatever you do, you have to keep moving forward. — Martin Luther King Jr.\nA wise programmer once told me that the reassuring thing about coding is that there is always an answer. She said that while much of life is uncertain and we’re faced with questions that don’t have definite answers, when we program we can be certain that there is an answer to whatever problem that we have. We just need to find it.\nThis is where persistence or frustration tolerance comes in. What characterizes people who succeed as computer programmers is not how much math they know, or whether they took apart computers when they were eleven years old, or even whether they have a computer science degree. It is how hard they will work to find a solution.\nWhat it takes to succeed as you go through this course and beyond in your coding journey is a determination to not give up. To keep trying new things. To keep taking another look at the problem and coming up with another idea for how to solve it. To accept that this maddening process is not some flaw in you or in the field. But rather that it is the nature of the job itself. That you can learn to love it. And that’s why you will earn the big bucks.\nUse the following pages when ever you need some motivation/inspiration, i.e., a boost.\nRemember,\nRome wasn’t built in a day.\nBest Practices: Learning to Code The Power of Persistence Let's Play Ball Brain Breaks ",
    "description": "",
    "tags": null,
    "title": "Chapter 32: Booster Rockets",
    "uri": "/booster-rockets/index.html"
  },
  {
    "content": "What is a Graded Assignment? Graded Assignments will count towards your final grade in the course. Each assignment is graded pass-fail. While Assignment 0 is more of a tutorial to get you used to autograding in JavaScript, you have to get a passing grade on each assignment in order for you to continue on to the next unit. Each assignment builds on concepts introduced over multiple lessons, so we encourage you to begin reviewing the assignment and working on the different tasks as soon as the assignment becomes available in Canvas.\nContent Links Autograding Your Tests Assignment 0: Hello, World! Assignment 1: Candidate Testing Assignment 2: Scrabble Scorer Assignment 3: Mars Rover Assignment 4: Html Me Something Assignment 5: Launch Checklist Assignment 6: Orbit Report Next Steps ",
    "description": "",
    "tags": null,
    "title": "Graded Assignments",
    "uri": "/assignments/index.html"
  },
  {
    "content": "Intro to Web Development Installations Below you will find links for all necessary installations for this class.\nInstalling Git Installing Node Visual Studio Code Installation Terminal Setup ",
    "description": "",
    "tags": null,
    "title": "Installations",
    "uri": "/installations/index.html"
  },
  {
    "content": "Content Links Array Method Examples DOM Method Examples Math Method Examples Terminal Commands Tutorial ",
    "description": "",
    "tags": null,
    "title": "Appendices",
    "uri": "/appendices/index.html"
  },
  {
    "content": "Introduction to Professional Web Development in JavaScript Course Summary This course is an introduction to programming concepts and web development with JavaScript and React. JavaScript is a programming language used commonly for web development. Understanding how the internet works and being able to create web applications are important skills in today’s technology landscape. With JavaScript, you can work on your own web applications and support current applications for a company.\nAnother reason this course teaches JavaScript is that JavaScript is very much like other programming languages. Throughout the course and your career, you will hear that once you learn one programming language, it is easier to learn another. Programmers have found this to be true, especially if the new language closely matches the first.\nAs you work through this course, we encourage you to remember that learning to code is not only valuable and challenging, it can also be fun! Every EUREKA! moment inspires us to keep going forward and to learn new things. You may find some concepts difficult to understand at first, but these will also be the skills you may take the most pride in mastering. While the journey to learning to code is long and winding, it is also rewarding.\nFrom the moment that you write your first line of code, you are a programmer. We hope you enjoy the flight!\nWhere this Course Leads Upon completion of this course, you will be capable of building a small application with React that can dynamically update based on what options your user chooses. You will also be ready to start reviewing the Unit 2 materials of the web development program.\nWhen you start Unit 2, you will start learning a language used for back-end web development, either Java or C#. While you may not be entirely sure what back-end web development is yet, we remind you that by using the skills you employed to learn JavaScript, you are ready to start learning another programming language.\nChapters Chapter 1: Introduction Chapter 2: How Programs Work Chapter 3: How to Write Code Chapter 4: Data and Variables Chapter 5: Making Decisions with Conditionals Chapter 6: Errors and Debugging Chapter 7: Stringing Characters Together Chapter 8: Arrays Keep Things in Order Chapter 9: Repeating with Loops Chapter 10: Functions Are at Your Beck and Call Chapter 11: More on Functions Chapter 12: Objects and the Math Object Chapter 13: Modules Chapter 14: Unit Testing Chapter 15: Scope Chapter 16: More on Types Chapter 17: Exceptions Chapter 18: Classes Chapter 19: Terminal Chapter 20: We Built the Internet on HTML Chapter 21: Styling the Web With CSS Chapter 22: Git More Collaboration Chapter 23: The DOM and Events Chapter 24: HTTP, the Postal Service of the Internet Chapter 25: User Input with Forms Chapter 26: JSON Chapter 27: Fetch Chapter 28: The Modern JavaScript Landscape Chapter 29: React, Part 1 Chapter 30: React, Part 2 Chapter 31: React, Part 3 Chapter 32: Booster Rockets Graded Assignments Installations Appendices Pre-Course Requirements There are no academic pre-requisites for this course.\nIn order to participate, you will need to bring your own laptop. A Chromebook or tablet will not be sufficient. Your laptop should meet the following requirements:\nBe younger than 4 years old and able to support the latest operating system. You have administrator privileges and am able to install new software. Has an i5 or i7 Intel chip or an M1 or newer Apple processor. Has at least 8 GB of RAM. ",
    "description": "",
    "tags": null,
    "title": "Home",
    "uri": "/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
