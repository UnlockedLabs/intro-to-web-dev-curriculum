<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: Introduction to Web Dev</title>
    <link>http://localhost:1313/modern-js/reading/index.html</link>
    <description>Reading Content The JavaScript-y Way JavaScript Syntax Extensions Supersets Transpilation </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Mar 2023 11:39:25 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/modern-js/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The JavaScript-y Way</title>
      <link>http://localhost:1313/modern-js/reading/es6-syntax/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/es6-syntax/index.html</guid>
      <description>So far, we have been learning Vanilla JavaScript or VanillaJS. VanillaJS is a term used to describe plain JavaScript that doesnâ€™t employ any additional libraries or frameworks. Learning about programming and web development using VanillaJS is extremely useful in understanding the underlying behaviors of those frameworks and why programmers use them.&#xA;VanillaJS is more formally referred to ECMAScript. When ECMAScript2015 or ES6 was released, several key features were introduced that allow React developers to write more efficient code. We encountered these terms earlier when learning about template literals. We have introduced coding concepts to you using JavaScript syntax that is close to other languages, but ES6 has some specialized syntax that you are likely to see in more complex JavaScript applications.</description>
    </item>
    <item>
      <title>JavaScript Syntax Extensions</title>
      <link>http://localhost:1313/modern-js/reading/extensions/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/extensions/index.html</guid>
      <description>In the JavaScript landscape, we can use a JavaScript syntax extension. A syntax extension adds new syntax rules that are not a regular feature of the base programming language. Adding new syntax features to programming languages is a large lift and can lead to frustration and confusion amongst the developer community. However, if there is a specific use case that would benefit from new syntax rules, language developers may create a syntax extension to allow a small set of developers to access that beneficial syntax without impacting the base language. One such extension for JavaScript is JSX or JavaScript XML. JSX syntax allows developers to write HTML elements inside JavaScript code without having to handle any of the rendering themselves. React developers use JSX because it efficiently renders components of web applications.</description>
    </item>
    <item>
      <title>Supersets</title>
      <link>http://localhost:1313/modern-js/reading/supersets/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/supersets/index.html</guid>
      <description>In addition to syntax extensions, JavaScript also has supersets. A superset of a language just means that a program written in TypeScript is also a valid program in JavaScript. Unlike a syntax extension, a superset is its own programming language with its own syntax rules. Some React applications are written in TypeScript, which is a superset of JavaScript. Since TypeScript programs are also valid as JavaScript programs, you might be wondering why choose to write something in TypeScript. While it is true that TypeScript programs are valid as JavaScript programs, TypeScript has one major difference: it is a statically typed language. On the other hand, JavaScript is dynamically typed. A statically typed language is a language where the type of a variable is given at the time the program is compiled. This is often achieved by adding the type of the variable to the variable declaration. In a dynamically typed language, the type of the variable is determined at runtime and is based on the value inside the variable, not the variable declaration. Statically typed languages are considered by many to be more stable and less prone to production errors, because the errors will occur in development.</description>
    </item>
    <item>
      <title>Transpilation</title>
      <link>http://localhost:1313/modern-js/reading/transpilers/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/transpilers/index.html</guid>
      <description>With all the extensions and supersets of JavaScript, you might be wondering how developers keep track of all the different languages and versions of JavaScript. Developers make use of a process called transpilation. Transpilation is where a programming language is compiled into a different programming language. For example, TypeScript code can be transpiled and the end result is the equivalent JavaScript code. Developers use transpilers, also called source-to-source compiler, to make transpilation happen. Transpilers are used to ensure that applications are operable on different browsers and different versions of browsers. ECMAScript versions are not supported at the same level so a transpiler can be used to turn ES6 into ES3 to ensure that the code works for all browsers and browser versions.</description>
    </item>
  </channel>
</rss>