<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading on Introduction to Web Dev</title>
    <link>http://localhost:1313/modern-js/reading/index.html</link>
    <description>Recent content in Reading on Introduction to Web Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Mar 2023 11:39:25 -0500</lastBuildDate><atom:link href="http://localhost:1313/modern-js/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The JavaScript-y Way</title>
      <link>http://localhost:1313/modern-js/reading/es6-syntax/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/es6-syntax/index.html</guid>
      <description>So far, we have been learning Vanilla JavaScript or VanillaJS. VanillaJS is a term used to describe plain JavaScript that doesn&amp;rsquo;t employ any additional libraries or frameworks. Learning about programming and web development using VanillaJS is extremely useful in understanding the underlying behaviors of those frameworks and why programmers use them.
VanillaJS is more formally referred to ECMAScript. When ECMAScript2015 or ES6 was released, several key features were introduced that allow React developers to write more efficient code.</description>
    </item>
    <item>
      <title>JavaScript Syntax Extensions</title>
      <link>http://localhost:1313/modern-js/reading/extensions/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/extensions/index.html</guid>
      <description>In the JavaScript landscape, we can use a JavaScript syntax extension. A syntax extension adds new syntax rules that are not a regular feature of the base programming language. Adding new syntax features to programming languages is a large lift and can lead to frustration and confusion amongst the developer community. However, if there is a specific use case that would benefit from new syntax rules, language developers may create a syntax extension to allow a small set of developers to access that beneficial syntax without impacting the base language.</description>
    </item>
    <item>
      <title>Supersets</title>
      <link>http://localhost:1313/modern-js/reading/supersets/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/supersets/index.html</guid>
      <description>In addition to syntax extensions, JavaScript also has supersets. A superset of a language just means that a program written in TypeScript is also a valid program in JavaScript. Unlike a syntax extension, a superset is its own programming language with its own syntax rules. Some React applications are written in TypeScript, which is a superset of JavaScript. Since TypeScript programs are also valid as JavaScript programs, you might be wondering why choose to write something in TypeScript.</description>
    </item>
    <item>
      <title>Transpilation</title>
      <link>http://localhost:1313/modern-js/reading/transpilers/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/modern-js/reading/transpilers/index.html</guid>
      <description>With all the extensions and supersets of JavaScript, you might be wondering how developers keep track of all the different languages and versions of JavaScript. Developers make use of a process called transpilation. Transpilation is where a programming language is compiled into a different programming language. For example, TypeScript code can be transpiled and the end result is the equivalent JavaScript code. Developers use transpilers, also called source-to-source compiler, to make transpilation happen.</description>
    </item>
  </channel>
</rss>