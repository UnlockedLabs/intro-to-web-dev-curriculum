<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assignment 5: Launch Checklist :: Introduction to Web Dev</title>
    <link>http://localhost:1313/assignments/launch-checklist/index.html</link>
    <description>Using our knowledge of forms, the DOM, and HTTP, the commanders of our favorite space shuttle program asked us to create a quick launch checklist. We have four fields that need to be filled out with vital information: the pilot’s name, the co-pilot’s name, the fuel levels, and the mass of the cargo.&#xA;Our pilot, Chris, and the co-pilot, Blake, have been hard at work securing the cargo and filling the shuttle tank. All we need to do is use validation to ensure that we have all of the info for the space shuttle program and make sure no one prematurely launches the shuttle.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jul 2023 12:55:09 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/assignments/launch-checklist/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Task 1: Setting Up the Starter Code</title>
      <link>http://localhost:1313/assignments/launch-checklist/starter-code/index.html</link>
      <pubDate>Fri, 07 Jul 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/assignments/launch-checklist/starter-code/index.html</guid>
      <description>Fork and clone the starter code repository .&#xA;To get started, navigate to the directory with your copy of the starter code.&#xA;Run npm install. Open index.html with Firefox to verify that your starter code is working. When you open index.html in the browser, you should see the Launch Checklist form with a rectangle above it for the mission destination and a rectangle below it that simply says “Awaiting Information Before Launch”.</description>
    </item>
    <item>
      <title>Task 2: Adding Validation</title>
      <link>http://localhost:1313/assignments/launch-checklist/validation/index.html</link>
      <pubDate>Fri, 07 Jul 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/assignments/launch-checklist/validation/index.html</guid>
      <description>Adding Alerts Now, let’s add validation to notify the user if they forgot to enter a value for any one of the fields.&#xA;This process is going to look similar to the validation section in the chapter on forms. Add an alert to notify the user that all fields are required.&#xA;You also want to make sure that the user entered valid info for each of the fields. Valid information for the fields means that the user submits a value that is easily converted to the correct data type for our fellow engineers. The pilot and co-pilot names should be strings and the fuel level and cargo mass should be numbers. To do this, complete the helper function in your scriptHelper.js called validateInput(). validateInput() should take in a string as a parameter and return &#34;Empty&#34;, &#34;Not a Number&#34;, or &#34;Is a Number&#34; as appropriate. In scriptHelper.js, you will use validateInput() to complete the formSubmission() function. formSubmission() will take in a document parameter and strings representing the pilot, co-pilot, fuel level, and cargo mass. Using the values in those strings and the document parameter for your HTML document, update the shuttle requirements as described below. Make sure to call your formSubmission() function at the appropriate time in your script.js file!</description>
    </item>
    <item>
      <title>Task 3: Fetching Planetary Data</title>
      <link>http://localhost:1313/assignments/launch-checklist/planet-fetch/index.html</link>
      <pubDate>Fri, 07 Jul 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/assignments/launch-checklist/planet-fetch/index.html</guid>
      <description>Finally, we need some JSON to fill in the crew on the mission destination. Our planetary data can be found in JSON format . Review the list and decide which planet you want to send our intrepid crew to and make note of the index number.&#xA;Note When fetching more than one JSON object, we get an array of all of the JSON objects. In this case, that means an array of our possible mission destinations. When picking the mission destination, just pick the item in the array you want and start counting at 0.</description>
    </item>
    <item>
      <title>Task 4: Submitting Your Work</title>
      <link>http://localhost:1313/assignments/launch-checklist/submission/index.html</link>
      <pubDate>Fri, 07 Jul 2023 12:55:09 -0500</pubDate>
      <guid>http://localhost:1313/assignments/launch-checklist/submission/index.html</guid>
      <description>The End Result After you implement everything, the following form submission would result in the proper updates to the launchStatus and faultyItems list.</description>
    </item>
  </channel>
</rss>