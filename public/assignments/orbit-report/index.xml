<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Assignment 6: Orbit Report on Introduction to Web Dev</title>
    <link>http://localhost:1313/assignments/orbit-report/index.html</link>
    <description>Recent content in Assignment 6: Orbit Report on Introduction to Web Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 May 2023 11:39:25 -0500</lastBuildDate><atom:link href="http://localhost:1313/assignments/orbit-report/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project Introduction</title>
      <link>http://localhost:1313/assignments/orbit-report/project-intro/index.html</link>
      <pubDate>Thu, 25 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/project-intro/index.html</guid>
      <description>Introduction and Background There are thousands of satellites orbiting the earth. You are tasked with updating a searchable, sortable table of satellites. For the purposes of this assignment, a satellite will be defined as any object purposefully placed into orbit.
For this assignment, you will create a table that shows satellites based on their orbit paths. There are three types of orbit paths for satellites: Low, Medium, High.
Your completed assignment will have the following features:</description>
    </item>
    <item>
      <title>Task 1: Getting Started</title>
      <link>http://localhost:1313/assignments/orbit-report/getting-started/index.html</link>
      <pubDate>Wed, 22 Mar 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/getting-started/index.html</guid>
      <description>Explore the Starter Code Fork and Clone the starter code repo.
Run npm install Run npm start to run the starter code. Open the project and examine the following parts:
components directory satData.jsx contains the data used for this assignment. It is an array of objects. Note the key/value pairs. Buttons.jsx contains two &amp;lt;button&amp;gt; tags. The both &amp;lt;button&amp;gt; tags are placeholders. We will be updating these buttons as we work in this component.</description>
    </item>
    <item>
      <title>Task 2: Create the Banner Component</title>
      <link>http://localhost:1313/assignments/orbit-report/banner/index.html</link>
      <pubDate>Thu, 25 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/banner/index.html</guid>
      <description>Create Banner.jsx Create a new file named Banner.jsx inside the components directory.
Inside this file, create a function called Banner.
This function should return a &amp;lt;header&amp;gt; tag that says: &amp;ldquo;Orbit Report&amp;rdquo;.
Below the &amp;lt;header&amp;gt; create a &amp;lt;p&amp;gt; tag with instructions for users.
Here is an example message:
Click on the buttons to see the satellites in that orbit type Make sure that you are exporting this function.
Open App.jsx
Import the new Banner component you created.</description>
    </item>
    <item>
      <title>Task 3: Update App.jsx</title>
      <link>http://localhost:1313/assignments/orbit-report/update-app/index.html</link>
      <pubDate>Thu, 25 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/update-app/index.html</guid>
      <description>In this step, you will create the following: A variable to manage the state of our project A variable to hold the unique values of the orbitType property of the satellite objects A function that will filter through the satellites. These variables and this function will be used by the Buttons and Table components.
Inside the App.jsx file Open the App.jsx file.
Import useState from &amp;quot;react&amp;quot;.
Import satData.jsx as satData.</description>
    </item>
    <item>
      <title>Task 4: Update Buttons.jsx</title>
      <link>http://localhost:1313/assignments/orbit-report/update-buttons/index.html</link>
      <pubDate>Thu, 25 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/update-buttons/index.html</guid>
      <description>In this step, you will create the following: Four clickable buttons Three of them will use the props you passed from the App() function One will display all of the satellites Inside the Buttons.jsx component: Import the satData as satData. Pass the props created from the App() function: filterByType, setSat, and displaySats. Update the first button: This function needs to return a &amp;lt;div&amp;gt; that used the map function to iterate over the displaySats variable.</description>
    </item>
    <item>
      <title>Task 5: Update Table.jsx</title>
      <link>http://localhost:1313/assignments/orbit-report/update-table/index.html</link>
      <pubDate>Thu, 25 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/update-table/index.html</guid>
      <description>In this step, you will create the following: A table that provides the following data about the satellites:
Name Type of Satellite Launch Date Status Comments have been provided to help structure the table. You can keep them or remove them.
Inside the Table.jsx component: Notice that the Table function starts with the sat prop provided. Start by updating the table header. It needs a total of four &amp;lt;th&amp;gt; tags. They need to hold text for the following data points: Name, Type of Satellite, Launch Date, and Status.</description>
    </item>
    <item>
      <title>Task 6: Optional Styling</title>
      <link>http://localhost:1313/assignments/orbit-report/styling/index.html</link>
      <pubDate>Thu, 25 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/styling/index.html</guid>
      <description>Styling has been provided if you would like to add it to your project.
You can start by importing styling.css into the following components:
Banner.jsx Table.jsx Buttons.jsx Inside Buttons.jsx update the &amp;lt;div&amp;gt; in line 6 so that its className is equal to flex-container.
Reminder: This step is optional.
Next </description>
    </item>
    <item>
      <title>Task 7: Running the Auto-grading Tests</title>
      <link>http://localhost:1313/assignments/orbit-report/testing/index.html</link>
      <pubDate>Thu, 25 May 2023 11:39:25 -0500</pubDate>
      <guid>http://localhost:1313/assignments/orbit-report/testing/index.html</guid>
      <description>Run the Tests This project uses unit tests to help auto-grade your work. The tests should pass based on the files you create and their behavior.
Run the tests when you reach this section of the instructions. You may run them as you work on the project. These tests are looking to see if your components render. They do not provide help in creating the project.
Warning In order to pass this assignment, you must pass the workflow tests in GitHub Actions .</description>
    </item>
  </channel>
</rss>