<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: Introduction to Web Dev</title>
    <link>http://localhost:1313/react-lsn3/reading/index.html</link>
    <description>Reading Content An Introduction to State in React Changes in State React and the DOM Introduction to React Forms </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Apr 2023 16:25:46 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/react-lsn3/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to State in React</title>
      <link>http://localhost:1313/react-lsn3/reading/state-intro/index.html</link>
      <pubDate>Wed, 12 Apr 2023 16:25:46 -0500</pubDate>
      <guid>http://localhost:1313/react-lsn3/reading/state-intro/index.html</guid>
      <description>One of the benefits of using React is that as users interact with the application, the application updates the user interface without reloading the entire page. This is due to a concept called state. State is oftentimes referred to as a component’s memory.&#xA;Let’s think back to the last time you filled out your tax return. If you e-file your taxes, you might have used a React-based web application to do so. An example component would be the tax estimate for your federal and state taxes. For some tax applications, if it looks like you are getting a refund, the number is green and if it looks like you owe some money, the number is red. At the beginning of the process, both federal and state would have shown $0 or “N/A” to indicate that you haven’t started the process yet. Now when you enter the information on a form, like your W2, you see the numbers in that component changing. In fact, every time you edit some aspect of your taxes, the numbers may change and the colors of that number may change. This is where state comes into play in this React-based tax application. Reloading the page every time you edit one thing would be annoying and make the application inefficient. Even just re-rendering one component on the page can be a costly process. With state, the component is only re-rendered when there is new data. If you enter some information that doesn’t change the fact that the federal government owes you a refund of $200, the component will not re-render. Selectively re-rendering components makes React an efficient library to use for web development. While not always noticeable, re-rendering components can lead to lagging or delays as the users interact with your application. By only re-rendering components in select cases, React helps us minimize the possibility of this happening.</description>
    </item>
    <item>
      <title>Changes in State</title>
      <link>http://localhost:1313/react-lsn3/reading/state-changes/index.html</link>
      <pubDate>Wed, 12 Apr 2023 16:25:46 -0500</pubDate>
      <guid>http://localhost:1313/react-lsn3/reading/state-changes/index.html</guid>
      <description>For a quick review, state is the component’s memory and when a change in state occurs, the component re-renders. Let’s take a more in-depth look into how React re-renders a component. A number of things can trigger the re-render, but right now, we are going to just focus on state changes. While we can use the useState hook to set up a state variable, we can use the state setter function to trigger a change in state. Since state variables are treated as read-only, we cannot simply say stateVariable = x to update them, we have to use a state setter function to replace the current value and trigger the change in state.</description>
    </item>
    <item>
      <title>React and the DOM</title>
      <link>http://localhost:1313/react-lsn3/reading/react-dom/index.html</link>
      <pubDate>Wed, 12 Apr 2023 16:25:46 -0500</pubDate>
      <guid>http://localhost:1313/react-lsn3/reading/react-dom/index.html</guid>
      <description>When changing the state, our intended effect may involve using some of the methods and processes we learned about earlier when we first talked about the DOM and events . Let’s take a closer look at changing state with an application in manufacturing.&#xA;We are at a shoe factory and the mechanism responsible for counting how many shoes come off the line is broken. The factory manager doesn’t want to stop production and cause unnecessary delays so they have asked you to sit by the machine and manually count the shoes coming down the line. With your React skills, you can quickly code an application that contains a single button and displays the current shoe count.</description>
    </item>
    <item>
      <title>Introduction to React Forms</title>
      <link>http://localhost:1313/react-lsn3/reading/form-intro/index.html</link>
      <pubDate>Wed, 12 Apr 2023 16:25:46 -0500</pubDate>
      <guid>http://localhost:1313/react-lsn3/reading/form-intro/index.html</guid>
      <description>Now that we can handle events with React, let’s talk about forms. When a form is submitted, the page reloads and the data is sent off to where it needs to go. In React, while form submission requires resetting the state back to the initial state, we can also experiment with changing the state.&#xA;Let’s return to manufacturing. Since the shoe factory is having so many issues today, you have been asked to submit a full report online about what is happening. You want to make sure that the text you are entering into the form is accurate and grammatically correct. To be honest, we all can have a hard time editing the text in those text fields. So you add a preview section to the application so the user can review what they have entered and easily edit their work before submitting.</description>
    </item>
  </channel>
</rss>