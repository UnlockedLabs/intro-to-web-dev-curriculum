<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading on Introduction to Web Dev</title>
    <link>http://localhost:1313/classes/reading/index.html</link>
    <description>Recent content in Reading on Introduction to Web Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Sep 2023 16:20:48 -0500</lastBuildDate><atom:link href="http://localhost:1313/classes/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What are Classes?</title>
      <link>http://localhost:1313/classes/reading/introduction/index.html</link>
      <pubDate>Fri, 15 Sep 2023 16:20:48 -0500</pubDate>
      <guid>http://localhost:1313/classes/reading/introduction/index.html</guid>
      <description>Recall that objects are data structures that hold many values, which consist of properties and methods.
We often need to create many objects of the same type. To do this in an efficient way, we define a class, which allows us to set up the general structure for an object. We can then reuse that structure to build multiple objects. These objects all have the same set of keys, but the values assigned to each key will vary.</description>
    </item>
    <item>
      <title>Declaring and Calling a Class</title>
      <link>http://localhost:1313/classes/reading/declaring-a-class/index.html</link>
      <pubDate>Fri, 15 Sep 2023 16:20:48 -0500</pubDate>
      <guid>http://localhost:1313/classes/reading/declaring-a-class/index.html</guid>
      <description>Creating a Class Just like the function keyword defines a new function, the keyword for defining a new class is class. By convention, class names start with capital letters to distinguish them from JavaScript function and variable names (e.g. MyClass vs. myFunction).
Remember that classes are blueprints for building multiple objects of the same type. The general format for declaring a class is:
1 2 3 4 5 6 class ClassName { constructor(parameters) { //assign properties } //define methods } Note the keyword constructor.</description>
    </item>
    <item>
      <title>Assigning Class Methods</title>
      <link>http://localhost:1313/classes/reading/class-methods/index.html</link>
      <pubDate>Fri, 15 Sep 2023 16:20:48 -0500</pubDate>
      <guid>http://localhost:1313/classes/reading/class-methods/index.html</guid>
      <description>Just as with objects, we may want to add methods to our classes in addition to properties. So far, we have learned how to set the values of the class&amp;rsquo;s properties inside the constructor.
When assigning methods in classes, we can either create them outside or inside the constructor.
Assigning Methods Outside constructor When assigning methods outside of the constructor, we simply declare our methods the same way we would normally do for objects.</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>http://localhost:1313/classes/reading/inheritance/index.html</link>
      <pubDate>Fri, 15 Sep 2023 16:20:48 -0500</pubDate>
      <guid>http://localhost:1313/classes/reading/inheritance/index.html</guid>
      <description>Object-oriented programming is a type of software design where the codebase is organized around objects and classes. Objects contain the functions and central logic of a program.
Object-oriented programming stands on top of four principles: abstraction, polymorphism, encapsulation, and inheritance. We will dive into inheritance now and work with the other three principles in Unit Two of this class.
Inheritance refers to the ability of one class to acquire properties and methods from another.</description>
    </item>
  </channel>
</rss>