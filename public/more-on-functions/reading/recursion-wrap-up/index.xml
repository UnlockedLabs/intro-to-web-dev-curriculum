<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recursion Wrap-Up :: Introduction to Web Dev</title>
    <link>http://localhost:1313/more-on-functions/reading/recursion-wrap-up/index.html</link>
    <description>In order to function (ba-dum chhhh), recursion must fulfill four conditions:&#xA;A series of small, identical steps combine to solve a larger problem. A base case must be defined. When true, this simplest case halts the recursion. A recursive function repeatedly calls itself. Each time the recursive function is called, it must alter the data/variables/conditions in order to move closer to the base case. Benefits of Recursion: Fewer lines of code required to accomplish a task, Makes code cleaner and more readable. Drawbacks of Recursion: More abstract than using loops, Code is “more readable” only if the reader understands recursion. Recursion in a Nutshell Build a single function to break a big problem into a slightly smaller version of the exact same problem. The function repeatedly calls itself to reduce the problem into smaller and smaller pieces. Eventually, the function reaches a simplest case (the base), which it solves. Solving the base case sets up the solutions to all of the previous steps. Why Do I Need To Know Recursion? If you ask veteran programmers how often they use recursion, you will get answers ranging from “Not since I had to do it in school,” to “Very regularly.” Some programmers avoid recursion like the plague, while others look forward to using it wherever it fits.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate></lastBuildDate>
    <atom:link href="http://localhost:1313/more-on-functions/reading/recursion-wrap-up/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>