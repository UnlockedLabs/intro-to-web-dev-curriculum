<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading :: Introduction to Web Dev</title>
    <link>http://localhost:1313/unit-testing/reading/index.html</link>
    <description> Why Test Your Code? Hello, Jest! Unit Testing in Action Test-Driven Development TDD in Action </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Sep 2023 13:40:41 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/unit-testing/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Test Your Code?</title>
      <link>http://localhost:1313/unit-testing/reading/why-test/index.html</link>
      <pubDate>Wed, 06 Sep 2023 13:40:41 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/reading/why-test/index.html</guid>
      <description>Checking your code is part of the development process. Developers rarely write code without verifying it. You are used to debugging programs as you write them. In fact, we devoted an entire chapter to debugging early in the course.&#xA;Your development process probably looks something like this:&#xA;Write code Run program Notice error and investigate Repeat these steps until there are no more errors But there’s a better way to test your code, using automated tests. Automated tests actively test your code and help to remove the burden of manual testing. There are many types of automated tests. This chapter focuses on unit testing, which tests the smallest components (or units) of code. These are typically individual functions.</description>
    </item>
    <item>
      <title>Hello, Jest!</title>
      <link>http://localhost:1313/unit-testing/reading/hello-jest/index.html</link>
      <pubDate>Wed, 06 Sep 2023 13:40:41 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/reading/hello-jest/index.html</guid>
      <description>In order to unit test our code, we need to use a module. Such a module is called a unit-testing framework, and there are many to choose from .&#xA;We will use Jest , a popular JavaScript testing framework. We are using Jest because of it’s popularity in industry, excellent developer support, and it is used for testing React applications, which we will learn more about in later lessons.</description>
    </item>
    <item>
      <title>Unit Testing in Action</title>
      <link>http://localhost:1313/unit-testing/reading/unit-testing-in-action/index.html</link>
      <pubDate>Wed, 06 Sep 2023 13:40:41 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/reading/unit-testing-in-action/index.html</guid>
      <description>Testing is a bit of an art; there are no hard and fast rules about how to go about writing good tests. That said, there are some general principles that you should follow. In this section, we explore some of these.&#xA;In particular, we focus on identifying good test cases by working through a specific example. A test case is a single situation that is being tested.&#xA;What to Test When writing tests for your code, what should you test? You can’t test every possible situation or input. But you also don’t want to leave out important cases. A function or program that isn’t well-tested might have bugs lurking beneath the surface.</description>
    </item>
    <item>
      <title>Test-Driven Development</title>
      <link>http://localhost:1313/unit-testing/reading/tdd/index.html</link>
      <pubDate>Wed, 06 Sep 2023 13:40:41 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/reading/tdd/index.html</guid>
      <description>Now that we know more about unit tests, we are going to learn a new way of using them. So far we have written tests to verify functionality of existing code. Next we are going to use tests to verify functionality of code that does NOT already exist. This may sound odd, but this process has many benefits as we will learn.&#xA;As the name sounds, Test-driven development (TDD) is a software development process where the unit tests are written first. However, that doesn’t tell the entire story. Writing the tests first and intentionally thinking more about the code design leads to better code. The name comes from the idea of the tests driving the development process.</description>
    </item>
    <item>
      <title>TDD in Action</title>
      <link>http://localhost:1313/unit-testing/reading/tdd-in-action/index.html</link>
      <pubDate>Wed, 06 Sep 2023 13:40:41 -0500</pubDate>
      <guid>http://localhost:1313/unit-testing/reading/tdd-in-action/index.html</guid>
      <description>Open transmission-processor in javascript-projects/unit-testing/chapter-examples and follow along as we implement a project using TDD.&#xA;We need to write a Node module to process transmissions from the Voyager1 probe .&#xA;Example Transmission&#xA;&#34;1410::&lt;932829840830053761&gt;&#34;Expected Result&#xA;{ id: 1410, rawData: 932829840830053761 }</description>
    </item>
  </channel>
</rss>